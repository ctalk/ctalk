/* $Id: ClassLibraryTree4,v 1.1.1.1 2019/10/26 23:40:51 rkiesling Exp $ -*-c-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2015 Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *    ClassLibraryTree Class
 */

Application class ClassLibraryTree4; 

Exception instanceMethod __silent_CLT_Exception (void) {
  // Handle an exception silently.
  self deleteLastException;
  return NULL;
}

TreeNode instanceMethod addSubClasses (AssociativeArray subclassesArg) {
  
  Symbol new superclassPtr;
  TreeNode new node;
  TreeNode new tree;
  AssociativeArray new subclasses;
  String new superclassName;
  String new superclassLabel;

  if (subclassesArg size <= 1)
    return NULL;

  tree = self;

  subclassesArg mapKeys {
    tree search *self;
    *superclassPtr = tree searchResult;
    if (*superclassPtr) {
      node = TreeNode basicNew self name, self name;
      node setContent self name;
      (*superclassPtr) addChild node;
    } else {
      superclassName = String basicNew (*self), (*self);
      subclasses atPut (self name), superclassName;
    }
  }

  eval tree addSubClasses subclasses;
}

ClassLibraryTree4 instanceMethod init (TreeNode classTree, Boolean verbose) {
  AssociativeArray new classes;
  AssociativeArray new subclasses;
  DirectoryStream new dir;
  ReadFileStream new readStream;
  Array new classDirs;
  List new classFiles;
  String new classFilePath;   /* Path derived from the file name. */
  String new classNamePath;   /* Path derived from the "class" declaration. */
  String new textLine;
  Array new searchLoc;
  Array new tokens;
  Integer new nTokens;
  Exception new ex;
  String new className;
  String new superClassName;
  Symbol new superClassPtr;
  TreeNode new node;
  Key new k;

  ex installHandler __silent_CLT_Exception;

  self classSearchPath split ':', classDirs;
  classDirs map {
    dir directoryList self, classFiles;
    classFiles map {

      if (self == "." || self == "..")
	continue;

      if (verbose) {
	printf ("."); fflush (stdout);
      }

      classFilePath = super + "/" + self;

      readStream openOn classFilePath;
      if (ex pending) {
	ex handle;
	continue;
      }

      do {
	textLine = readStream readLine;

	if (textLine at 0 == EOF)
	  break;

	if (textLine search " class ", searchLoc) {

	  nTokens = textLine split " *", tokens;

	  if (nTokens == 3) {

	    *superClassPtr = String basicNew (tokens at 0), (tokens at 0);
	    className = tokens at 2;
	    className = className subString 0, className charPos ';';
	    classNamePath = super + "/" + className;
	    if (readStream exists classNamePath) {
	      classes atPut className, *superClassPtr;
	    }

	    break;

	  }
	}
      } while (1);

      readStream closeStream;

    }
  }

  classTree setContent "Object";

  k = *classes;
  while (k) {
    classTree search *k;
    *superClassPtr = classTree searchResult;
    if (*superClassPtr) {
      node = TreeNode basicNew k name, k name;
      node setContent k name;
      (*superClassPtr) addChild node;
    } else {
      superClassName = String basicNew *k, *k;
      subclasses atPut k name, superClassName;
    }
    ++k;
  }
  classTree addSubClasses subclasses;

  printf ("\n");

}
