/* $Id: ctedit.ca,v 1.1.1.1 2020/05/16 02:37:00 rkiesling Exp $  -*-c-*- */

/*
  This file is part of Ctalk.
  Copyright Â© 2019-2020 Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is includaed in all source code modules.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation, 
  Inc., 51 Franklin St., Fifth Floor, Boston, MA 02110-1301 USA.
*/

/*
  ctedit.ca - Basic text editor using X11TextEditorPane class.

  Usage:

    ctedit [<options>] <filename>

  Typing, "ctedit -h" displays a list of options.

  Pressing Esc or selecting "Close" from the window menu
  exits the program and saves the edited text.
  
  If <filename> exists, ctedit renames the previous version
  of the file to <filename>.bak.  If <filename> doesn't
  exist, ctedit creates a new file.

  The editing commands are set in the X11TextEditorPane :
  handleKbdInput method.  They are:

     Right, Ctrl-F       Next character
     Left, Ctrl-B        Previous character
     Up, Ctrl-P          Previous line
     Down, Ctrl-N        Next line
     PgDn, Ctrl-V        Next page
     PgUp, Ctrl-T        Previous page
     Home, Ctrl-A        Start of line
     End, Ctrl-E         End of line
     Ctrl-Q              Start of text
     Ctrl-Z              End of text
     Ctrl-D              Delete character under cursor
     Backspace           Delete previous character
     Del                 At the end of the text, delete the
                         previous character.  Otherwise delete
                         the character under the cursor.
     Esc                 Close the window, save the edited text,
                         and exit the program.

     Mouse-1             Move the insertion point cursor to the
                         click.  Hold down the button and drag
                         the mouse pointer to select text.
 */

#define WIN_WIDTH 500
#define WIN_HEIGHT 340
#define WIN_X 25
#define WIN_Y 30
#define FIXED_FONT "fixed"
#define DEFAULT_BG "white"
#define DEFAULT_FG "black"
#ifdef __APPLE__
#define DEFAULT_FT_FONT "Courier"
#else
#define DEFAULT_FT_FONT "DejaVu Sans Mono"
#endif
#define DEFAULT_FT_PTSIZE 12.0

Application new ctEdit;
String new geomString;
String new infileName;
String new xFontName;
String new ftFontName;
Float new ftFontSize;
String new bgColor;
String new fgColor;

Boolean new createFile;

Boolean new useFtFonts;
Boolean new useXFont;

/* Needed if we're editing shell scripts that need the new file
   to have the same permissions. */
Integer new filePerms;

void exit_help () {
  printf ("usage: ctedit [-h] | [-g <geom>] [-fg <color>] "
	  "[-bg <color>] [-fn <font> ] <filename>\n");
  printf ("-bg <color>    Set the window background to <color>.\n");
  printf ("-fg <color>    Display the text using <color>.\n");
  printf ("-fn <font>     Use the X <font> to display the text. See xfontsel(1).\n");
  printf ("-ft <font>     Use the FreeType <font> to display the text. See\n");
  printf ("               X11FreeTypeFont class.\n");
  printf ("-g  <geom>     Set the window geometry to <geom>. See XParseGeometry (3).\n");
  printf ("-h             Print this message and exit.\n");
  printf ("-pt <ptsize>   If using an outline font, sets the point size.\n");
  printf ("-xfonts        Use X bitmap fonts, even if outline fonts are available.\n");
  exit (1);
}

/* UNIX-compatible line ending. */
#define LF 10

X11TextEditorPane instanceMethod writeOutput (String infileName) {
  "Create a backup of the previous version of the file, if any,
   and check that the text ends with a UNIX-standard newline
   (ASCII 10) character."
  WriteFileStream new writeFile;
  Character new c;

  c = self text at (self text length - 1);
  if (c != LF) {
    self text += "\n";
  }
  
  if (!createFile) {
    writeFile renameFile infileName, infileName + ".bak";
    writeFile openOn infileName;
    writeFile writeStream (self text);
    writeFile closeStream;
    chmod (infileName, filePerms);
  } else {
    writeFile openOn infileName;
    writeFile writeStream (self text);
    writeFile closeStream;
  }

}

Application instanceMethod commandLineOptions (void) {
  Integer new i, nParams;
  String new param;


  nParams = self cmdLineArgs size;
  for (i = 1; i < nParams; i++) {

    param = self cmdLineArgs at i;

    if (param  == "-g") {
      ++i;
      geomString = self cmdLineArgs at i;
      continue;
    }
    if (param == "-fn") {
      ++i;
      xFontName = self cmdLineArgs at i;
      continue;
    }
    if (param == "-bg") {
      ++i;
      bgColor = self cmdLineArgs at i;
      continue;
    }
    if (param == "-fg") {
      ++i;
      fgColor = self cmdLineArgs at i;
      continue;
    }
    if (param == "-ft") {
      ++i;
      ftFontName = self cmdLineArgs at i;
      continue;
    }
    if (param == "-xfonts") {
      useXFont = True;
      continue;
    }
    if (param == "-pt") {
      ++i;
      ftFontSize = (self cmdLineArgs at i) asFloat;
      continue;
    }
    if (param == "-h" || param == "--help" || param == "--h" ||
	param at 0 == '-') {
      exit_help ();
    }
    
    infileName = param;

  }

}

Application instanceMethod winDimensions (void) {
  if (geomString length > 0) {
    self parseX11Geometry geomString;
    if (self winWidth == 0) {
      self winWidth = WIN_WIDTH;
    }
    if (self winHeight == 0) {
      self winHeight = WIN_HEIGHT;
    }
    if (self winXOrg == 0) {
      self winXOrg = WIN_X;
    }
    if (self winYOrg == 0) {
      self winYOrg = WIN_Y;
    }
  } else {
    self winWidth = WIN_WIDTH;
    self winHeight = WIN_HEIGHT;
    self winXOrg = WIN_X;
    self winYOrg = WIN_Y;
  }
}

X11TextEditorPane instanceMethod findFTFonts (void) {
  if (useFtFonts && !useXFont) {
    self ftFontVar initFontLib;
    self ftFontVar selectFont ftFontName, 0, 80, 0, ftFontSize;
    self ftFontVar namedX11Color fgColor;
  }
}

int main (int argc, char **argv) {
  X11Pane new xPane;
  X11PaneDispatcher new xTopLevelPane;
  X11TextEditorPane new xEditorPane;
  InputEvent new e;
  Exception new ex;
  X11Cursor new watchCursor;
  ReadFileStream new readFile;
  String new winTitle;

  geomString = "";
  xFontName = FIXED_FONT;
  bgColor = DEFAULT_BG;
  fgColor = DEFAULT_FG;
  infileName = "";
  useFtFonts = True;
  useXFont = False;
  ftFontSize = DEFAULT_FT_PTSIZE;
  ftFontName = DEFAULT_FT_FONT;

  ctEdit parseArgs argc, argv;
  ctEdit commandLineOptions;
  ctEdit winDimensions;

  if (xEditorPane ftFontVar version < 10) {
    useFtFonts = false;
  } else {
    xEditorPane findFTFonts;
  }
  

  if (infileName length == 0) {
    exit_help ();
  }

  if (!readFile exists infileName) {
    createFile = true;
    winTitle = infileName + "   (New file)";
  } else {
    readFile openOn infileName;
    readFile statStream;
    filePerms = readFile streamMode;
    xEditorPane text = readFile readAll;
    xEditorPane textLength = xEditorPane text length;
    if (ex pending) {
      ex handle;
      xEditorPane text = "";
    }
    readFile closeStream;
    winTitle = infileName;
    createFile = false;
  }

  xPane initialize ctEdit winXOrg, ctEdit winYOrg,
    ctEdit winWidth, ctEdit winHeight, ctEdit geomFlags, winTitle;

  xTopLevelPane attachTo xPane;
  xEditorPane attachTo xTopLevelPane;
  xPane map;
  xPane raiseWindow;
  watchCursor watch;

  xPane inputStream eventMask = EXPOSE|WINDELETE|KEYPRESS|KEYRELEASE \
    |MOTIONNOTIFY|BUTTONPRESS|BUTTONRELEASE|RESIZENOTIFY|SELECTIONCLEAR;
  xPane openEventStream;

  /* Setting to zero indicates that the program should set
     the maximum line width to the width of the window. */
  xEditorPane lineWidth = 0;

  xEditorPane background bgColor;
  xEditorPane foreground fgColor;

  if (!useFtFonts || useXFont)
    xEditorPane font xFontName;

  xEditorPane defaultFormat;
  xEditorPane displayText;

  xPane defaultCursor;

  while (TRUE) {
    xPane inputStream queueInput;
    if (xPane inputStream eventPending) {
      e become xPane inputStream inputQueue unshift;
      xPane subPaneNotify e;
      if (ex pending)
 	ex handle;
      switch (e eventClass value) 
	{
	  /*
	   *  Handle both types of events in case the window
	   *  manager doesn't distinguish between them.
	   */
	case MOVENOTIFY:
	  break;
#if 0 /***/
	case RESIZENOTIFY:
	  /***/
	  printf ("defaultFormat!\n");
	  /* xEditorPane defaultFormat; *//***/
	  break;
#endif	  
	case EXPOSE:
	  xEditorPane displayText;
	  break;
	case WINDELETE:
	  xEditorPane writeOutput infileName;
 	  xPane deleteAndClose;
	  exit (0);
	  break;
	default:
	  break;
	}
    } else {
      if (xEditorPane requestClose) {
	xEditorPane writeOutput infileName;
	xPane deleteAndClose;
	exit (0);
      }
    }
  }
}
