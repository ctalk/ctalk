/* $Id: checkbox.ca,v 1.10 2020/12/01 14:11:57 rkiesling Exp $ -*-c-*-*/

/*
 *  X11CheckBoxPane demo.
 */	

/* 
 *  To display bevels, uncomment the following line. 
 */
/* #define BEVEL */

/* 
 * To draw a checkbox with rounded corners, uncomment this
 * #define and set it to a non-zero value.  Note that the
 * libraries' radius drawing might not fill very narrow borders
 * fully.
 */
/* #define RADIUS 0 */

/* 
 * To change the width, height, and internal margin of the
 * check box, edit these #defines.  The measurements are in
 * pixels.
 */
#define CHECKBOX_WIDTH   15
#define CHECKBOX_HEIGHT  15
#define CHECKBOX_MARGIN  1
#define CHECKBOX_BORDER  1

#include <ctalk/ctalkdefs.h>

int main (int argv, char **argc) {
  X11Pane new xPane;
  X11PaneDispatcher new xTopLevelPane;
  X11CheckBoxPane new xCheckBoxPane;
  InputEvent new e;
  Exception new ex;

  xPane initialize 0, 0, 300, 300;
  xPane inputStream eventMask = BUTTONPRESS|WINDELETE|EXPOSE;
  xTopLevelPane attachTo xPane;

  /* Note that the geometry string in the, "attachTo," call below
     contains only the X,Y origin of the check box.  In this case, the
     size of the check box is taken from the object's resources, which
     we can adjust any time before, "attachTo," sizes the actual
     drawing surfaces. */
  xCheckBoxPane resources replaceAt "width", CHECKBOX_WIDTH;
  xCheckBoxPane resources replaceAt "height", CHECKBOX_HEIGHT;
  xCheckBoxPane resources replaceAt "margin", CHECKBOX_MARGIN;
  xCheckBoxPane resources replaceAt "borderWidth", CHECKBOX_BORDER;
#ifdef RADIUS
  xCheckBoxPane resources replaceAt "radius", RADIUS;
#endif  

  xCheckBoxPane attachTo xTopLevelPane, "+25%+25%";

#ifdef BEVEL
  xCheckBoxPane resources replaceAt "bevel", true;
#endif

  xPane map;
  xPane raiseWindow;

  xPane openEventStream;

  xCheckBoxPane draw;
  
  while (TRUE) {
    xPane inputStream queueInput;
    if (xPane inputStream eventPending) {
      e become xPane inputStream inputQueue unshift;
      xPane subPaneNotify e;  /* Call the classes' event handlers. */
      if (ex pending)
	ex handle;
      
      switch (e eventClass value)
     	{
	case BUTTONPRESS:
	if (e eventData == xCheckBoxPane xWindowID) {
	  if (xCheckBoxPane clicked) {
	    printf ("clicked\n");
	  } else {
	    printf ("unclicked\n");
          }
	  }
	  break;
	case WINDELETE:
      	  xPane deleteAndClose;
     	  exit (0);
     	  break;
     	default:
     	  break;
     	}
    }
  }
}
