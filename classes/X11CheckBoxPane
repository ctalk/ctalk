/* $Id: X11CheckBoxPane,v 1.5 2020/11/28 21:15:10 rkiesling Exp $ -*-c-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2020  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *    X11CheckBoxPane class.
 */
/*
      Resources

      clickColor                "darkslategray"
      backgroundColor           "white"
 */

X11CanvasPane class X11CheckBoxPane;

X11CanvasPane instanceVariable clicked Boolean false;

X11CheckBoxPane instanceMethod new (String __paneName) {
  Method new buttonPressMethod;

  X11CheckBoxPane super new __paneName;

  buttonPressMethod definedInstanceMethod "X11CheckBoxPane", "onClick";
  __paneName setMethodHandler "pointerinput", buttonPressMethod;

  __paneName resources atPut "marginX", 3;
  __paneName resources atPut "marginY", 3;
  __paneName resources atPut "sizeX", 15;
  __paneName resources atPut "sizeY", 15;

  __paneName resources atPut "clickColor", "darkslategray";
  __paneName resources atPut "backgroundColor", "white";

  return __paneName;
}

X11CheckBoxPane instanceMethod onClick (Object subPane, InputEvent event) {
  subPane clicked = !subPane clicked;
  subPane draw;
}

X11CheckBoxPane instanceMethod draw (void) {

  self paneBuffer background self resources at "backgroundColor";

  self pen colorName = self resources at "backgroundColor";
  self drawFilledRectangle (self resources integerAt "marginX"),
    (self resources integerAt "marginY"),
    (self resources integerAt "sizeX"),
    (self resources integerAt "sizeY");

  self pen colorName = self resources at "clickColor";
  self pen width = 1;
  self drawRectangle (self resources integerAt "marginX") - 1,
    (self resources integerAt "marginY") - 1,
    (self resources integerAt "sizeX") + 1,
    (self resources integerAt "sizeY") + 1;

  if (self clicked) {
    self drawFilledRectangle
      (self resources integerAt "marginX") + 1,
      (self resources integerAt "marginY") + 1,
      (self resources integerAt "sizeX") - 3,
      (self resources integerAt "sizeY") - 3;
  }

#if 0
   /* Might not need inner border if not clicked. */
  if (!self clicked) {
    self drawFilledRectangle
      (self resources integerAt "marginX") + 1,
      (self resources integerAt "marginY") + 1,
      (self resources integerAt "sizeX") - 3,
      (self resources integerAt "sizeY") - 3;
  }
 else {
    self drawFilledRectangle
      (self resources integerAt "marginX") + 1,
      (self resources integerAt "marginY") + 1,
      (self resources integerAt "sizeX") - 3,
      (self resources integerAt "sizeY") - 3;
  }
#endif    

  self refresh;
}

