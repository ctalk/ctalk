/* $Id: s,v 1.4 2019/11/17 18:35:41 rkiesling Exp $ -*-c-*-**/

/*
  This file is part of Ctalk.
  Copyright © 2005-2012, 2015 Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*
 *  Template for C library functions scanf, sprintf, sqrt, sscanf, strcat, 
 *  strchr, strcmp, strcpy, strlen, strncat, strncmp, and strncpy.
 */

#include <ctalkdefs.h>

/* This #define is for backward compatibility with older definitions of
   the EXPR_PARSER typedef. */

#define e_method e_methods[parser->e_method_ptr-1]

#define scanf \n\
cScanf (char *__fmt,...) {\n\
  EXPR_PARSER *parser;  \n\
  OBJECT *result_object; \n\
  parser = __ctalkGetExprParserAt (__ctalkGetExprParserPtr ()); \n\
  result_object = \n\
    __ctalkLibcFnWithMethodVarArgs ((int (*)())scanf, parser -> e_methods[parser->e_method_ptr-1], "Integer"); \n\
  return result_object; \n\
}\n\

#define sprintf \n\
cSprintf (char *__s, char *__fmt,...) {\n\
  EXPR_PARSER *parser;  \n\
  OBJECT *result_object; \n\
  parser = __ctalkGetExprParserAt (__ctalkGetExprParserPtr ()); \n\
  result_object = \n\
    __ctalkLibcFnWithMethodVarArgs ((int (*)())sprintf, parser -> e_methods[parser->e_method_ptr-1], "Integer"); \n\
  __ctalkRegisterUserObject(result_object); \n\
  return result_object; \n\
}\n\

#define sscanf \n\
cSscanf (char *__s, char *__fmt,...) {\n\
  EXPR_PARSER *parser;  \n\
  OBJECT *result_object; \n\
  parser = __ctalkGetExprParserAt (__ctalkGetExprParserPtr ()); \n\
  result_object = \n\
    __ctalkLibcFnWithMethodVarArgs ((int (*)())sscanf, parser -> e_methods[parser->e_method_ptr-1], "Integer"); \n\
  __ctalkRegisterUserObject(result_object); \n\
  return result_object; \n\
}\n\

#define strcat \n\
cStrcat (char *__s1, char *__s2) { \n\
  int len; \n\
  len = strlen (__ctalk_to_c_char_ptr(ARG(1))) + \n\
	     strlen (__ctalk_to_c_char_ptr(ARG(0))); \n\
  if (IS_OBJECT(ARG(1) -> instancevars)) \n\
    __xrealloc ((void **)&(ARG(1) -> instancevars -> __o_value), len);\n\
  __xrealloc ((void **)&(ARG(1) -> __o_value), len); \n\
  if (__ctalkIsObject (ARG(0))) \n\
    strcat (__ctalk_to_c_char_ptr(ARG(1)),__ctalk_to_c_char_ptr (ARG(0))); \n\
  return ARG(1);\n\
}

#define strchr \n\
cStrchr (char *__s1, char __c) { \n\
  char *p; OBJECT *result_object; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    p = strchr (__ctalk_to_c_char_ptr(ARG(1)),__ctalk_to_c_char (ARG(0))); \n\
  else \n\
    p = strchr ((char *)ARG(1), ((char *)ARG(0))[0]); \n\
  result_object = __ctalkCreateObjectInit ("result", "String", \n\
		       "Character", LOCAL_VAR, p); \n\
  __ctalkRegisterUserObject(result_object); \n\
  return result_object; \n\
}

#define strcasecmp \n\
cStrcasecmp (char *__s1, char *__s2) { \n\
  int r; \n\
  char s[255]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    r = strcasecmp (__ctalk_to_c_char_ptr(ARG(1)),__ctalk_to_c_char_ptr (ARG(0))); \n\
  else \n\
    r = -2; \n\
  __ctalkDecimalIntegerToASCII (r, s); \n\
  return __ctalkCreateObjectInit ("result", "Integer", \n\
		       "Magnitude", LOCAL_VAR, s); \n\
}

#define strcmp \n\
cStrcmp (char *__s1, char *__s2) { \n\
  int r; OBJECT *result_object; \n\
  char s[255]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    r = strcmp (__ctalk_to_c_char_ptr(ARG(1)),__ctalk_to_c_char_ptr (ARG(0))); \n\
  else \n\
    r = strcmp ((char *)ARG(1), (char *)ARG(0)); \n\
  __ctalkDecimalIntegerToASCII (r, s); \n\
  result_object = __ctalkCreateObjectInit ("result", "Integer", \n\
		       "Magnitude", LOCAL_VAR, s); \n\
  __ctalkRegisterUserObject(result_object); \n\
  return result_object; \n\
}

#define strcpy \n\
cStrcpy (char *__s1, char *__s2) { \n\
  int len; \n\
  len = strlen (__ctalk_to_c_char_ptr(ARG(0))); \n\
  if (IS_OBJECT(ARG(1) -> instancevars)) \n\
    __xrealloc ((void **)&(ARG(1) -> instancevars -> __o_value), len);\n\
  __xrealloc ((void **)&(ARG(1) -> __o_value), len); \n\
  if (__ctalkIsObject (ARG(0))) \n\
    strcpy (__ctalk_to_c_char_ptr(ARG(1)),__ctalk_to_c_char_ptr (ARG(0))); \n\
  return ARG(1);\n\
}

#if 0 /***/
#define strncat \n				\
cStrncat (char *__s1, char *__s2, int __n) { \n\
  if (__ctalkIsObject (ARG(0))) \n\
    strncat (__ctalk_to_c_char_ptr(ARG(2)),__ctalk_to_c_char_ptr (ARG(1)), __ctalk_to_c_int(ARG(0))); \n\
  return ARG(2);\n\
}
#endif

#define strncat \n\
cStrncat (char *__s1, char *__s2, int lenp) { \n\
  int len; \n\
  len = INTVAL(ARG(0) -> __o_value) + \n\
	     strlen (ARG(2) -> __o_value); \n\
  if (IS_OBJECT(ARG(1) -> instancevars)) \n\
    __xrealloc ((void **)&(ARG(2) -> instancevars -> __o_value), len);\n\
  __xrealloc ((void **)&(ARG(2) -> __o_value), len); \n\
  if (__ctalkIsObject (ARG(1))) \n\
    strncat (__ctalk_to_c_char_ptr(ARG(2)),__ctalk_to_c_char_ptr (ARG(1)),\n\
	     len); \n\
  return ARG(2);\n\
}

#define strncasecmp \n					\
cStrncasecmp (char *__s1, char *__s2, int __n) { \n\
  int r; \n\
  char s[255]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    r = strncasecmp (__ctalk_to_c_char_ptr(ARG(2)),__ctalk_to_c_char_ptr (ARG(1)), __ctalk_to_c_int(ARG(0))); \n\
  else \n\
  r = -2; \n\
  __ctalkDecimalIntegerToASCII (r, s); \n\
  return __ctalkCreateObjectInit ("result", "Integer", \n\
		       "Magnitude", LOCAL_VAR, s); \n\
}

#define strncmp \n\
cStrncmp (char *__s1, char *__s2, int __n) { \n\
  int r; OBJECT *result_object;\n\
  char s[255]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    r = strncmp (__ctalk_to_c_char_ptr(ARG(2)),__ctalk_to_c_char_ptr (ARG(1)), __ctalk_to_c_int(ARG(0))); \n\
  else \n\
  r = -2; \n\
  __ctalkDecimalIntegerToASCII (r, s); \n\
  result_object = __ctalkCreateObjectInit ("result", "Integer", \n\
		       "Magnitude", LOCAL_VAR, s); \n\
  __ctalkRegisterUserObject(result_object); \n\
  return result_object; \n\
}

#if 0 /***/
#define strncpy \n				\
cStrncpy (char *__s1, char *__s2, int __n) { \n\
  if (__ctalkIsObject (ARG(0))) \n\
    strncpy (__ctalk_to_c_char_ptr(ARG(2)),__ctalk_to_c_char_ptr (ARG(1)), __ctalk_to_c_int(ARG(0))); \n\
  return ARG(2);\n\
}
#endif

#define strncpy \n\
cStrncpy (char *__s1, char *__s2, int lenp) { \n\
  int len; \n\
  len = INTVAL(ARG(0) -> __o_value); \n\
  if (IS_OBJECT(ARG(1) -> instancevars)) \n\
    __xrealloc ((void **)&(ARG(2) -> instancevars -> __o_value), len);\n\
  __xrealloc ((void **)&(ARG(2) -> __o_value), len); \n\
  if (__ctalkIsObject (ARG(1))) \n\
    strncpy (__ctalk_to_c_char_ptr(ARG(2)),__ctalk_to_c_char_ptr (ARG(1)),\n\
	     len); \n\
  return ARG(2);\n\
}

#define strlen \n\
cStrlen (void *__s) {\n\
  char buf[255]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    sprintf (buf, "%d", strlen (__ctalk_to_c_char_ptr (ARG(0)))); \n\
  else \n\
    sprintf (buf, "%d", strlen ((char *)ARG(0))); \n\
  return __ctalkCreateObjectInit ("result", "Integer", \n\
		       "Magnitude", LOCAL_VAR, buf); \n\
} \n\


#define sin \n\
cSin (double __d) { \n\
  char buf[255]; \n\
  sprintf (buf, "%f", sin (__ctalk_to_c_double (ARG(0)))); \n\
  return __ctalkCreateObjectInit ("result", "Float", \n\
		       "Magnitude", LOCAL_VAR, buf); \n\
}

#define sqrt \n\
cSqrt (double __d) { \n\
  char buf[0xff]; \n\
  sprintf (buf, "%f", sqrt (__ctalk_to_c_double (ARG(0)))); \n\
  return __ctalkCreateObjectInit ("result", "Float", \n\
		       "Magnitude", LOCAL_VAR, buf); \n\
}

#define strerror \n\
cStrerror (int _e) { \n\
  char buf[0xff]; \n\
  strcpy (buf, strerror(_e)); \n\
  return __ctalkCreateObjectInit ("result", "Float", \n\
                                  "Magnitude", LOCAL_VAR, buf); \n\
}
