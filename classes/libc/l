/* $Id: l,v 1.1.1.1 2020/05/16 02:37:00 rkiesling Exp $ -*-c-*-**/

/*
  This file is part of ctalk.
  Copyright Â© 2014 - 2015, 2019 Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*
 *  Templates for the C library functions lrint, lrintf,
 *  lrintl, llrint, llrintf, llrintl.
 */

#include <ctalkdefs.h>

#define lrint \n\
cLrint (double d) { \n\
  char buf[MAXLABEL]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    __ctalkLongToDecimalASCII (lrint (__ctalk_to_c_double (ARG(0))), buf); \n\
  else \n\
     __ctalkLongToDecimalASCII (0.0, buf); \n\
  return __ctalkCreateObjectInit ("result", "Integer", \n\
				     "Magnitude", LOCAL_VAR, buf); \n\
}

#define lrintf \n\
cLrintf (float f) { \n\
  char buf[MAXLABEL]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    __ctalkLongToDecimalASCII (lrintf ((float)__ctalk_to_c_double (ARG(0))), buf); \n\
  else \n\
    __ctalkLongToDecimalASCII (0.0, buf); \n\
  return __ctalkCreateObjectInit ("result", "Integer", \n\
				     "Magnitude", LOCAL_VAR, buf); \n\
}

#define lrintl \n\
cLrintl (long double l) { \n\
  char buf[MAXLABEL]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    __ctalkLongToDecimalASCII (lrintl ((long double)__ctalk_to_c_double (ARG(0))), buf); \n\
  else \n\
    __ctalkLongToDecimalASCII (0.0, buf); \n\
  return __ctalkCreateObjectInit ("result", "Integer", \n\
				     "Magnitude", LOCAL_VAR, buf); \n\
}


#define llrint \n\
cLlrint (double d) { \n\
  char buf[MAXLABEL]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    __ctalkLongLongToDecimalASCII (llrint (__ctalk_to_c_double (ARG(0))), buf); \n\
  else \n\
     __ctalkLongLongToDecimalASCII (llrint (0.0), buf); \n\
   return __ctalkCreateObjectInit ("result", "LongInteger", \n\
				     "Magnitude", LOCAL_VAR, buf); \n\
}

#define llrintf \n\
cLlrintf (float f) { \n\
  char buf[MAXLABEL]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    __ctalkLongLongToDecimalASCII (llrintf ((float)__ctalk_to_c_double (ARG(0))), buf); \n\
  else \n\
	 __ctalkLongLongToDecimalASCII (llrintf (0.0), buf); \n\
  return __ctalkCreateObjectInit ("result", "LongInteger", \n\
				     "Magnitude", LOCAL_VAR, buf); \n\
}

#define llrintl \n\
cLlrintl (long double l) { \n\
  char buf[MAXLABEL]; \n\
  if (__ctalkIsObject (ARG(0))) \n\
    __ctalkLongLongToDecimalASCII (llrintl ((long double)__ctalk_to_c_double (ARG(0))), buf); \n\
  else \n\
	 __ctalkLongLongToDecimalASCII (llrintl (0.0), buf); \n\
  return __ctalkCreateObjectInit ("result", "LongInteger", \n\
				     "Magnitude", LOCAL_VAR, buf); \n\
}
