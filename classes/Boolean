/* $Id: Boolean,v 1.1.1.1 2019/10/26 23:40:51 rkiesling Exp $ -*-c-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2005 - 2014, 2018, 2019  
    Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *  Boolean is a subclass of Object so it's safe to "require" nearly
 *  anywhere, without worrying whether the parent class is already
 *  parsed.
 */

Object class Boolean
"Boolean objects represent true-false conditions.
They're normally used as the result of operations
that return a true or false answer.";

Boolean classVariable boolTrue Boolean 1;
Boolean classVariable boolFalse Boolean 0;

Boolean instanceMethod || logicalOr (Boolean b) {
  "Return a Boolean value of True if either the receiver
  or the argument are non-zero, False otherwise."

    return self || b;

} 

Boolean instanceMethod && logicalAnd (Boolean b) {
  "Return a Boolean value of True if both the receiver and
  the argument are non-zero, False otherwise."

    return self && b;

}

Boolean instanceMethod == equality (Boolean b) {
  "Return a Boolean value of True if both the receiver and
  the argument have the same value, False otherwise."

  return self == b;

}

Boolean instanceMethod != inequality (Boolean b) {
  "Return a Boolean value of True if both the receiver and
  the argument have differnt values, False otherwise."

    return self != b;
    
}

Boolean instanceMethod = set_value (int __i) { 
  "Set the value of the receiver to the argument.  The
  method uses the __ctalkToCInteger () library function
  for speed when performing the numeric conversion from
  the argument to an int, and then casts the result to
  either TRUE or FALSE."
  if (__ctalkToCInteger(ARG(0), 1)) {
    if (__ctalk_self_internal () -> instancevars) {
      BOOLVAL(__ctalk_self_internal () -> instancevars -> __o_value) =
	BOOLVAL(__ctalk_self_internal () -> __o_value) = 1;
    } else {
      BOOLVAL(__ctalk_self_internal () -> __o_value) = 1;
    }
  } else {
    if (__ctalk_self_internal () -> instancevars) {
      BOOLVAL(__ctalk_self_internal () -> instancevars -> __o_value) =
      BOOLVAL(__ctalk_self_internal () -> __o_value) = 0;
    } else {
      BOOLVAL(__ctalk_self_internal () -> __o_value) = 0;
    }
  }    
  return self;
}

Boolean instanceMethod ! invert_prefix (__prefix__) { 
  returnObjectClass Boolean;
  if (is_zero_q (self value))
    return TRUE;
  else
    return FALSE;
}


