/* $Id: Object,v 1.5 2019/11/29 19:20:08 rkiesling Exp $ -*-C-*-*/


/*
  This file is part of Ctalk.
  Copyright © 2005-2019  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *   Object methods.  The Object class is defined by default.  All 
 *   other classes are subclasses of Object.  
 *
 *   It's still possible to confuse just-in-time method lookup 
 *   buffering.
 *
 *   So if you add methods to this class, try not to use classes
 *   that aren't loaded by default - 
 *     Symbol
 *     Integer
 *     String 
 *     ArgumentList
 *
 *   Integer and String's required classes, Character and Magnitude,
 *   should be safe also.
 *
 *   If it's necessary to write a method that uses other classes, 
 *   it's safer to create a subclass and add the method there.
 */

#include <ctalk/ctalkdefs.h>

Object instanceMethod callStackTrace (void) {
  "Print a stack trace."
  __warning_trace ();
  return NULL;
}

Object instanceMethod value (void) {
  "Return the receiver's value instance variable.  
  This is the default method."
  OBJECT *val_obj;
  if (!strcmp (__ctalk_self_internal () -> __o_name, "value"))
    return self;
  val_obj = __ctalkGetInstanceVariable (self, "value", 1);
  return val_obj;
}

Object instanceMethod className (void) {
  "Return a String with the class name of the receiver."
  returnObjectClass String;
  return self ->__o_classname; 
}

Object instanceMethod classObject (void) {
  "Return the class object named by the receiver.  This
method returns the actual class object when the
receiver is actually a String which has a class name as
its value.  If the receiver is a class object, then
return the receiver."
  returnObjectClass Any;
  if (self isClassObject) {
    return self;
  } else if (self is String) {
    return __ctalkGetClass (self -> __o_value);
  } else {
    return __ctalkGetClass (self -> __o_classname);
  }
}

Object instanceMethod name (void) {
  "Return a String containing the receiver's name."
  returnObjectClass String;
  return self ->__o_name; 
}

Object instanceMethod superclassName (void) {
  "Return a String containing the receiver's superclass name."
  returnObjectClass String;
  if (self is Object) {
    return NULLSTR;
  } else {
    return self -> __o_superclassname;
  }
}

Object instanceMethod is (Object classArg) {
  "Return True if the receiver is an instance of the 
  class given as the argument.  Note: Don't use an
  expression like, 'self is Class', because there's no
  class named 'Class'; use Object : isClassObject instead."
  returnObjectClass Boolean;
  OBJECT *self_value, *arg_value;

  self_value = self value;
  arg_value =  classArg value; /* Don't use "value" with a class
                                object. */

  if (self_value -> __o_class == arg_value -> __o_class)
    return TRUE;
  else
    return FALSE;
  
}

Object instanceMethod isSubClassOf (Object classArg) {
  "Returns True if the receiver is a member of the class
  given as the argument, a String, or one of its
  subclasses.  Returns False otherwise."
    OBJECT *self_value, *class_arg;
  returnObjectClass Boolean;

  self_value = self value;
  class_arg = classArg;

  if (self isClassObject) {
    if (self_value -> __o_class == class_arg -> __o_class) {
      return TRUE;
    } else {
      if (self superclassName) {
	return ((self superclassName classObject) isSubClassOf classArg);
      } else {
	return FALSE;
      }
    }
  } else {
    if (self_value -> __o_class == class_arg -> __o_class) {
      return TRUE;
    } else {
      if (self superclassName) {
	return ((self superclassName value classObject) 
		isSubClassOf classArg);
      } else {
	return FALSE;
      }
    }
  }
}

Object instanceMethod isClassObject (void) {
  "Return true if the receiver is a class object,
   false otherwise."
  OBJECT *self_obj;
  returnObjectClass Boolean;

  self_obj = self;

  if (self_obj == self_obj -> __o_class) 
    return TRUE;
  else
    return FALSE;
}

Object instanceMethod isInstanceVariable (char *instanceVariableName) {
  "Return True if the receiver has an instance variable
  with the name given as the argument, False otherwise."
  returnObjectClass Boolean;
  if (__ctalkGetInstanceVariable (self, instanceVariableName, FALSE))
    return TRUE;
  else
    return FALSE;
}

Object instanceMethod isInstanceMethod (char *instanceMethodName) {
  "Return True if the receiver's class has an instance
  method with the name given as the argument, False
  otherwise."
  returnObjectClass Boolean;
  if (__ctalkIsInstanceMethod (self, instanceMethodName))
    return TRUE;
  else
    return FALSE;
}

Object instanceMethod isClassMethod (char *classMethodName) {
  "Return True if the receiver's class has a class method
  with the name given as the argument, False otherwise."
  returnObjectClass Boolean;
  if (__ctalkIsClassMethod (self, classMethodName))
    return TRUE;
  else
    return FALSE;
}

Object instanceMethod addInstanceVariable (char *name, OBJECT *value) {
  "Add the instance variable with <name> and object
  <value> to the receiver."
  __ctalkAddInstanceVariable (self, name, value);
  return self;
}

Object instanceMethod delete (void) {
  "Delete the receiver."
  OBJECT *self_alias = __ctalk_self_internal ();
  __objRefCntZero (&self_alias);
  __ctalkDeleteObject (self_alias);
  return NULL;
}


Object instanceMethod copy (Object __targetObject) {
  "Copy the receiver's instance variables, class,
  superclass, and value to the object given as the
  argument.  Does not set the target object's reference
  count."
  OBJECT *__old_self_alias, *__new_self_alias, *__arg_alias;
  __old_self_alias = __ctalk_receiver_pop ();
  if ((__arg_alias = __targetObject) == NULL) {
    _warning ("Object : copy : NULL target object.\n");
    return NULL;
  }

  __ctalkCopyObject (OBJREF(__arg_alias), OBJREF(__new_self_alias));
  __objRefCntSet(OBJREF(__new_self_alias), __arg_alias -> nrefs);
  __ctalk_receiver_push (__new_self_alias);
  __ctalkAliasObject (__old_self_alias, __new_self_alias);
  __objRefCntZero (OBJREF(__old_self_alias));
  __ctalkDeleteObject (__old_self_alias);

  // Removes METHOD_USER_OBJECT scope from the new object so 
  // the method registers it as a separate resource.
  __ctalkSetObjectScope (__new_self_alias, 
			 __new_self_alias -> scope & ~1024);
  return __new_self_alias;
}

Object instanceMethod setReferenceCount (int __nrefs) {
  "Set the receiver's reference count to the Integer given
  as the argument."
  OBJECT *__self_alias;
  __self_alias = self;
  __objRefCntSet(OBJREF(__self_alias), __nrefs);
  return self;
}

Object instanceMethod incReferenceCount (void) {
  "Increase the receiver's reference count by one."
  OBJECT *__self_alias;
  __self_alias = self;
  __objRefCntInc(OBJREF(__self_alias));
  return self;
}

Object instanceMethod decReferenceCount (void) {
  "Increase the receiver's reference count by one."
  OBJECT *__self_alias;
  __self_alias = self;
  __objRefCntDec(OBJREF(__self_alias));
  return self;
}

Object instanceMethod getReferenceCount (void) {
  "Return an Integer with the receiver's reference count."
  OBJECT *__self_alias;
  returnObjectClass Integer;
  __self_alias = self;
  return __self_alias -> nrefs;
}

Object instanceMethod isNull (void) {
  "Return True if the receiver is a (null) object - that
  is, it was created as a placeholder for a NULL value,
  and has the name, (null)."
  if (__ctalk_self_internal()-> attrs & 
      OBJECT_IS_NULL_RESULT_OBJECT) {
    return TRUE;
  } else {
    return FALSE;
  }
}

Object instanceMethod isNullValue (void) {
  "Return True if the receiver's value is null, translates
  to a NULL pointer, or is 0. Only check the value of
  the receiver itself if it doesn't have any instance
  variables.  This method is here for compatibility
  with old code - you shouldn't need it any longer."

  int self_attrs;

  self_attrs = self -> attrs;

  if ((self_attrs & OBJECT_VALUE_IS_BIN_INT) ||
      (self_attrs & OBJECT_VALUE_IS_BIN_BOOL)) {
    if ((INTVAL(__ctalk_self_internal_value () -> __o_value) == 0) ||
	(BOOLVAL(__ctalk_self_internal_value () -> __o_value) == 0)) {
      return TRUE;
    }
  } else {
    if (is_zero_q (self value) || str_is_zero_q (self value)) {
      return TRUE;
    }
  }
	
  return FALSE;
}

Object instanceMethod become (OBJECT *__newObject) {
  "Translate the object given as the argument into the
  receiver.  Sets the new object's reference count.
  This method can cause a program to leak memory, so
  use it with caution."
  Exception new e;
  if (__newObject isNull) {
    if (!self traceEnabled) { 
      self enableExceptionTrace;
      e raiseException INVALID_OPERAND_X, "NULL argument";
      e handle;
      self disableExceptionTrace;
    } else {
      e raiseException INVALID_OPERAND_X, "NULL argument";
      e handle;
    }
    return NULL;
  }

  if (__ctalkInstanceVarIsCallersReceiver ()) {
    __ctalkCallingInstanceVarBecome (self, __newObject);
  } else {
    if (__ctalkIsCallersReceiver ()) {
      __ctalkReceiverReceiverBecome 
	(__ctalkCallingReceiverBecome (self, __newObject));
    } else {

      if (__ctalkGetCallingFnObject (__ctalk_self_internal ()->__o_name,
				     __ctalk_self_internal ()->CLASSNAME)){
	__ctalkCallingFnObjectBecome (self, __newObject);
      } else {
	if (__ctalkGetCallingMethodObject (__ctalk_self_internal()->__o_name,
					   __ctalk_self_internal()->CLASSNAME)){
	  __ctalkCallingMethodObjectBecome (self, __newObject);
	} else {
	  if (__ctalk_dictionary) {
	    __ctalkGlobalObjectBecome (self, __newObject);
	  }
	}
      }
    }
  }
  return NULL;
}

Object instanceMethod enableExceptionTrace (void) {
  "Enable the printing of stack traces when the program
handles an exception."
  __ctalkSetExceptionTrace(TRUE);
  return NULL;
}

Object instanceMethod disableExceptionTrace (void) {
  "Turn off the printing of stack traces when the program
handles an exception."
  __ctalkSetExceptionTrace(FALSE);
  return NULL;
}

Object instanceMethod traceEnabled (void) {
  "Returns True if the program has stack traces enabled."
  return __ctalkGetExceptionTrace ();
}

Object instanceMethod printSelfBasic (void) {
  "Print the class, superclass and value of an object and
  its instance variables on the terminal."
  __ctalkPrintObject (self);
  return NULL;
}

Object instanceMethod methodObjectMessage (Method methodObject) {
  "Call the method named by the argument, a Method class
object."
  Exception new e;
  String new errStr;
  if (!methodObject is Method) {
    errStr printOn "Method argument, \"%s,\" is a(n) %s", 
      methodObject name, methodObject className;
    e raiseException INVALID_OPERAND_X, errStr;
    return NULL;
  }
  __ctalkMethodObjectMessage (self, methodObject);
  return NULL;
}

Object instanceMethod methodObjectMessage (Method methodObject,
					   Object arg1, Object arg2) {
  "Call the method named by the argument, a Method class
object."
  Exception new e;
  String new errStr;
  if (!methodObject is Method) {
    errStr printOn "Method argument, \"%s,\" is a(n) %s", 
      methodObject name, methodObject className;
    e raiseException INVALID_OPERAND_X, errStr;
    return NULL;
  }
  __ctalkMethodObjectMessage2Args (self, methodObject, arg1, arg2);
  return NULL;
}

Object instanceMethod backgroundMethodObjectMessage (Method methodObject) {
  "Call the method named by the argument, a Method class
object, as a child process of the calling program.  Returns
the PID of the child process if successful, or -1 on error."
    returnObjectClass Integer;
  Exception new e;
  String new errStr;
  int childpid;
  if (!methodObject is Method) {
    errStr printOn "Method argument, \"%s,\" is a(n) %s", 
      methodObject name, methodObject className;
    e raiseException INVALID_OPERAND_X, errStr;
    return NULL;
  }
  childpid = __ctalkBackgroundMethodObjectMessage (self, methodObject);
  return childpid;
}

Object instanceMethod -> objectMemberDeref (char *mbr) {
  "With the name of an OBJECT * member as the argument (a
  String), return the member as an object.  Note that
  expressions like self -> mbr and self -> (null) cause
  recursive calls."
  String new s;
  OBJECT *r, *rcvr, *result, *symbol_result;
  char buf[MAXMSG];
  int objval;

  returnObjectClass Any;

  xsprintf (buf, "rcvr -> %s", mbr);

  /* Check if we have a symbol result from a previous 
     deref call. 

     We have to avoid using "->" as a method here so we don't
     call ourselves recursively, even several call levels
     further.

     Note that we can also handle cases where an
     expression starts with a Symbol * - in that case,
     check again for another level of dereferencing. */
  rcvr = __ctalk_self_internal ();
  if (!strcmp (rcvr ->  CLASSNAME, "Symbol") &&
      rcvr -> attrs & OBJECT_IS_DEREF_RESULT) {
    if ((r = obj_ref_str (rcvr -> __o_value)) != NULL) {
      if  (!strcmp (r -> CLASSNAME, "Symbol")) {
	if  ((r = obj_ref_str (r -> __o_value)) != NULL) {
	  rcvr = r;
	}
      } else {
	rcvr = r;
      }
    }
  }


  // 1 << 28 is the internal CVAR type attribute for OBJECTs.
  // See cvar.h.
  __ctalk_register_c_method_arg ("(null)", "OBJECT", "(null)",
 				 "(null)", "(null)", "rcvr", 
 				 (1 << 28), 1, 0, 2, 0, (void *)rcvr);
  result = __ctalkEvalExpr (buf);
  delete_method_arg_cvars ();

  if (result) {
    objval = atoi (IS_OBJECT(result -> instancevars) ?
		   (result -> instancevars -> __o_value) :
		   (result -> __o_value));
    __ctalkHexIntegerToASCII (objval, buf);
    if (obj_ref_str(buf)) {
      symbol_result = __ctalkCreateObjectInit (buf, 
					"Symbol", "Object",
					LOCAL_VAR, buf);
      __ctalkSetObjectAttr (symbol_result, OBJECT_IS_DEREF_RESULT);
      __ctalkDeleteObject (result);
      return symbol_result;
    } else if ((rcvr -> attrs & OBJECT_VALUE_IS_BIN_INT) &&
	       !strcmp (ARG(0) -> __o_name, "__o_value")) {
      xsprintf (buf, "rcvr -> %s", mbr);
      symbol_result = __ctalkCreateObjectInit 
	(buf, rcvr -> __o_class -> __o_name, 
	 (rcvr -> __o_superclass ? rcvr -> __o_superclass -> __o_name : ""),
	 LOCAL_VAR, rcvr -> __o_value);
      __ctalkSetObjectAttr (symbol_result,
			    symbol_result -> attrs | OBJECT_IS_DEREF_RESULT);
      /* this probably isn't going to work if the class of symbol_result 
	 is ever anything other than Integer - remove? */
      *(int *)symbol_result -> __o_value = *(int *)rcvr -> __o_value;
      *(int *)symbol_result -> instancevars -> __o_value =
	*(int *)rcvr -> __o_value;
      __ctalkDeleteObject (result);
      return symbol_result;
    } else if (objval == 0 && 
	       !strcmp (result->__o_class->__o_name, "Object")) {
      /* Allows NULL results if the member is an OBJECT *. */
      symbol_result = __ctalkCreateObjectInit 
	(buf, rcvr -> __o_class -> __o_name, 
	 (rcvr -> __o_superclass ? rcvr -> __o_superclass -> __o_name : ""),
	 LOCAL_VAR, "0x0");
      __ctalkSetObjectAttr (symbol_result, OBJECT_IS_DEREF_RESULT);
      __ctalkDeleteObject (result);
      return symbol_result;
    } else {
      return result;
    }
  } else {
    return NULL;
  }
}

Object instanceMethod mapInstanceVariables (OBJECT *(*methodfn)()) {
  "Send the message <methodfn>, which has the prototype
  OBJECT *(*methodfn)(), to each of the instance
  variables in the receiver of this method.  Each of
  the instance variables becomes the receiver of
  <methodfn> in turn. This method is mainly used in
  ObjectInspector class to print the contents of
  objects."

    OBJECT *(*fn)(), *rcvr_obj, *rcvr_obj_p, *t, *have_break;
  METHOD *self_method, *arg_method;

  fn = (OBJECT *(*)())__ctalkRtGetMethodFn ();
  rcvr_obj = rcvr_obj_p = __ctalk_self_internal ();

  if (((self_method = __ctalkRtGetMethod ()) == NULL) &&
      ((self_method = __ctalkFindClassMethodByFn (&rcvr_obj, fn, 0))
       == NULL)) {
    __ctalkCriticalExceptionInternal (NULL, undefined_method_x, 
				      "from map (Class List)");
    return NULL;
  }

  if (((arg_method = __ctalkFindInstanceMethodByName 
	(&rcvr_obj_p, 
	 ARG_NAME(self_method->args[0]), 0, -1))
      == NULL) &&
      ((arg_method = __ctalkFindClassMethodByName 
	(&rcvr_obj_p, 
	 ARG_NAME(self_method->args[0]), 0, -1))
       == NULL)) {
    OBJECT *class_object_p;
    arg_method = NULL;
    for (class_object_p = __ctalk_classes;
	 class_object_p;
	 class_object_p = class_object_p -> next) {
      if (((arg_method = __ctalkFindInstanceMethodByName 
	    (&class_object_p, ARG_NAME(self_method->args[0]), 0, -1))
	   != NULL) ||
	  ((arg_method = __ctalkFindClassMethodByName 
	    (&class_object_p, ARG_NAME(self_method->args[0]), 0, -1))
	   != NULL))
	break;
    }
    if (arg_method) {
#if 0
      /* These cause annoying messages in the inspector. */
      _warning ("Warning: From mapInstanceVariables (class Object):\n");
      _warning ("Warning: The argument block thinks the receiver's class is \"%s,\"\n",
		class_object_p -> __o_name);
      _warning ("Warning: when it is actually, \"%s.\"\n",
		rcvr_obj -> CLASSNAME);
#endif
    } else {
      __ctalkCriticalExceptionInternal (NULL, undefined_method_x, 
			"from mapInstanceVariables (Class Object)");
      return NULL;
    }
  }
  //
  // The argument block called by __ctalkInlineMethod () returns NULL
  // automatically, non-NULL if it encounters a break.
  //
  for (t = rcvr_obj -> instancevars, have_break = NULL; t; t = t -> next) {
    if ((have_break = __ctalkInlineMethod (t, arg_method, 0)) != NULL)
      break;
  }
  __ctalkArgBlkSetCallerReturn (have_break);
  
  return NULL;
}

Object instanceMethod mapClassVariables (OBJECT *(*methodfn)()) {
  "Apply the argument <methodfn>, which has the prototype
OBJECT *(*methodfn)(), to each of the class variables
in the receiver.  This method is used mainly by other
methods in ObjectInspector class to print the contents
of objects."

    OBJECT *(*fn)(), *rcvr_obj, *rcvr_obj_p, *t, *have_break;
  METHOD *self_method, *arg_method;

  fn = (OBJECT *(*)())__ctalkRtGetMethodFn ();
  rcvr_obj = rcvr_obj_p = __ctalk_self_internal ();

  if (((self_method = __ctalkRtGetMethod ()) == NULL) &&
      ((self_method = __ctalkFindClassMethodByFn (&rcvr_obj, fn, 0))
       == NULL)) {
    __ctalkCriticalExceptionInternal (NULL, undefined_method_x, 
				      "from map (Class List)");
    return NULL;
  }

  if (((arg_method = __ctalkFindInstanceMethodByName 
	(&rcvr_obj_p, 
	 ARG_NAME(self_method->args[0]), 0, -1))
      == NULL) &&
      ((arg_method = __ctalkFindClassMethodByName 
	(&rcvr_obj_p, 
	 ARG_NAME(self_method->args[0]), 0, -1))
       == NULL)) {
    OBJECT *class_object_p;
    arg_method = NULL;
    for (class_object_p = __ctalk_classes;
	 class_object_p;
	 class_object_p = class_object_p -> next) {
      if (((arg_method = __ctalkFindInstanceMethodByName 
	    (&class_object_p, ARG_NAME(self_method->args[0]), 0, -1))
	   != NULL) ||
	  ((arg_method = __ctalkFindClassMethodByName 
	    (&class_object_p, ARG_NAME(self_method->args[0]), 0, -1))
	   != NULL))
	break;
    }
    if (arg_method) {
#if 0
      /* These also cause annoying messages in the inspector. */
      _warning ("Warning: From mapClassVariables (class Object):\n");
      _warning ("Warning: The argument block thinks the receiver's class is \"%s,\"\n",
		class_object_p -> __o_name);
      _warning ("Warning: when it is actually, \"%s.\"\n",
		rcvr_obj -> CLASSNAME);
#endif
    } else {
      __ctalkCriticalExceptionInternal (NULL, undefined_method_x, 
			"from mapInstanceVariables (Class Object)");
      return NULL;
    }
  }
  if (rcvr_obj -> __o_class) {
    for (t = rcvr_obj -> __o_class -> classvars, have_break = NULL;
	 t; t = t -> next) {
      if ((have_break = __ctalkInlineMethod (t, arg_method, 0)) != NULL)
	break;
    }
    __ctalkArgBlkSetCallerReturn (have_break);
  }
  return NULL;
}

Object instanceMethod asSymbol (void) {
  "If the value of the receiver is an object reference,
  create a symbol with that reference.  Otherwise,
  create a symbol with a reference to the receiver."
  OBJECT *new_symbol;
  if (self value is Symbol) {
    return self;
  } else if (obj_ref_str (self value asString)) {
    new_symbol = __ctalkCreateObjectInit ("result",
					  "Symbol",
					  "Object",
					  LOCAL_VAR,
					  self value asString);
  } else {
    _warning ("Object : asSymbol: receiver's value, \"%s\" is not a pointer.\n",
	      self value);
    new_symbol = __ctalkCreateObjectInit ("result",
					  "Symbol",
					  "Object",
					  LOCAL_VAR,
					  NULLSTR);
  }
  return new_symbol;
}

Object instanceMethod dump (void) {
  "Print an object's contents on the terminal.  This is a
  shortcut for the formatObject method in
  ObjectInspector class."
  ObjectInspector new inspector;
  String new s;
  Symbol new selfRef;

  WriteFileStream classInit;

  *selfRef = self;
  s = inspector formatObject selfRef;
  stdoutStream printOn "%s\n", s;
  return NULL;
}

Object instanceMethod addressOf (void) {
  "Return a Symbol object that contains the memory address
  of the receiver."
  Symbol new s;
  OBJECT *self_object, *s_alias;
  returnObjectClass Symbol;

  self_object = __ctalk_self_internal ();
  s_alias = s;

  SYMVAL(s_alias -> __o_value) =
    SYMVAL(s_alias -> instancevars -> __o_value) = (uintptr_t)self_object;

  return s;
}

Object instanceMethod & addressOf_prefix (__prefix__) {
  "Like the addressOf method, except that this method
   overloads C's & prefix operator."
  return self addressOf;
}

Object instanceMethod libraryPath (void) {
  "If the receiver is a String containing the name of a
  class, returns a String with the class library file's
  path."
  Array new searchDirs;
  Application new docApp;
  String new s;
  String new libraryPathName;
  String new receiverName;
  FileStream new f;
  returnObjectClass String;

  s = docApp classSearchPath;
  s split ':', searchDirs;
  receiverName = self value;
  searchDirs map {
    libraryPathName = self + "/" + receiverName;
    if (f exists libraryPathName)
      break;
  }
  return libraryPathName;
}

Object instanceMethod methods (Boolean findClassMethods) {
  "Return a String with a list of methods in the
  receiver's class, one method name per line.  The
  receiver can be either a class object or a String
  with the name of a class.  This method is written to
  be quick, so it simply looks for method declarations
  that appear on one line."
  String new classNameStr;
  String new classLibFileName;
  ReadFileStream new f;
  String new inputLine;
  String new outputLine;
  String new keywordPattern;
  List new lineTokens;
  Exception new s;
  Key new tok;
  Boolean new haveClassName;
  Boolean new haveKeyword;
  Boolean new overloadedOp;
  Character new c;
  Array new searchOffsets;
  Integer new nMatches;
  String new methodRegex;
  Integer new nBraces;
  Integer new length;
  Integer new i;
  Boolean new inMethod;

  if (self is String) {
    classNameStr = self value;
  } else {
    if (self isClassObject) {
      classNameStr = self name;
    } else {
      classNameStr = self className;
    }
  }
  classLibFileName = classNameStr libraryPath;

  if (!f exists classLibFileName) {
    s raiseException 
      (UNDEFINED_CLASS_OR_RECEIVER_X, 
       ("Object : methods: File " + classLibFileName + " not found."));
    return NULL;
  }

  f openOn classLibFileName;
  outputLine = "";
  haveClassName = False;
  haveKeyword = False;
  overloadedOp = False;
  nBraces = 0;
  inMethod = False;

  if (findClassMethods)
    keywordPattern = "classMethod";
  else
    keywordPattern = "instanceMethod";

  methodRegex ="^ *" + classNameStr + " *" + keywordPattern;

  while (!f streamEof) {

    inputLine = f readLine;

    if (!haveClassName && !inMethod) {
      if ((inputLine search methodRegex, searchOffsets) > 0) {
	haveClassName = True;
      } else {
	continue;
      }
    } else {
      /* matchRegex allows us to count multiple braces in a line. */
      nMatches = inputLine matchRegex "{", searchOffsets;
      if (nMatches > 0) {
	if (nBraces == 0) {
	  inMethod = True;
	}
	nBraces += nMatches;
      }
      nMatches = inputLine matchRegex "}", searchOffsets;
      if (nMatches > 0) {
	nBraces -= nMatches;
	if (nBraces == 0) {
	  inMethod = False;
	}
      }
      continue;
    }
   
    inputLine tokenize lineTokens;

    if (lineTokens size == 0)
      continue;

    tok = *lineTokens;

    while (++tok) {

      if (*tok == keywordPattern)
	haveKeyword = True;

      if (haveClassName && haveKeyword) {
	++tok;
	outputLine += *tok;
#if 0 /***/	  
	while (++tok) {
	  c = (*tok) at 0;
	  if (c isAlpha || (c == '_')) {
	    if (!overloadedOp) {
	      outputLine += *tok;
	    } else {
	      overloadedOp = False;
	    }
	    break;
	  } else  {
	    // Collect an overloaded operator if the
	    // next token isn't a label.
	    outputLine += *tok;
	    overloadedOp = True;
	  }
	}
#endif	  
	outputLine += "\n";
	haveClassName = False;
	haveKeyword = False;
	nMatches = inputLine matchRegex "{", searchOffsets;
	if (nMatches > 0) {
	  nBraces += nMatches;
	  inMethod = True;
	}
	nMatches = inputLine matchRegex "}", searchOffsets;
	if (nMatches > 0) {
	  nBraces -= nMatches;
	  if (nMatches == 0) {
	    inMethod = False;
	  }
	}
      }

      ++tok;
    }
    lineTokens delete;
  }
  f closeStream;
  return outputLine;
}

Object instanceMethod asString (void) {
  "Return the receiver's value as a String object."
  OBJECT *self_object;
  returnObjectClass String;
  self_object = self value;
  return self_object -> __o_value;
}

Object instanceMethod asFloat (void) {
  "Return the receiver's value as a Float object."
  Float new floatObject;
  char buf[128];
  returnObjectClass Float;

  if (xsprintf (buf, "%lf", self value)) {
    __ctalkSetObjectValueVar (floatObject, buf);
  } else {
    if (xsprintf (buf, "%f", self value)) {
      __ctalkSetObjectValueVar (floatObject, buf);
    } else {
      __ctalkSetObjectValueVar (floatObject, self value);
    }
  }

  return floatObject;
}

Object instanceMethod sizeof sizeof_prefix (__prefix__) {
  "Overloads C's sizeof () operator.  In Ctalk, the C size
  of the receiver is the size of a 32- or 64-bit
  pointer.  Individual classes can overload this method
  for special applications."
  returnObjectClass Integer;
  return 4;
}

Object instanceMethod hasPointerContext (void) {
  "Return a Boolean value of True if the receiver has the
  OBJECT_HAS_PTR_CX attribute set, False otherwise."
  returnObjectClass Boolean;
  return (bool) (__ctalk_self_internal () -> attrs & OBJECT_HAS_PTR_CX);
}

Object instanceMethod = setEqual (OBJECT *__newObject) {
  "The basic assignment method. Assigns the receiver label
  to refer to the argument."

  if (__ctalkAliasObject (self, __newObject) != 0) {
    printf ("Object : = : Could not set object, \"%s,\" value.\n", self name);
    if (self traceEnabled)
      __warning_trace ();
    return NULL;
  }

  return __newObject;
}

Object instanceMethod basicNew (char *name, char *classname,
				char *superclassname, 
				char *value_expr) {
  "Return a new object with the name, class, superclass,
  and value given by the arguments.  The new object has
  all of the instance variables defined by the class
  object.  Also set the object's value explicitly to
  make sure that an instance variable didn't replace
  it.  The new object has the scope LOCAL_VAR and has a
  reference count of 1."
  OBJECT *s;
  returnObjectClass Any;

  s = __ctalkCreateObjectInit (name, classname, superclassname,
			       LOCAL_VAR, value_expr);

  __ctalkInstanceVarsFromClassObject (s);
  __ctalkAddBasicNewTag (s);
  __objRefCntSet (&s, 1);

  return s;
}

Object instanceMethod basicNew (char *name, char *value_expr) {
  "Return a new object with the name and value given by
  the arguments.  The new object has all of the
  instance variables defined by the class object.  Also
  set the object's value explicitly to make sure that
  an instance variable didn't replace it.  The new
  object has the scope LOCAL_VAR and has a reference
  count of 1."
  Exception new ex;
  OBJECT *s;
  returnObjectClass Any;

  if (self className != "Class") {
    ex raiseException INVALID_RECEIVER_X, "\"basicNew\" with 2 arguments requires a class object as the receiver.";
      return NULL;
  }
  

  s = __ctalkCreateObjectInit (name, self name, 
			       self superclassName,
			       LOCAL_VAR, value_expr);

  __ctalkInstanceVarsFromClassObject (s);
  __ctalkAddBasicNewTag (s);
  __objRefCntSet (&s, 1);

  return s;
}

Object instanceMethod basicNew (char *name) {
  "Return a new object with the name given by the
  argument.  The new object has all of the instance
  variables defined by the class object.  Also set the
  object's value explicitly to make sure that an
  instance variable didn't replace it.  The new object
  has the scope LOCAL_VAR and has a reference count of
  1."
  Exception new ex;
  OBJECT *s;
  returnObjectClass Any;

  if (self className != "Class") {
    ex raiseException INVALID_RECEIVER_X, "\"basicNew\" with 1 argument requires a class object as the receiver.";
      return NULL;
  }
  

  s = __ctalkCreateObjectInit (name, self name, 
			       self superclassName,
			       LOCAL_VAR, NULLSTR);

  __ctalkInstanceVarsFromClassObject (s);
  __objRefCntSet (&s, 1);

  return s;
}

Object instanceMethod ! negate_pfx (__prefix__) {
  "Overloads the C prefix operator, '!'. Returns True if
   the the receiver is zero or NULL, False otherwise."
  returnObjectClass Boolean;
  OBJECT *s;
  s = self value;
  if (STR_IS_NULL(s -> __o_value))
    return True;
  else
    return False;
}

Object instanceMethod == identity (char *sArg) {
  "Return a Boolean value of True if the receiver and the
   argument are the same object.  Also returns True if
   the values of both the receiver and the argument are 
   (null)."

  OBJECT *rcvr_value, *op_value;
  int rval;

  returnObjectClass Boolean;

  rcvr_value = self value;
  op_value = sArg value;

  if (rcvr_value == NULL) {
    if (op_value == NULL) {
      rval = TRUE;
    } else {
      rval = FALSE;
    }
  }

  if (STR_IS_NULL(rcvr_value->__o_value)) {
    if (STR_IS_NULL(op_value->__o_value)) {
      rval = TRUE;
    } else {
      rval = FALSE;
    }
  } else if (STR_IS_NULL(op_value->__o_value)) {
    if (STR_IS_NULL(rcvr_value->__o_value)) {
      rval = TRUE;
    } else {
      rval = FALSE;
    }
  } else if (rcvr_value == op_value) {
    rval = TRUE;
  } else {
    rval = FALSE;
  }

  return rval;

}

Object instanceMethod != notidentity (char *sArg) {
  "Return a Boolean value of True if the contents of the
  receiver and the argument are not equal, False
  otherwise."

  OBJECT *rcvr_value, *op_value;
  int rval;

  returnObjectClass Boolean;

  rcvr_value = self value;
  op_value = sArg value;

  if (STR_IS_NULL(rcvr_value->__o_value)) {
    if (STR_IS_NULL(op_value->__o_value)) {
      rval = FALSE;
    } else {
      rval = TRUE;
    }
  } else if (STR_IS_NULL(op_value->__o_value)) {
    if (STR_IS_NULL(rcvr_value->__o_value)) {
      rval = FALSE;
    } else {
      rval = TRUE;
    }
  } else if (rcvr_value == op_value) {
    rval = FALSE;
  } else {
    rval = TRUE;
  }

  return rval;
}

Object instanceMethod inspect (String promptStr) {
  "Open an inspector on the receiver object.  With one
   argument, a String, the inspector displays the
   String as its command prompt.  At the prompt,
   typing, '?', or, 'help', displays a list of
   inspector commands.  This method is a shortcut for
   ObjectInspector : inspect with one argument, which
   is the the String to be displayed as the inspector's
   prompt."
  Symbol new objRef;
  ObjectInspector new inspector;

  *objRef = self;

  inspector inspect objRef, promptStr;
}

Object instanceMethod inspect (void) {
  "Open an inspector on the receiver object.  At the '>'
   prompt, typing, '?', or, 'help', displays a list of
   inspector commands.  This method is a shortcut for
   ObjectInspector : inspect."
  Symbol new objRef;
  ObjectInspector new inspector;

  *objRef = self;

  inspector inspect objRef;
}

Object instanceMethod parent (void) {
  "Return the receiver's parent object, or the receiver if it
   is the topmost object."
    OBJECT *self_alias;
  self_alias = self;
  if (IS_OBJECT(self_alias -> __o_p_obj))
    return self_alias -> __o_p_obj;
  else
    return self;
}

Object instanceMethod docDir (void) {
  "Returns a String that contains the directory where the Ctalk
   documentation is installed on the system."
  returnObjectClass String;
  return __ctalkDocDir ();
}
