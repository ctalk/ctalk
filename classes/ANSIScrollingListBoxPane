/* $Id: ANSIScrollingListBoxPane,v 1.1.1.1 2020/05/16 02:37:00 rkiesling Exp $ -*-C-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2014, 2018-2019  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *  ANSIScrollingListBoxPane class.
 *
 *  Displays a selection list, and can scroll if the number of 
 *  list items is greater than the height of the widget.
 *
 *  Also displays a read-only scrollbar that indicates which 
 *  portion of the list is visible.
 *
 *  TODO - 
 *    Make the list scroll less jumpy - it's accomplished
 *    now by completely redrawing the list box.
 *
 *    Make the scrollbar read/write, by making it focusable.
 *
 *    Try to abbreviate (and organize better) by making this a 
 *    subclass of ANSIListBoxPane.
 */

#include <ctalk/ctalkdefs.h>

require ANSIScrollPane;

ANSIWidgetPane class ANSIScrollingListBoxPane
"ANSIScrollingListBoxPane displays a list box with a
scroll indicator on the side, which can scroll
vertically if there are more items than the window can
display at once.";
ANSIScrollingListBoxPane instanceVariable items List NULL;
ANSIScrollingListBoxPane instanceVariable viewStartLine Integer 1;
ANSIScrollingListBoxPane instanceVariable viewHeight Integer 0;
ANSIScrollingListBoxPane instanceVariable viewWidth Integer 0;
ANSIScrollingListBoxPane instanceVariable selectedLine Integer 1;
ANSIScrollingListBoxPane instanceVariable prevSelectedLine Integer 0;
ANSIScrollingListBoxPane instanceVariable selectedContent ANSILabelPane NULL;
ANSIScrollingListBoxPane instanceVariable oldSelectedContent ANSILabelPane NULL;
ANSIScrollingListBoxPane instanceVariable totalLines Integer 0;
ANSIScrollingListBoxPane instanceVariable scrollBar ANSIScrollPane NULL;


#define BUTTONWIDTH 10
#define BUTTONHEIGHT 3
#define __LIST_HEAD(__o) ((__o)->instancevars->next)
#define LISTBOX_VIEW_START_X_OFFSET 10
#define LISTBOX_VIEW_START_Y_OFFSET 1 /* Count view lines from 1. */

#define LISTBOX_DEFAULT_LEFT_MARGIN 4
#define LISTBOX_DEFAULT_SIZE_X 35
#define LISTBOX_DEFAULT_SIZE_Y 20
#define LISTBOX_DEFAULT_VIEWHEIGHT (LISTBOX_DEFAULT_SIZE_Y - 2)
#define LISTBOX_DEFAULT_VIEWWIDTH (LISTBOX_DEFAULT_SIZE_X - 2)
#define LIST_SCROLL_DEFAULT_ORIGIN_X 1
#define LIST_SCROLL_DEFAULT_ORIGIN_Y 1
#define LISTBOX_DEFAULT_ORIGIN_X 2
#define LISTBOX_DEFAULT_ORIGIN_Y 2
#define LIST_SCROLL_DEFAULT_SIZE_X 3
#define LIST_SCROLL_DEFAULT_SIZE_Y LISTBOX_DEFAULT_SIZE_Y

#ifndef SCROLL_VIEW_START_X_OFFSET
#define SCROLL_VIEW_START_X_OFFSET 2
#endif
#ifndef SCROLL_VIEW_START_Y_OFFSET
#define SCROLL_VIEW_START_Y_OFFSET 2 /* Count view lines from 1. */
#endif



ANSIScrollingListBoxPane instanceMethod scrollThumbStart (void) {
  "Calculate the top line of the scroll thumb, depending
  on which portion of the list is being displayed.
  Does nothing if pane can display the entire list at
  once."
  Float new percent;
  Float new viewStartLineFloat;
  Float new totalLinesFloat;
  Float new viewHeightFloat;
  Float new viewablePct;

  if (self totalLines > self viewHeight) {
    viewStartLineFloat = self viewStartLine;
    totalLinesFloat = self totalLines;
    viewHeightFloat = self viewHeight;
    viewablePct = viewHeightFloat / totalLinesFloat;
    self scrollBar thumbStartLine = viewStartLineFloat * viewablePct;
  }
}

ANSIScrollingListBoxPane instanceMethod scrollThumbSize (void) {
  "Calculate the top line of the scroll thumb based on
  which part of the list is viewable.  If the pane can
  display the entire list at once, this method does
  nothing."
  Float new viewablePct;
  Float new totalLinesFloat;
  Float new viewHeightFloat;
  if (self totalLines <= self viewHeight) {
    self scrollBar thumbHeight = self scrollBar size y - 2;
  } else {
    totalLinesFloat = self totalLines;
    viewHeightFloat = self viewHeight;
    viewablePct = viewHeightFloat / totalLinesFloat;
    self scrollBar thumbHeight = viewHeightFloat * viewablePct;
  }
}

ANSIScrollingListBoxPane instanceMethod new (String __paneName) {
  "ANSIScrollingListBoxPane constructor.  The argument, a
  String, contains the name of the new object."
  ANSIWidgetPane super new __paneName;
  ANSIScrollPane new scrollPane;
  __paneName paneStream openInputQueue;
  __paneName withBorder;
  __paneName withShadow;
  __paneName origin x = LISTBOX_DEFAULT_ORIGIN_X;
  __paneName origin y = LISTBOX_DEFAULT_ORIGIN_Y;
  __paneName size x = LISTBOX_DEFAULT_SIZE_X;
  __paneName size y = LISTBOX_DEFAULT_SIZE_Y;
  __paneName viewHeight = LISTBOX_DEFAULT_VIEWHEIGHT;
  __paneName viewWidth = LISTBOX_DEFAULT_VIEWWIDTH;


  __paneName addBuffer LISTBOX_DEFAULT_SIZE_X, LISTBOX_DEFAULT_SIZE_Y, 1;

  __paneName scrollBar become scrollPane;
  __paneName scrollBar shadow = TRUE;
  __paneName scrollBar border = TRUE;
  __paneName scrollBar origin x = LIST_SCROLL_DEFAULT_ORIGIN_X;
  __paneName scrollBar origin y = LIST_SCROLL_DEFAULT_ORIGIN_Y;
  __paneName scrollBar size x = LIST_SCROLL_DEFAULT_SIZE_X;
  __paneName scrollBar size y = LIST_SCROLL_DEFAULT_SIZE_Y;

  return __paneName;
}

ANSIScrollingListBoxPane instanceMethod appendLine (String __text) {
  "Add the argument, a String that contains a line of
  text, to the pane's contents."
  ANSILabelPane new labelItem;

  labelItem borderLess = TRUE;
  labelItem border = FALSE;
  labelItem shadow = FALSE;

  labelItem appendLine __text, 20, 0;

  self items push labelItem;
  self totalLines = self totalLines + 1;
  return NULL;
}

ANSIScrollingListBoxPane instanceMethod selectNext (void) {
  "Select the next item in the list.  Saves the old
  selection so that refreshSelection can un-highlight
  the previous selection.
  
  This method does not do any range checking, so before
  calling thiis method, the selectedLine instance
  variable should be set to the new selection, and the
  previous selection should point to a valid item at
  selectedLine - 1."

  int contentLine, selectedLineInt, oldSelectedLineInt;

  contentLine = 0;

  self prevSelectedLine = self selectedLine - 1;
  self oldSelectedContent become self selectedContent;

  selectedLineInt = self selectedLine;
  oldSelectedLineInt = self prevSelectedLine;

  self items map {

    ++contentLine;

    if (selectedLineInt == contentLine) {
      super selectedContent become self; 
    }

  }
}

ANSIScrollingListBoxPane instanceMethod selectPrev (void) {
  "Select the next item in the list.  Saves the old
  selection so that refreshSelection can un-highlight
  the previous selection.
  
  Nether selectNext nor selectPrev do any range
  checking, so before calling this method, the
  selectedLine instance variable should be set to the
  new selection, and the previous selection should
  point to a valid item at selectedLine + 1."

 int contentLine, selectedLineInt, oldSelectedLineInt;

  contentLine = 0;

  self prevSelectedLine = self selectedLine + 1;
  self oldSelectedContent become self selectedContent;

  selectedLineInt = self selectedLine;
  oldSelectedLineInt = self prevSelectedLine;

  self items map {

    ++contentLine;

    if (selectedLineInt == contentLine) {
      super selectedContent become self; 
    }

  }
}

ANSIScrollingListBoxPane instanceMethod refresh (void) {
  "Update the pane's contents on the display.
  Also sets the selected item."

  int contentLine, viewLine, contentHeight,
    viewStartLineInt, viewHeightInt;

  viewStartLineInt = self viewStartLine;
  viewHeightInt = self viewHeight;

  contentLine = 0;
  viewLine = 0;
  contentHeight = viewStartLineInt + viewHeightInt;

  self super refresh;

  self cursor x = self origin x + LISTBOX_DEFAULT_LEFT_MARGIN;

  self items map {

    ++contentLine;

    if ((contentLine >= viewStartLineInt) &&
     	(contentLine < contentHeight)) {

      __ctalkANSIClearPaneLine (super, viewLine + LISTBOX_VIEW_START_Y_OFFSET);

      super cursor y = viewLine + super origin y;

      eval self display super cursor x, super cursor y;

      if (super selectedLine == contentLine)
	super selectedContent become self; 

      ++viewLine;

    }

  }

  return NULL;
}

ANSIScrollingListBoxPane instanceMethod refreshSelection (void) {
  "Highlight the new selection and un-highlight the
  previous selection.  This method should should only
  be called after selectNext or selectPrev.  To
  hightlight the initial selection after drawing the
  entire listbox, use refreshSelectionFirst."

  Integer new viewStartOffsetLocal;
  Integer new viewSelectedLineLocal;

  viewStartOffsetLocal = self viewStartLine;
  viewSelectedLineLocal = self prevSelectedLine - viewStartOffsetLocal;

  self cursor x = self origin x + LISTBOX_DEFAULT_LEFT_MARGIN;

  self cursor y = self origin y + viewSelectedLineLocal;
  self oldSelectedContent resetGraphics;
  self oldSelectedContent display self cursor x, self cursor y;
  self oldSelectedContent refresh;

  viewSelectedLineLocal = self selectedLine - viewStartOffsetLocal;
  self cursor y = self origin y + viewSelectedLineLocal;
  self selectedContent reverseOnOff;
  self selectedContent display self cursor x, self cursor y;
  self selectedContent refresh;

}

ANSIScrollingListBoxPane instanceMethod refreshSelectionFirst (void) {
  "Highlight the initial selection.  Use this method to
  hightlight the selection after drawing the listbox by
  calling refresh."

  self cursor x = self origin x + LISTBOX_DEFAULT_LEFT_MARGIN;
  self cursor y = self origin y;
  self selectedContent reverseOnOff;
  self selectedContent display self cursor x, self cursor y;
}

#ifndef ESC
#define ESC     0x1b
#endif
#define CR      0x0d
#define LF      0x0a
#define EMACS_DN 0x0e
#define EMACS_UP 0x10
#define CSI2    0x5b     /* ESC [ sequence is CSI */

ANSIScrollingListBoxPane instanceMethod handleInput (void) {
  "Process input for the Pane.  Pressing Escape withdraws
  the pane from the display without activating the 'OK'
  button. Pressing Return activates the 'OK' button and
  then withdraws the Pane.
  
  Pressing 'j' Control-N, or an ANSI Cursor Down
  selects the next item.  Pressing 'k', Control-P, or
  an ANSI Cursor Up selects the previous item.
   
  Also shifts the view to keep the selection within
  pane's view area.  In that case, also adjusts the
  scroll bar position."
  Integer new c;
  InputEvent new iEvent;
  String new responseString;

  returnObjectClass String;

  self paneStream rawMode;
  self paneStream openInputQueue;
  while ((c = self paneStream getCh) != EOF) {
    iEvent become self paneStream nextInputEvent;
    switch (iEvent eventClass)
      {
	/*
	 *  ESC alone should work okay... but grab 
	 *  the rest of a sequence if necessary.
	 *  PgUp and PgDn do not register correctly
	 *  on some terminals... so they're not used
	 *  below.
	 */
      case KBDCHAR:
	switch (iEvent eventData asCharacter)
	  {
	  case ESC:
	    if ((c = self paneStream getChNoBlock) != 0) {
	      iEvent become self paneStream nextInputEvent;
	      switch (iEvent eventData asCharacter) 
		{
		case CSI2:
 		  if ((c = self paneStream getChNoBlock) != 0) {
		    iEvent become self paneStream nextInputEvent;
		    switch (iEvent eventData asCharacter) 
		      {
		      }
		  }
		  break;
		default:
		  break;
		}
	    } else {
	      self withdraw;
	      self paneStream restoreTerm;
	      self paneStream setGraphics '0';
	      return NULL;
	    }
	    break;
 	  case CR:
	  case LF:
	    // 	    self dismissButton focusHighlightOnOff;
	    // 	    self dismissButton refresh;
	    self withdraw;
	    self paneStream restoreTerm;
	    self paneStream setGraphics '0';
	    return responseString;
	    break;
	    /*
	     *  vi and emacs keys.
	     */
	  case 'j':
	  case EMACS_DN:
	    self selectedLine = self selectedLine + 1;
	    if (self selectedLine > self totalLines) {
	      self selectedLine = self totalLines;
	    } else {
	      self selectNext;
	      if ((self selectedLine + self viewStartLine) >= self viewHeight){
		self viewStartLine = self viewStartLine + 1;
		self refresh;
		self scrollThumbStart;
		self scrollBar refresh;
	      }
	      self refreshSelection;
	    }
	    break;
	  case 'k':
	  case EMACS_UP:
	    self selectedLine = self selectedLine - 1;
	    if (self selectedLine < 1) {
	      self selectedLine = 1;
	    } else {
	      self selectPrev;
	      if (self selectedLine < self viewStartLine) {
		self viewStartLine = self viewStartLine - 1;
		self refresh;
		self scrollThumbStart;
		self scrollBar refresh;
	      } 
	      self refreshSelection;
	    }
	    break;
	  }
	break;
      case KBDCUR:
	switch (iEvent eventData)
	  {
	  case 'A':  /* Cursor up */
	    self selectedLine = self selectedLine - 1;
	    if (self selectedLine < 1) {
	      self selectedLine = 1;
	    } else {
	      self selectPrev;
	      if (self selectedLine < self viewStartLine) {
		self viewStartLine = self viewStartLine - 1;
		self refresh;
		self scrollThumbStart;
		self scrollBar refresh;
	      } 
	      self refreshSelection;
	    }
	    break;
	  case 'B':  /* Cursor dn */
	    self selectedLine = self selectedLine + 1;
	    if (self selectedLine > self totalLines) {
	      self selectedLine = self totalLines;
	    } else {
	      self selectNext;
	      if ((self selectedLine + self viewStartLine) >= self viewHeight){
		self viewStartLine = self viewStartLine + 1;
		self refresh;
		self scrollThumbStart;
		self scrollBar refresh;
	      }
	      self refreshSelection;
	    }
	    break;
	  default:
	    break;
	  }
	break;
      }
  }
  return NULL;
}

ANSIScrollingListBoxPane instanceMethod show (int x_org, int y_org) {
  "Set the dimensions of the receiver object and display
  it, then waits for user input.  Also draws the
  initial position of the scroll bar."
  self origin x = x_org + LISTBOX_DEFAULT_LEFT_MARGIN;
  self origin y = y_org;
  self cursor x = LISTBOX_VIEW_START_X_OFFSET;
  self cursor y = LISTBOX_VIEW_START_Y_OFFSET;
  self refresh;
  self refreshSelectionFirst;
  self scrollBar origin x = x_org;
  self scrollBar origin y = y_org;
  self scrollBar cursor x = SCROLL_VIEW_START_X_OFFSET;
  self scrollBar cursor y = SCROLL_VIEW_START_Y_OFFSET;
  self scrollThumbSize;
  self scrollThumbStart;
  self scrollBar refresh;
  self handleInput;
  return NULL;
}

ANSIScrollingListBoxPane instanceMethod cleanup (void) {
  "Delete the buffers associated with the Pane objects."
  __ctalkDeleteWinBuffer (self paneBuffer);
  __ctalkDeleteWinBuffer (self paneBackingStore);
  __ctalkDeleteWinBuffer (self scrollBar paneBuffer);
  __ctalkDeleteWinBuffer (self scrollBar paneBackingStore);

  self items map {
    eval self cleanup;
  }
  return NULL;
}

ANSIScrollingListBoxPane instanceMethod selectedText (void) {
  "Return a String with the selected item's text."
  returnObjectClass String;
  String new _text;
  ANSILabelPane new selectedTmp;
  
  _text = self selectedContent text unshift;
  self selectedContent text push _text;

  return _text;
}

ANSIScrollingListBoxPane instanceMethod withBorder (void) {
  self border = 1;
  self scrollBar border = 1;
}

ANSIScrollingListBoxPane instanceMethod noBorder (void) {
  self border = 0;
  self scrollBar border = 0;
}

ANSIScrollingListBoxPane instanceMethod withShadow (void) {
  self shadow = 1;
  self scrollBar shadow = 1;
}

ANSIScrollingListBoxPane instanceMethod noShadow (void) {
  self shadow = 0;
  self scrollBar shadow = 0;
}
