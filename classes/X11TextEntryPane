/* $Id: X11TextEntryPane,v 1.7 2020/05/16 14:06:34 rkiesling Exp $ -*-C-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2020  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

X11CanvasPane class X11TextEntryPane;

Character class CharCell;

/* 
 *   X11TextEntryPane Class - Text Entry Widget
 *
 *
 *   Resources:
 *
 *     backgroundColor     String    "white"
 *     textColor           String    "black"
 *     borderWidth         Integer   1
 *     hoverBorderWidth    Integer   2
 *     borderColor         String    "gray"
 *     vPad                Integer   4
 *     hPad                Integer   4
 *     font (Linux)        String    
 *                  "DejaVu Sans Mono-12:weight=medium:slant=roman"
 *     font (MacOS)        String    
 *                  "Bitstream Vera Sans Mono-14:weight=medium:slant=roman"
 *                                   Linux       MacOS
 *     spacingHint          Integer  -1          -3
 *     cursorAdvanceHint    2
 *
 */

X11TextEntryPane instanceVariable cursor X11Cursor 0;
X11TextEntryPane instanceVariable shiftState Integer 0;
X11TextEntryPane instanceVariable hover Boolean false;
X11TextEntryPane instanceVariable cursorX Integer 0;
X11TextEntryPane instanceVariable chars List NULL;
X11TextEntryPane instanceVariable spacingHint Integer 0;
X11TextEntryPane instanceVariable baselineY Integer 0;

CharCell instanceVariable width Integer 0;
CharCell instanceVariable boxOrg Point NULL;
CharCell instanceVariable boxSize Point NULL;

X11TextEntryPane instanceMethod new (String paneName) {
  Method new enterMethod, leaveMethod, kbdMethod, exposeMethod;

  X11TextEntryPane super new paneName;

  enterMethod definedInstanceMethod "X11TextEntryPane", "subPaneEnter";
  paneName setMethodHandler "enternotify", enterMethod;

  leaveMethod definedInstanceMethod "X11TextEntryPane", "subPaneLeave";
  paneName setMethodHandler "leavenotify", leaveMethod;

  kbdMethod definedInstanceMethod "X11TextEntryPane", "subPaneKbd";
  paneName setMethodHandler "kbdinput", kbdMethod;

  exposeMethod definedInstanceMethod "X11TextEntryPane", "subPaneExpose";
  paneName setMethodHandler "expose", exposeMethod;

#ifdef __APPLE__
  paneName resources atPut "font", "Bitstream Vera Sans Mono-14:weight=normal:slant=roman";
  paneName resources atPut "spacingHint", -3;
#else  
  paneName resources atPut "font", "DejaVu Sans Mono-12:weight=normal:slant=roman";
  paneName resources atPut "spacingHint", -1;
#endif  
  paneName resources atPut "textColor", "black";
  paneName resources atPut "backgroundColor", "white";
  paneName resources atPut "borderWidth", 1;
  paneName resources atPut "hoverBorderWidth", 2;
  paneName resources atPut "borderColor", "gray";
  paneName resources atPut "vPad", 4;
  paneName resources atPut "hPad", 4;
  paneName resources atPut "cursorAdvanceHint", 2;

  return paneName;
}

X11TextEntryPane instanceMethod attachTo (X11Pane parentPane,
					   String geomspec) {
  "Register the receiver pane as a subpane of the X11Pane
  given as the argument.  Generally parent pane should
  be a X11PaneDispatcher object.  At this time, a geometry
  specification like, '300x200', i.e., without the x and
  y origins, is okay - the Ctalk libraries center the
  message box above the parent window."
    /* X11Bitmap new xPaneBuffer;
       X11Bitmap new xPaneBackingStore; *//***/
  String new parentGeometry;
  int x, y, width, height;
  unsigned int mainWinID;
  
  self displayPtr = self mainWindow displayPtr;
  self paneBuffer backgroundColor = self resources at "backgroundColor";
  self super attachTo (parentPane, geomspec);

  self container = parentPane;
  (X11Bitmap *)self paneBuffer create self displayPtr, self xWindowID,
    self size x, self size y, self depth;
  (X11Bitmap *)self paneBackingStore create self displayPtr, self xWindowID,
    self size x, self size y, self depth;

  __ctalkX11SubWindowGeometry (parentPane, geomspec,
			       &x, &y, &width, &height);

  self size x = width;
  self size y = height;
  self origin x = x;
  self origin y = y;

  self resources atPut "geometry", geomspec;

  self cursor xterm;

  

  return NULL;
}

X11TextEntryPane instanceMethod refresh (void) {
  self super refresh;
}

X11TextEntryPane instanceMethod drawCursor (void) {
  Integer new hPad, cursorAdvanceHint;

  hPad = self resources at "hPad";
  cursorAdvanceHint = self resources at "cursorAdvanceHint";

  self paneBuffer drawLine self cursorX + cursorAdvanceHint, hPad,
    self cursorX + cursorAdvanceHint, self size y - hPad, self pen; 

}

X11TextEntryPane instanceMethod inputWidth (List input, Integer startIdx) {
  Integer new i, width;
  CharCell new c;
  returnObjectClass Integer;

  width = 0;
  i = 0;
  input map {
    if (i >= startIdx) {
      (Object *)c = self;
      width += c width;
      width += super spacingHint;
    }
    ++i;
  }
  return width;
}

X11TextEntryPane instanceMethod draw (void) {
  Integer new vPad, hPad;
  Integer new textWidthPx, clipStartIdx;
  Integer new entryChars, idx;
  String new entryText;
  CharCell new cm;
  
  self ftFontVar selectFontFromFontConfig (self resources at "font");
  self ftFontVar saveSelectedFont;

  self paneBuffer background (self resources at "backgroundColor");
  self paneBuffer clear;

  self pen colorName = self resources at "borderColor";
  if (self hover) {
    self pen width = self resources at "hoverBorderWidth";
  } else {
    self pen width = self resources at "borderWidth";
  }
  self drawRectangle 0, 0, self size x, self size y;

  self ftFontVar namedX11Color self resources at "textColor";

  entryText = self chars asString;

  vPad = self resources at "vPad";
  self cursorX = vPad;
  
  entryChars = entryText length;
  for (clipStartIdx = 0; clipStartIdx < entryChars; ++clipStartIdx) {
    textWidthPx = self inputWidth self chars, clipStartIdx;
    if (textWidthPx < ((self size x - vPad) * .75))
      break;
  }
  
  if (self spacingHint == 0) {
    /* The app can't initialize these much earlier than
       the first time this method is called. */
    self spacingHint = self resources at "spacingHint";
  }
  if (self baselineY == 0) {
    hPad = self resources at "hPad";
    self baselineY = self size y -
      borderWidth - hPad - (self ftFontVar descent);
  }

  idx = 0;
  self chars map {
    if (idx >= clipStartIdx) {
      (Object *)cm = self;
      super paneBuffer putStr super cursorX,
	super baselineY, cm asString;
      super cursorX += (cm width + super spacingHint);
    }
    ++idx;
  }

  if (self hover)
    self drawCursor;

}

X11TextEntryPane instanceMethod subPaneEnter (Object subPane,
					      InputEvent event) {
  if (event eventData == subPane xWindowID) {
    subPane useCursor subPane cursor;
    subPane hover = true;
    subPane draw;
    subPane refresh;
  }
}

X11TextEntryPane instanceMethod subPaneLeave (Object subPane,
					      InputEvent event) {
  if (event eventData == subPane xWindowID) {
    subPane defaultCursor;
    subPane hover = false;
    subPane draw;
    subPane refresh;
  }
}

X11TextEntryPane instanceMethod subPaneExpose (Object subPane,
					       InputEvent event) {
  self draw;
  self super refresh;
}

/* Some of these are also defined in X11TextEditorPane class and edittext.c. */
#define shiftStateShift     (1 << 0)
#define shiftStateCtrl      (1 << 1)
#define shiftStateCapsLock  (1 << 2)

/* From X11/keysymdef.h, in case your machine defines these differently. */
#ifndef XK_Control_L
#define XK_Control_L  0xffe3
#endif
#ifndef XK_Control_R
#define XK_Control_R  0xffe4
#endif
#ifndef XK_Shift_L
#define XK_Shift_L 0xffe1
#endif
#ifndef XK_Shift_R
#define XK_Shift_R 0xffe2
#endif
#ifndef XK_Caps_Lock
#define XK_Caps_Lock 0xffe5
#endif
#ifndef XK_Backspace
#define XK_Backspace 0xff08
#endif

X11TextEntryPane instanceMethod subPaneKbd (Object subPane,
					    InputEvent event) {
  char c;
  CharCell new cc, cm;
  if (event eventData == subPane xWindowID) {

    if (event eventClass == KEYPRESS) {
      switch (event xEventData5)
	{
	case XK_Shift_L:
	case XK_Shift_R:
	  subPane shiftState |= shiftStateShift;
	  break;
	case XK_Control_L:
	case XK_Control_R:
	  subPane shiftState |= shiftStateCtrl;
	  break;
	case XK_Caps_Lock:
	  /* sticky key */
	  if (subPane shiftState & shiftStateCapsLock) {
	    subPane shiftState &= ~shiftStateCapsLock;
	  } else {
	    subPane shiftState |= shiftStateCapsLock;
	  }
	  break;
	case XK_Backspace:
	  /* at the moment, insertion is always at the end
	     of the text */
	  if (self chars size > 0) {
	    cc = self chars pop;
	    self draw;
	    self refresh;
	  }
	  break;
	default:
	  c = __edittext_xk_keysym (event xEventData4, self shiftState,
				    event xEventData5);
	  if ((subPane shiftState & shiftStateShift) ||
	      (subPane shiftState & shiftStateCapsLock)) {
	    /* We're just gonna do the shifted keys here. */
	    switch (c)
	      {
	      case '0':	c = ')'; break;
	      case '1': c = '!'; break;
	      case '2': c = '@'; break;
	      case '3': c = '#'; break;
	      case '4': c = '$'; break;
	      case '5': c = '%'; break;
	      case '6': c = '^'; break;
	      case '7': c = '&'; break;
	      case '8': c = '*'; break;
	      case '9': c = '('; break;
	      case '-': c = '_'; break;
	      case '=':	c = '+'; break;
	      case '\\':c = '|'; break;
	      case '`':	c = '~'; break;
	      case '[': c = '{'; break;
	      case ']':	c = '}'; break;
	      case ';':	c = ':'; break;
	      case '\'':c = '\"';break;
	      case ',': c = '<'; break;
	      case '.':	c = '>'; break;
	      case '/': c = '?'; break;
	      default: c &= ~32; break;
	      }
	  }
	  cc become CharCell basicNew c asString, c;
	  if (c == ' ') {
	    /* Use the width of an 'e' for a space. */
	    cc width = self ftFontVar textWidth "e";
	  } else {
	    cc width = self ftFontVar textWidth cc asString;
	  }
	  self chars push cc;
	  self draw;
	  self refresh;
	  break;
	}
    } else if (event eventClass == KEYRELEASE) {
      switch (event xEventData5)
	{
	case XK_Shift_L:
	case XK_Shift_R:
	  subPane shiftState &= ~shiftStateShift;
	  break;
	case XK_Control_L:
	case XK_Control_R:
	  subPane shiftState &= ~shiftStateCtrl;
	  break;
	default:
	  break;
	}
    }
  }
}

X11TextEntryPane instanceMethod entryText (void) {
  returnObjectClass String;

  return self chars asString;
}
