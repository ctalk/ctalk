/* $Id: ANSITerminalPane,v 1.1.1.1 2020/05/16 02:37:00 rkiesling Exp $ -*-C-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2005-2014, 2018-2019  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *  Note that many of the instance variables are used by name
 *  in the C library functions, so don't change them.  Subclass 
 *  instead.
 */
Pane class ANSITerminalPane
"ANSITerminalPane and its subclasses manage windows on
text-mode displays, either text-mode consoles, xterms,
or VT100 compatible serial terminals.  The methods are
capable of using many of the graphics capabilties of
text-mode displays for drawing.  Each ANSITerminalPane
object also has an instance variable of class
ANSITerminalStream, which handles input events for the
pane, and declares instance variables for decorations
like shadows and borders, and graphics effects like
bold, blinking, and underline text.  The subclasses of
ANSITerminalPane mainly define widgets for text-mode
displays.  You should also look at ANSIWidgetPane
class, which provides methods for buffered graphical
objects.";
ANSITerminalPane instanceVariable paneStream ANSITerminalStream NULL;
ANSITerminalPane instanceVariable shadow Integer 0;
ANSITerminalPane instanceVariable border Integer 0;
ANSITerminalPane instanceVariable parentOrigin Point 0;
ANSITerminalPane instanceVariable parentClip Point 0;
ANSITerminalPane instanceVariable graphicsBits Integer 0;

ANSITerminalPane instanceMethod new (char *__paneName) {
  "The ANSITerminalPane constructor.  Create a new object
  with the name given as the argument, a String.  Also
  create the pane's stream object, an
  ANSITerminalStream."
  ANSITerminalPane super new __paneName;
  ANSITerminalStream new __newStream;
  __ctalkInstanceVarsFromClassObject (__paneName);
  __paneName paneStream become __newStream;
  return __paneName;
}

ANSITerminalPane instanceMethod childRefresh (void) {
  "Call the refresh method for the receiver pane and each
  of the sub-panes.  Called by refresh, which also
  handles exceptions."
  if (self mapped)
    __ctalkANSITerminalPaneRefresh ();
  if (!self children isEmpty)
    self children map childRefresh;
  return NULL;
}


ANSITerminalPane instanceMethod refresh (void) {
  "Redraw the receiver pane on the display, and each of
  the sub-panes.  Handle any exceptions generated by
  the refreshes."
  Exception new e;
  __ctalkANSITerminalPaneRefresh ();
  if (!self children isEmpty)
    self children map childRefresh;
  if (e pending)
    e handle;
  return NULL;
}

ANSITerminalPane instanceMethod putCharXY (int x, int y, char c) {
  "Prototype:
   <rcvr> putCharXY Integer x, Integer y, Character c
  
   Display character c at the pane position x,y, using
   the current graphics mode.  Does not update the
   software cursor."
  __ctalkANSITerminalPanePutChar (x, y, c);
  return NULL;
}

ANSITerminalPane instanceMethod printOn (char *__fmt, ...) {
  "Prototype:
  <rcvr> printOn String fmt, args...
  Print the formatted string on the pane at the position
  of the software cursor.  Updates the cursor position."
  String new buf;
  Integer new i;
  Integer new l;
  __ctalkObjectPrintOn (buf);
  l = buf length;
  for (i = 0; i < l; i = i + 1) {
    self putChar buf at i;
  }
  return self;
}

ANSITerminalPane instanceMethod putChar (char c) {
  "Display the argument, a Character, on the pane at the
  software cursor position.  Updates the software cursor."
  __ctalkANSITerminalPanePutChar (self cursor x, self cursor y, c);
  self cursor x = self cursor x + 1;
  return NULL;
}

ANSITerminalPane instanceMethod cursorPos (int __x, int __y) {
  "Set the software cursor position to the Integer
  arguments x,y.  The position 1,1 is the upper
  left-hand corner of the pane.  This method is a
  synomyn for gotoXY, below."
  self cursor x = __x;
  self cursor y = __y;
  return NULL;
}

ANSITerminalPane instanceMethod gotoXY (int __x, int __y) {
  "A synonym for cursorPos, above."
  self cursor x = __x;
  self cursor y = __y;
  return NULL;
}

ANSITerminalPane instanceMethod initialize (int x_org, int y_org,
					    int x_size, int y_size) {
  "Initialize the receiver pane and its buffers with the
  arguments x_org, y_org, x_size, and y_size, all
  Integers.  Sets the receiver pane's position and
  size."
  OBJECT *buf_value_alias;
  char buf[0xff];

  buf_value_alias = self paneBuffer value;
  xsprintf (buf, "%#x", (uintptr_t)__ctalkCreateWinBuffer (x_size, y_size, 1));
  __ctalkSetObjectValue (buf_value_alias, buf);
  buf_value_alias = self paneBackingStore value;
  xsprintf (buf, "%#x", (uintptr_t)__ctalkCreateWinBuffer (x_size, y_size, 1));
  __ctalkSetObjectValue (buf_value_alias, buf);
  __ctalkSetObjectValue (buf_value_alias, buf);
  self origin x = x_org;
  self origin y = y_org;
  self size x = x_size;
  self size y = y_size;
  self cursor x = 1;
  self cursor y = 1;
  return self;
}

ANSITerminalPane instanceMethod withBorder (void) {
  "Draw a border around the receiver pane."
  self border = TRUE;
  return NULL;
}
ANSITerminalPane instanceMethod withShadow (void) {
  "Draw a drop shadow behind the receiver pane."
  self shadow = TRUE;
  return NULL;
}

ANSITerminalPane instanceMethod map (ANSITerminalPane __child) {
  "Map the argument, an ANSITerminalPane sub-pane, to the 
  receiver pane's display."
  __child mapped = 1;
  __ctalkANSITerminalPaneMapWindow (__child);
  return NULL;
}

ANSITerminalPane instanceMethod unmap (ANSITerminalPane __child) {
  "Unmap the argument, an ANSITerminalPane sub-pane, from
  the receiver pane's display."
  __child mapped = 0;
  __ctalkANSITerminalPaneUnMapWindow (__child);
  return NULL;
}

#define BOLD    (1 << 0)
#define REVERSE (1 << 1)
#define UNDERLINE (1 << 2)
#define BLINK (1 << 3)

ANSITerminalPane instanceMethod resetGraphics (void) {
  "Clear all of the receiver pane's graphics attributes."
  self graphicsBits = 0;
  return self;
}

ANSITerminalPane instanceMethod boldOnOff (void) {
  "Alternately set and clear the receiver pane's 
  bold graphics attribute."
  self graphicsBits = self graphicsBits ^ BOLD;
  return self;
}

ANSITerminalPane instanceMethod blinkOnOff (void) {
  "Toggle the receiver pane's blinking graphics
  attribute."
  self graphicsBits = self graphicsBits ^ BLINK;
  return self;
}

ANSITerminalPane instanceMethod reverseOnOff (void) {
  "Toggle the receiver pane's reverse video attribute."
  self graphicsBits = self graphicsBits ^ REVERSE;
  return self;
}

ANSITerminalPane instanceMethod underlineOnOff (void) {
  "Alternately turn on and off the receiver pane's
  underline graphics attribute."
  self graphicsBits = self graphicsBits ^ UNDERLINE;
  return self;
}

ANSITerminalPane instanceMethod delete (void) {
  "Delete the receiver pane's buffer."
  __ctalkDeleteWinBuffer (self paneBuffer);
  return NULL;
}

ANSITerminalPane instanceMethod cleanup(void) {
  "Delete the receiver pane's buffer.
  This method is a synomym for delete, above."
  __ctalkDeleteWinBuffer (self paneBuffer);
  return NULL;
}

ANSITerminalPane instanceMethod terminalWidth (void) {
  "Returns an Integer with the width of the receiver's
  terminal in character columns."
  returnObjectClass Integer;
  return __ctalkTerminalWidth ();
}

ANSITerminalPane instanceMethod terminalHeight (void) {
  "Returns an Integer with the height of the receiver's
  terminal in character rows."
  returnObjectClass Integer;
  return __ctalkTerminalHeight ();
}

