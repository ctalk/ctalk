/* $Id: X11TerminalStream,v 1.8 2019/12/09 20:31:06 rkiesling Exp $ -*-c-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2005 - 2012  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *    X11TerminalStream class.
 */

#define KBDCHAR          (1 << 0)
#define KBDCUR           (1 << 1)
#define WINDELETE        (1 << 2)
#define BUTTONPRESS      (1 << 3)
#define BUTTONRELEASE    (1 << 4)
#define KEYPRESS         (1 << 5)
#define KEYRELEASE       (1 << 6)
#define MOTIONNOTIFY     (1 << 7)
#define EXPOSE           (1 << 8)
#define DESTROYNOTIFY    (1 << 9)
#define VISIBILITYCHANGE (1 << 10)
#define STRUCTURENOTIFY  (1 << 11)
#define MAPNOTIFY        (1 << 12)
#define MAPREQUEST       (1 << 13)
#define CONFIGUREREQUEST (1 << 14)
#define CONFIGURENOTIFY  (1 << 15)
#define MOVENOTIFY       (1 << 16)
#define RESIZENOTIFY     (1 << 17)

#include <stdio.h>
#if defined(__sparc__) && defined(__svr4__)
#include <sys/time.h>
#else /* Linux */
#include <sys/select.h>
#endif

#include <string.h>
#include <errno.h>

TerminalStream class X11TerminalStream
"A X11TerminalStream object maintains input from the
display to the application.  If receives input events
from the system and creates InputEvent objects to
record the input, and queues the InputEvents so a
program can handle them.";
X11TerminalStream instanceVariable inputPID Integer 0;
X11TerminalStream instanceVariable clientFD Integer 0;
X11TerminalStream instanceVariable eventMask Integer 0;

static int client_handle = -1;
static int event_mask = -1;

X11TerminalStream instanceMethod openInputClient (void) {
  "Start the X Window System client and server."
  __ctalkOpenX11InputClient (self);
  client_handle = self clientFD;
  event_mask = self eventMask;
  return self;
}

X11TerminalStream instanceMethod parentPane (void) {
  "Return the receiver's parent pane."
  OBJECT *receiver_alias,
    *parent_alias;
  returnObjectClass X11Pane;
  receiver_alias = self;
  if (receiver_alias -> __o_p_obj) {
    parent_alias = receiver_alias -> __o_p_obj;
  } else {
    parent_alias = NULL;
  }
  return parent_alias;
}

/*
 eventClass       XEvent      xEventData1 xEventData2 xEventData3 xEventData4 xEventData5
 BUTTONPRESS      xbutton     x           y           state       button 
 BUTTONRELEASE
 KEYPRESS         xkey        x           y           state       keycode     Modified XK Code 
 KEYRELEASE       xkey        x           y           state       keycode     Modified XK Code 
 CONFIGURENOTIFY  xconfigure  x           y           height      width       border_width
 MOVENOTIFY       xconfigure  x           y           height      width       border_width
 RESIZENOTIFY     xconfigure  x           y           height      width       border_width
 MOTIONNOTIFY     xmotion     x           y           state       is_hint
 MAPNOTIFY        xmap        event       window
 EXPOSE           xexpose     x           y           width       height      count
 */

int read_x_event (int fd, int *eventclass, int *win, int *data) {
#if 0 /***/
  int i, int_size = sizeof (int);  /* causes warning, too */
#endif  
  int i, int_size;

  int_size = sizeof (int);
  
  if (read (fd, eventclass, int_size) != int_size) {
    printf ("ctalk: read_x_event: %s.\n", strerror (errno));
    return -1;
  }
  if (read (fd, win, int_size) != int_size) {
    printf ("ctalk: read_x_event: %s.\n", strerror (errno));
    return -1;
  }
  for (i = 0; i < 5; ++i) {
    if (read (fd, &data[i], int_size) != int_size) {
      printf ("ctalk: read_x_event: %s.\n", strerror (errno));
      return -1;
    }
  }
  return SUCCESS;
}

X11TerminalStream instanceMethod queueInput (void) {
  "Retrieve a X event, and return it as an InputEvent
  object."
  int r, event_class, win, data[5];
  fd_set rfds;
  struct timeval tv;
  InputEvent new clientEvent;

  FD_ZERO(&rfds);
  FD_SET(client_handle, &rfds);
  tv.tv_sec = 0;
  tv.tv_usec = 500;
 select_again:
  if ((r = select (client_handle + 1, &rfds, NULL, NULL, &tv)) > 0) {

    /* Event_class and win are separate args to make the code more 
       readable, 'tho that quality is debatable at this point. */
    if (!read_x_event (client_handle, &event_class, &win, data)) {
    
      if (event_mask != 0) {
	if (!(event_mask & event_class)) {
	  goto select_again;
	}
      }

      clientEvent eventClass = event_class;
      clientEvent eventData = win;
      clientEvent xEventData1 = data[0];
      clientEvent xEventData2 = data[1];
      clientEvent xEventData3 = data[2];
      clientEvent xEventData4 = data[3];
      clientEvent xEventData5 = data[4];

      switch (event_class)
	{
	case CONFIGURENOTIFY:
	  if (clientEvent xEventData1)
	    self parentPane origin x = clientEvent xEventData1;
	  if (clientEvent xEventData2)
	    self parentPane origin y = clientEvent xEventData2;
	  self parentPane size x = clientEvent xEventData3;
	  self parentPane size y = clientEvent xEventData4;
	  break;
	case MOVENOTIFY:
	  self parentPane origin x = clientEvent xEventData1;
	  self parentPane origin y = clientEvent xEventData2;
	  self parentPane size x = clientEvent xEventData3;
	  self parentPane size y = clientEvent xEventData4;
	  break;
	case RESIZENOTIFY:
	  self parentPane size x = clientEvent xEventData3;
	  self parentPane size y = clientEvent xEventData4;
	  break;
	}
      self inputQueue push clientEvent;
    }
  }
}

