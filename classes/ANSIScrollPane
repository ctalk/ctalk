/* $Id: ANSIScrollPane,v 1.1.1.1 2020/05/16 02:37:00 rkiesling Exp $ -*-C-*-*/

/*
  This file is part of Ctalk.
  Copyright © 2014, 2018-2019  Robert Kiesling, rk3314042@gmail.com.
  Permission is granted to copy this software provided that this copyright
  notice is included in all source code modules.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

/*
 *  ANSIScrollPane class.  
 *
 *  A simple read-only scroll box - it can indicate the relative position
 *  within a window.  
 *
 *  The handleInput method allows you to move the thumb up and down
 *  using ANSI cursor keys, and an app could read the thumbstartLine
 *  instance variable and use that to position another window.  An app
 *  would probably need to add these routines to its own handleInput
 *  method.  If the app uses a different handleInput method, then
 *  it should display the scroll pane with the display method, which
 *  doesn't wait for user input.
 *
 *  There's no terminal-independent way to indicate that the scrollbox 
 *  can display that it has the input focus, though - maybe by drawing 
 *  or hiding the shadow behind the pane, though that occupies an extra 
 *  line of the terminal.  
 *
 *  The class is also not complicated by drawing a variable width 
 *  thumb - it's one character column wide.  An app can make the
 *  scroll pane wider, but the thumb will only be one character
 *  wide, which can look a little strange without some extra
 *  work on the dimensions.
 *
 *  The pane can also look strange if the terminal doesn't display
 *  line drawing characters, which are used for the border.
 */

ANSIWidgetPane class ANSIScrollPane
"An ANSIScrollPane displays the portion of the main
widget that is visible.  The class provides methods
that can adjust the scroll bar with user input, or
display the pane and return to the main widget's
input handler.";
ANSIScrollPane instanceVariable viewHeight Integer 0;
ANSIScrollPane instanceVariable viewWidth Integer 0;
ANSIScrollPane instanceVariable thumbHeight Integer 1;
ANSIScrollPane instanceVariable thumbStartLine Integer 0;

#define SCROLL_VIEW_START_X_OFFSET 2
#define SCROLL_VIEW_START_Y_OFFSET 2 /* Count view lines from 1. */

#define SCROLL_DEFAULT_ORIGIN_X 1
#define SCROLL_DEFAULT_ORIGIN_Y 1
#define SCROLL_DEFAULT_SIZE_X 3
#define SCROLL_DEFAULT_SIZE_Y 20

ANSIScrollPane instanceMethod dimension (int width, int height) {
  "Resize the scroll pane. Adjusts the viewHeight, the
  height of the scrollbar's interior, to leave space
  for decorations like borders and shadows."

  self addBuffer width, height, 1;

  self viewWidth = width;
  self viewHeight = height - 2;
  self size x = width;
  self size y = height;
}

ANSIScrollPane instanceMethod new (String __paneName) {
  "ANSIScrollPane constructor.  The argument, a String,
  contains the name of the new object.  Sets the
  default size of the new pane, and sets the
  viewHeight, the height of the scrollbar's interior,
  to leave space around the edges for borders and
  shadows."
  ANSIWidgetPane super new __paneName;
  __paneName paneStream openInputQueue;

  __paneName shadow = TRUE;
  __paneName border = TRUE;

  __paneName origin x = SCROLL_DEFAULT_ORIGIN_X;
  __paneName origin y = SCROLL_DEFAULT_ORIGIN_Y;
  __paneName size x = SCROLL_DEFAULT_SIZE_X;
  __paneName size y = SCROLL_DEFAULT_SIZE_Y;
  __paneName viewWidth = SCROLL_DEFAULT_SIZE_X;
  __paneName viewHeight = SCROLL_DEFAULT_SIZE_Y - 2;

  __paneName addBuffer __paneName size x, __paneName size y, 1;

  return __paneName;
}

ANSIScrollPane instanceMethod refresh (void) {
  "Update the pane's contents on the display.
  Draws the thumb starting at line thumbStartLine
  within the pane, with a height of thumbHeight."

  Integer new thumbLine;

    self super refresh;

    self reverseOnOff;

    for (thumbLine = self thumbStartLine; 
	 thumbLine < (self thumbHeight + self thumbStartLine); 
	 thumbLine = thumbLine + 1) {

      self putCharXY 2, thumbLine + 1, ' ';

      if (self border) {
	if (thumbLine > (self viewHeight - 1))
	  break;
      }	else {
	if (thumbLine > self viewHeight)
	  break;
      }
	  
    }

    self reverseOnOff;

  return NULL;
}

#ifndef ESC
#define ESC     0x1b
#endif
#define CR      0x0d
#define LF      0x0a
#define EMACS_DN 0x0e
#define EMACS_UP 0x10
#define CSI2    0x5b     /* ESC [ sequence is CSI */

ANSIScrollPane instanceMethod handleInput (void) {
  "Process input for the Pane.  Pressing Escape or Enter
  withdraws the pane from the display.  This method can
  also move a scroll bar that is drawn independently,
  using the Up and Down arrow keys."
  Integer new c;
  InputEvent new iEvent;
  String new responseString;

  returnObjectClass String;

  self paneStream rawMode;
  self paneStream openInputQueue;
  while ((c = self paneStream getCh) != EOF) {
    iEvent become self paneStream nextInputEvent;
    switch (iEvent eventClass)
      {
	/*
	 *  ESC alone should work okay... but grab 
	 *  the rest of a sequence if necessary.
	 */
      case KBDCHAR:
	switch (iEvent eventData asCharacter)
	  {
	  case ESC:
	    if ((c = self paneStream getChNoBlock) != 0) {
	      iEvent become self paneStream nextInputEvent;
	      switch (iEvent eventData asCharacter) 
		{
		case CSI2:
 		  if ((c = self paneStream getChNoBlock) != 0) {
		    iEvent become self paneStream nextInputEvent;
		    switch (iEvent eventData asCharacter) 
		      {
		      }
		  }
		  break;
		default:
		  break;
		}
	    } else {
	      self withdraw;
	      self paneStream restoreTerm;
	      self paneStream setGraphics '0';
	      return NULL;
	    }
	    break;
 	  case CR:
	  case LF:
	    self withdraw;
	    self paneStream restoreTerm;
	    self paneStream setGraphics '0';
	    return responseString;
	    break;
	  }
	break;
      case KBDCUR:
	switch (iEvent eventData)
	  {
	  case 'A':  /* Cursor up */
	    if (self thumbStartLine > 1) 
	      self thumbStartLine = self thumbStartLine - 1;
	    self refresh;
	    break;
	  case 'B':  /* Cursor dn */
	    if ((self thumbStartLine + self thumbHeight) <=  self viewHeight)
	      self thumbStartLine = self thumbStartLine + 1;
	    self refresh;
	    break;
	  default:
	    break;
	  }
	break;
      }
  }
  return NULL;
}

ANSIScrollPane instanceMethod show (int x_org, int y_org) {
  "Sets the X and Y position of the receiver object and
  display it, then waits for user input."

  self origin x = x_org;
  self origin y = y_org;
  self cursor x = SCROLL_VIEW_START_X_OFFSET;
  self cursor y = SCROLL_VIEW_START_X_OFFSET;
  self refresh;

  self handleInput;
  return NULL;
}

ANSIScrollPane instanceMethod display (int x_org, int y_org) {
  "Set the X and Y positions of the receiver object and
  displays it, then returns."

  self origin x = x_org;
  self origin y = y_org;
  self cursor x = SCROLL_VIEW_START_X_OFFSET;
  self cursor y = SCROLL_VIEW_START_X_OFFSET;
  self refresh;

   return NULL;
}

ANSIScrollPane instanceMethod cleanup (void) {
  "Delete the buffers associated with the Pane objects."
  __ctalkDeleteWinBuffer (self paneBuffer);
  __ctalkDeleteWinBuffer (self paneBackingStore);
  return NULL;
}
