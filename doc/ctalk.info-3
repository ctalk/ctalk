This is ctalk.info, produced by makeinfo version 6.5 from ctalk.texi.

INFO-DIR-SECTION Ctalk
START-INFO-DIR-ENTRY
* ctalk: (ctalk).	The Ctalk language reference manual.
END-INFO-DIR-ENTRY

This file documents Ctalk version 0.0.66.

Copyright (C) 2007-2015 Robert Kiesling

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled, "GNU
Free Documentation License."


File: ctalk.info,  Node: C Macros,  Next: Required classes,  Prev: Translating,  Up: Methods

C Macros
--------

Ctalk also provides many macros that help standardize the Ctalk-to-C
conventions.  They're defined in the 'ctalkdefs.h' include file.  To use
them, include 'ctalkdefs.h' in a source file or class library.


     #include <ctalk/ctalkdefs.h>


Some of the macro definitions in 'ctalkdefs.h' are described here.

'ARG'
     With a numeric argument, retrieves the n'th method or template
     argument from the stack; i.e., 'ARG(0)' refers to the first
     argument on the stack, 'ARG(1)' retrieves the second argument, and
     so on.

'CLASSNAME'
     Returns an object's classname.

     _Note:_ You should use this macro in new code.  While typing
     '__o_classname' directly with an 'OBJECT *' should work for a
     while, it's going to be phased out.

     Using __o_classname with an object and the '->' method is still
     okay, though.  For example:


            OBJECT *myObjRef;
            String new myString;

            /* The use of __o_classname as struct member is going away... */
            myObjRef -> __o_classname;
            /* Instead, write this. */
            myObjRef -> CLASSNAME;

            /* These are still okay, because -> is a method, not the C operator. */
            myString -> __o_classname;
            self -> __o_classname;

            /* The same is true for the SUPERCLASSNAME definition. */

            SUPERCLASSNAME(myObjRef);

            self -> SUPERCLASSNAME;
            myString ->  SUPERCLASSNAME;

'FILEEOF'
     Writes an fEOF to the 'char *' buffer given as its argument.

'FMT_0XHEX'
     When used with a function like 'sprintf ()', formats a pointer into
     its string representation.  For example:


          char buf[64];
          OBJECT *my_object_ptr;

          ....   /* Do stuff. */

          sprintf (buf, FMT_0XHEX(my_object_ptr));


     However, this macro is not very portable and using functions that
     use stdargs (e.g., printf, scanf, etc.)  can be cumbersome.
     Library functions like '__ctalkGenericPtrFromStr ()' *Note
     ctalkGenericPtrFromStr::, and '__ctalkFilePtrFromStr ()' *Note
     ctalkFilePtrFromStr::, might be faster and more reliable.

'IS_OBJECT'
     Returns True or False if its argument, a C pointer, refers to a
     valid object.

'IS_VALUE_INSTANCE_VAR'
     Returns True or False if its argument, a C pointer, refers to the
     value instance variable of an object.

'MEMADDR'
     Casts its operand to a 'void **', which is what Ctalk's internal
     function '__xfree ()' uses when freeing memory.  Normally you
     should use __ctalkFree () to free memory, but the MEMADDR macro is
     here in case you want to call __xfree () directly.  Refer to the
     entry for __ctalkFree () for details.  *Note ctalkFree::.

'STR_0XHEX_TO_PTR'
     Does the converse of 'FMT_0XHEX;' it converts the string
     representation of a pointer into an actual pointer, when used with
     a function like 'sscanf ()'.  For example:


          OBJECT *my_object;
          OBJECT *my_object_ptr;

          sscanf (my_object -> __o_value, STR_0XHEX_TO_PTR(my_object_ptr));


     Again, using stdargs functions can be cumbersome and not very
     portable.  In many cases, '__ctalkObjValPtr ()' accomplishes the
     same thing.  *Note ctalkObjValPtr::.

'SUPERCLASSNAME'
     Returns an object's superclass name.  This macro should be used
     only with OBJECT *'s, as it is rather extensive and written in C.
     Returns an empty string if the object doesn't have a superclass.
     *Note CLASSNAMEMacro::, above.

'__LIST_HEAD(List *l)'
     When given an argument that is a collection like a 'List' object,
     returns the first member of the collection.

'STR_IS_NULL(char *s)'
     Evaluates to True if the 'char *' argument evaluates to zero; i.e.,
     its value is '(null)', '0', '0x0' or the first character is an
     ASCII 'NUL' ('\0') byte.


File: ctalk.info,  Node: Required classes,  Next: Scoping,  Prev: C Macros,  Up: Methods

Required Classes
----------------

The keyword 'require' tells 'ctalk' to preload the class given as its
argument before any other classes or methods.

The following lines appear in the 'ctalklib' library.

     require Object;
     require Symbol;
     require String;

These statements tell 'ctalk' to first load the 'Object' class and its
methods, and then load the class 'Symbol' and its methods, and then
class 'String.' Ctalk loads the class and its methods at that point in
the program, before further processing of the source file.

The 'require' keyword always occurs in a global scope; that is, outside
of any method or function.


File: ctalk.info,  Node: Scoping,  Next: Templates,  Prev: Required classes,  Up: Methods

Scope of Objects
----------------

In Ctalk, an object can have a number of different scopes, and Ctalk
implements many more scopes for objects than for C variables.

All of the scopes are available when creating and modifying objects.  In
practice, however, you should only need to use a few of them.  Ctalk
uses many of the scopes internally.

These are the scopes that Ctalk implements.

'GLOBAL_VAR'
     An object that is declared globally; that is, outside of any
     function or method.
'LOCAL_VAR'
     An object declared within a function or method.
'ARG_VAR'
     An object derived from a C function argument that is used within a
     Ctalk expression.  This scope is normally used only internally.
'RECEIVER_VAR'
     An object created internally for receiver objects that do not
     already have objects.  Ctalk assigns RECEIVER_VAR objects C
     constants and constant expressions when they are used as receivers.
'PROTOTYPE_VAR'
     Used by the front end when evaluating objects that are declared as
     method parameters.
'CREATED_PARAM'
     Used mainly for temporary objects that are derived from C constants
     that are arguments to methods and functions.
'CVAR_VAR_ALIAS_COPY'
     Used for temporary and non-temporary objects that are created from
     C variables.
'CREATED_CVAR_SCOPE'
     This is a combination of CVAR_VAR_ALIAS_COPY|LOCAL_VAR scopes.
     Used for C variable objects that are only needed for the duration
     of an expression.  Also used for other values that aren't needed
     after an expression has been evaluated, like boolean method return
     values.
'SUBEXPR_CREATED_RESULT'
     Used internally for temporary objects that are the results of
     subexpressions.
'VAR_REF_OBJECT'
     Used for objects that are referred to by other objects; for example
     an object referred to by a 'Symbol' object may have this scope set.
'METHOD_USER_OBJECT'
     This scope is used mostly internally for objects that are returned
     by methods and saved as method resources.
'TYPECAST_OBJECT'
     Used internally for temporary objects that are derived from C type
     cast expressions.
You set a new object's scope with the '__ctalkCreateObject' or
'__ctalkCreateObjectInit' functions.  To change an existing object's
scope, use the '__ctalkSetObjectScope' library function to set an
object's scope.

Even though you can set an 'OBJECT *''s 'scope' directly, using these
functions insures that the object and all of its instance variables
maintain the same scope.

When creating an object with a function like '__ctalkCreateObjectInit',
you can declare a scope directly.
     result = __ctalkCreateObjectInit ("result",
                                       "Symbol", "Object",
                                       LOCAL_VAR, "0x0");
When altering the scope of an existing object, however, you should add
or subtract only that scope from the object's existing scope.

For example, to add a 'VAR_REF_OBJECT' scope to an object:
     __ctalkSetObjectScope (object, object -> scope | VAR_REF_OBJECT);
To remove the scope, use an expression like this.
     __ctalkSetObjectScope (object, object -> scope & ~VAR_REF_OBJECT);

For values of integral classes like 'Integer', 'LongInteger' or
'Symbol', '__ctalkCreateObjectInit' tries to convert the VALUE parameter
to its numeric value.  It the function can't figure out a way to convert
the argument to its numeric value, it issues a warning message.


     ctalk: can't convert d to an int.


In these cases (and in many others) it is easier to simply use an empty
string as the final parameter and then fill in the value after the
object is created, as in this example (assuming that the object is an
'Integer')..


     result = __ctalkCreateObjectInit
       (INTEGER_CLASSNAME, INTEGER_SUPERCLASSNAME, LOCAL_VAR, "");
     *(int *)result -> __o_value = int_value;
     *(int *)result -> instancevars -> __o_value = int_value;


In this case, the INTVAL, LLVAL, and SYMVAL macros can help make the
expression more readable, depending on whether the new object is an
'Integer', 'LongInteger', or 'Symbol'.


     INTVAL(result -> __o_value) = int_value;
     INTVAL(result -> instancevars -> __o_value) = int_value;



File: ctalk.info,  Node: Templates,  Next: Return values,  Prev: Scoping,  Up: Methods

Templates
---------

_Templates_ are simplified methods that are defined as macros and
written in C. They provide a method-compatible wrapper to C functions.

Template methods can appear in place of C functions in complex
expressions, and they must be used if a C function writes to its
arguments (e.g., like 'scanf(3)' or 'sscanf(3)').  For example, if we
have a template defined for the function 'myPrintMsg', then Ctalk
subsitutes the method expression wherever 'myPrintMsg' appears in an
expression like this one.


       if ((myInt = myPrintMsg (someMsg)) != 0) {
          _... do something..._
       }


After compilation, the expression looks like this.


       if ((myInt = CFunction cMyPrintMsg (someMsg)) != 0) {
          ...


You can also use 'myPrintMsg' on the left-hand side of an assignment,
like this.


       myInt = myPrintMsg (someMsg);

       _-or-_

       self = myPrintMsg (someMsg);


Additionally, you can use templates on their own, by prefacing the
method's name (the template function's alias) with its class object.


       CFuntion myPrintMsg (someMsg);


As the last example implies, templates are class methods in the
pseudo-class 'CFunction'.  Ctalk loads and caches templates where
necessary when compiling the input file, so you won't see any methods of
the 'CFunction' class unless the program calls for one or more of them.

If the template wraps a C function of the same name, then, of course,
you can also use the C function on its own.  However, templates don't
necessarily need to correspond to a C function; they can provide any set
of C expressions with a method compatible interface.

Ctalk defines a number of built-in templates for the standard C library.
You can determine if Ctalk substitutes a template for a C function by
giving the '--printtemplates' option to 'ctalk' when it compiles a
source file.  This displays the templates that the compiler loads and
caches (but doesn't necessarily send to the output).

You can define templates for application-specific C functions and
routines also.  Ctalk retrieves and caches them similarly to its
built-in templates, but they are cataloged and stored separately in each
user's '~/.ctalk/templates' directory.

As mentioned above, templates don't need to wrap a function of the same
name as the template.  That is, 'myPrintMsg', above, does not have to be
an actual function (although you need to prototype it that way).
Templates for C library functions always correspond to an actual library
function.  Program specific templates can serve as a wrapper for any
function or set of routines.

When compiling templates, the Ctalk compiler checks the user template
registry first.  If a user defines a template with the same name as one
of Ctalk's C library templates, then the compiler uses the user's
template instead of Ctalk's built-in template.  That means you can
define a template that replaces a C library template.

When creating a template for a function, you need to follow these steps.

   * Add a prototype of the function to the input file.  For example:


            OBJECT *myPrintMsg (char *text);


     Ctalk uses the prototype's argument list to check the number and
     type of arguments.  The prototype's argument list must be the same
     as the template's argument list.

   * Check that any terms in the expression before and after the
     template are compatible.  Ctalk can in most cases distinguish
     between objects and C variables in expressions.  Ctalk will try to
     warn you if it sees a mixed object/variable expression it can't
     handle.  If an expression causes an error, try breaking it into
     smaller pieces, with objects and methods in one set of terms, and C
     variables and operators in another.  Also, try making the template
     function the first term in the expression (or the first term after
     an assignment operator).  This expression, for example, is
     relatively easy to handle because everything that follows the
     template is normal C code.


          myFloat = rand () + 0.33 + (float)my_dbl;


   * Write a template for the function, and add it to the local
     directory's template cache with the 'template' command.  The
     following sections describe the format that templates use.

Writing Templates
-----------------

Templates are basically multiple line macros that provide a method
selector and method body in a #define preprocessor statement.  When
Ctalk finds a function name that has a template defined for it, it
subsitutes the template name for the function name in the expression,
adds the template's body to the output, and adds the template to the
CFunction classes' initialization.

Templates can accept arguments similarly to methods, and, like methods,
they return a C 'OBJECT *', or NULL.

Here is the template for the 'myPrintMsg()' C function.  The template
provides a wrapper for the 'printf(3)' function, and, like 'printf(3)',
returns an integer value (as an 'Integer' object).  The template
contains a few features that are part of the template protocol.


     #define myPrintMsg \n\
     cMyPrintMsg (char *text) {\n\
       char buf[255]; \n\
       int result; \n\
       OBJECT *objresult; \n\
       if (__ctalkIsObject(ARG(0))) {\n\
         result = printf ("myPrintMsg: %s\n", \n\
                           __ctalkToCCharPtr(ARG(0), 1)); \n\
         __ctalkDecimalIntegerToASCII (result, buf); \n\
         return __ctalkCreateObjectInit ("result", "Integer", \n\
                                         "Magnitude", LOCAL_VAR, buf); \n\
       } else { \n\
         __ctalkDecimalIntegerToASCII (-1, buf); \n\
         objresult =  __ctalkCreateObjectInit ("result", "Integer", \n\
                                         "Magnitude", LOCAL_VAR, buf); \n\
         __ctalkRegisterUserObject (objresult); \n\
         return objresult; \n\
       }\n\
     }


   * The template embeds newlines with the string '\n\'.  When the
     template is preprocessed, this expression joins the lines of the
     template but keeps the line endings intact.
   * The method selector, 'cMyPrintMsg' is built from the function name
     ('myPrintMsg') by uppercasing the first letter and prepending a 'c'
     to it.
   * The template must declare its arguments, like the 'char *text'
     declaration above, even though the actual arguments are objects, as
     described in the next item.
   * The expression '__ctalkIsObject(ARG(0))' checks that the argument
     to the template is a valid object.  You can acccess the template's
     arguments with the 'ARG' macro.  The first argument is 'ARG(0)',
     the second argment is 'ARG(1)', and so on.
   * The function, '__ctalkToCCharPtr()' translates the argument object
     into a 'char *' string that 'printf(3)' expects as its argument.
   * Normally templates create a return object manually, using the API
     function '__ctalkCreateObjectInit ()' or a similar function.  Note
     that '__ctalkCreateObjectInit ()' uses a 'char *' to store the
     value of the object, which is why many templates declare a buffer
     for the C function's result and use __ctalkDecimalIntegerToASCII
     ().  If the result is more complex, then the template might need to
     format it with a function like 'sprintf (3)'.  Templates can also
     return NULL, but if a program uses such a templated function in an
     assignment statement, it causes a program to generate a NULL
     argument object warning when the program is run.
   * Whenever a method returns an object it creates, it should register
     the object, for example by calling '__ctalkRegisterUserObject' as
     in the template above.  That way Ctalk can either maintain the
     object or clean it up when it needs to be deleted.  This function
     call is optional, but omitting it may cause memory leaks when the
     program is run.
   * A template can use macros, like 'LOCAL_VAR'.  The most convenient
     way to define macros is to '#include <ctalk/ctalkdefs.h>' somewhere
     in the input.  Many classes already do this, and the template can
     use the same set of macro definitions as the class libraries.

Cataloging Templates
--------------------

When looking up templates, Ctalk looks in the template registry file,
which is normally '~/.ctalk/templates/fnnames' for the name given in the
input.  If the function is aliased to another name by a macro
substitution, 'fnnames' contains the name of the alias also.

For example, on some systems, the function 'getc(3)' is a macro that
expands to '_IO_getc'.  The 'fnnames' file would then contain '_IO_getc'
as the templated function's name.

When the compiler finds the function's name or alias in 'fnnames', it
looks in the directory for the template file, which is named for the
first letter of the function's name.  That is, when looking for
'myPrintMsg's' template, Ctalk looks for a file named
'~/.ctalk/templates/m'.

The C library templates that come with Ctalk use the same scheme, except
that the template files are stored in a subdirectory of the class
library called 'libc'.  The registry is part or the run-time library, so
C library templates do not need a separate registry file.

The manual page, 'fnnames(5ctalk)' contains more information about the
'fnnames' file.  The 'templates(5ctalk)' manual page describes the
format of individual templates.


File: ctalk.info,  Node: Return values,  Next: Variable arguments,  Prev: Templates,  Up: Methods

Return Values
-------------

Internally, methods return either an 'OBJECT *' or 'NULL'.  If you write
a method that returns a C variable, Ctalk normally translates it into an
equivalent object.

Methods that return arrays declared in C generally assign the C array to
an equivalent 'Array' object.  The 'Array' object's size is the same as
the array declaration, regardless of how it the array's members are
initialized.

The 'Array' allocation only occurs for arrays declared with a subscript;
that is, a variable declared as 'int *' is not always stored in an
'Array' object, while a variable declared as 'int[SIZE]' is.

Ctalk treats C arrays declared as 'char[SIZE]' a little differently.  If
the method's definition says the return class of the method is 'Array',
then Ctalk returns an 'Array' of 'Character' objects; otherwise, it
returns a 'String' object.

Because Ctalk does not have equivalent classes for multi-dimensioned
arrays; that is, arrays with more than one subscript, it does not
translate the arrays automatically.  In these cases, the method might
return a multi-dimensioned array by assigning it to a 'Symbol' object.

Occasionally, you might need to return the result of an expression that
Ctalk can't translate automatically.  In that case, you can use the
'eval' keyword to evaluate the expression when the program is run, as in
this example.
     MyClass instanceMethod myMethod (void) {
       ...
       return eval <expression>
     }

If a method must create an object of its own to return, the object
should have the scope CREATED_PARAM, which tells the Ctalk libraries
that the the program only needs the object if it's the result of a
complete expression; if not, the program cleans up the object
automatically when it is no longer needed.  *Note
__ctalkRegisterUserObject::.


     return __ctalkCreateObjectInit ("myStringAnswer", "String",
                                     "Character", CREATED_PARAM,
                                     "The contents of the String object.");


If the program needs to store a return object for longer than the scope
that the object is called in, the method can save the object in its
object pool with the library function __ctalkRegisterUserObject, which
is described below.  *Note __ctalkRegisterUserObject::.


     String instanceMethod myMethod (void) {

       OBJECT *return_object;

       _... Do stuff. ..._

       return_object =  __ctalkCreateObjectInit ("myStringAnswer", "String",
                                     "Character", CREATED_PARAM,
                                     "The contents of the String object.");
       __ctalkRegisterUserObject (return_object);
       return return_object;

     }


Another case may be when a method needs to retrieve an object reference.
In these cases, the method may need to increase the object's reference
count.  However, such a method can also call
'__ctalkRegisterExtraObject' to save the object so its memory isn't lost
later.  The '__ctalkRegisterExtraObject' function does not, itself, set
the object's reference count, and it saves an object (not copies of
objects) only once.

Method Return Macros
....................

Alternatively, if a method needs to return an object of a particular
class, you can use the following 'methodReturn*' statements.  These are
macros that implement the statements to store and return objects which
represent different types or classes, like 'ints' as Integer objects,
'doubles' as Float objects, and so on.

These macros have been superseded in more recent versions of Ctalk,
which has the ability to insert the correct return code for any class of
object, and many C variables, functions, and expressions.  If the
compiler doesn't recognize some particular expression, however, these
macros may still be useful.

Remember that these return value functions are implemented as macros and
contain their own code block, so you can use them in places where normal
functions would cause a syntax error.

'methodReturnBoolean (int I)'
     Return a 'Boolean' object that Ctalk can evaluate to 'TRUE' or
     'FALSE' depending on the value of its argument.  Mostly deprecated;
     an expression like, '"return TRUE"' is equivalent.

'methodReturnFalse'
     Return a 'Boolean' object that evaluates to 'FALSE.' Deprecated;
     using the expression, 'return FALSE;' has the same effect.

'methodReturnInteger(int I)'
     Return an 'Integer' object with the value I.  Mostly deprecated; an
     expression like, '"return <int>"' is equivalent.

'methodReturnLongInteger(int L)'
     Return a 'LongInteger' object with the value L.  Mostly deprecated;
     an expression like, '"return <longlongint>|<longint>"' is
     equivalent.

'methodReturnNULL'
     Returns the C value 'NULL.' Deprecated; simply use the expression,
     'return NULL;' instead.

'methodReturnObject(OBJECT)'
     Return OBJECT.  Deprecated; the expression, 'return OBJECT' has the
     same effect.

'methodReturnObjectName(OBJECTNAME)'
     Return the object referred to by OBJECTNAME.  Also deprecated; like
     'methodReturObject', above, the expression, 'return OBJECT' has the
     same effect.

'methodReturnSelf'
     Returns the method's receiver, 'self'.  Slightly deprecated; simply
     using the statement, "'return self'," has the same effect.

'methodReturnString(char *S)'
     Return a 'String' object with the value S.  Mostly deprecated; an
     expression like, '"return <char *>|<string constant>"' is
     equivalent.

'methodReturnTrue'
     Return a 'Boolean' object that evaluates to 'TRUE.' Deprecated; use
     the expression, 'return TRUE;' instead.

The macros that return objects use the '__ctalkRegisterUserObject'
function to keep track of method's return values, and, if necessary,
other objects that the method creates.  *Note
__ctalkRegisterUserObject::.


File: ctalk.info,  Node: Variable arguments,  Next: Overloading,  Prev: Return values,  Up: Methods

Variable Arguments
------------------

C functions like 'scanf(3),' 'sscanf(3),' and 'fscanf(3)' have templates
that allow you to call them with a variable number of arguments.

If you need to call other C functions that use variable arguments, you
must call '__ctalkLibcFnWithMethodVarArgs' with the name of the
function, the method that contains the function's template, and the
function's return class.

The 'readFormat' method (implemented in 'String' and 'ReadFileStream'
classes) can scan a string or input file into the objects that the
program gives as arguments.  The methods also take care of
scalar-to-object translation, memory allocation, and several other
tasks.

However, programs can also accomplish the same thing manually.

For example, here is the code of the template method for 'fscanf(3),'
'cFscanf' ('CFunction' class), without the preprocessing directives.

     cFscanf (FILE *s, char *fmt,...) {
       EXPR_PARSER *parser;
       OBJECT *result_object;
       parser = __ctalkGetExprParserAt (__ctalkGetExprParserPtr ());
       result_object =
         __ctalkLibcFnWithMethodVarArgs ((int (*)())fscanf, parser -> e_method, "Integer");
       return result_object;
     }

At run time, the 'e_method' member of an expression parser contains the
method and its arguments.

The third argument of '__ctalkLibcFnWithMethodVarArgs' determines the
class of 'result_object.' For C library functions that use variable
arguments, the return class is 'Integer.'

The typecast '(int (*)())' in the first argument in front of 'fscanf' is
not strictly needed because we know that the number and types of
arguments to 'fscanf(3)' (or 'scanf(3)' or any other variable-argument
function) might vary from the '__ctalkLibcFnWithMethodVarArgs'
prototype, but it tells the compiler not to print a warning message in
that case.

If you simply need to print formatted output, the 'writeFormat' or
'printOn' methods (implemented in 'String', 'WriteFileStream' and many
other classes classes) perform format-argument translations
automatically.  Several classes also implement a 'readFmt' method, which
reads formatted input from a 'String' or 'ReadFileStream'.  *Note
writeFormat--class WriteFileStream::, and *note writeFormat--class
String::.


File: ctalk.info,  Node: Overloading,  Next: Variable method arguments,  Prev: Variable arguments,  Up: Methods

Overloading Methods
-------------------

You can always implement a method in different classes.  For example,
you can define a '+' method in 'Integer,' 'LongInteger,' 'Character,'
and 'Float' classes, and Ctalk calls the method defined for that class
of the receiver object.

Some operators also have methods implemented in a superclass, like
'Magnitude' in this case, which can provide any extra error checking and
processing that may be necessary, for example, if you try to use a unary
minus ('-') operator with a receiver like a 'Pen' or 'Rectangle' object.

When you overload methods _within_ a class, however, Ctalk does some
extra checking.  The compiler needs to examine the expression to find
out how many arguments the statement has, whether the operator is a
prefix operator, or whether the method's argument is a block of code or
a variable argument list, or whether the method uses a C calling
convention.

Ctalk can overload math operators when they are also used as prefix
operators.  Two examples of these are the unary minus ('-') and pointer
('*') methods, which have different methods than the operators that
perform subtraction and multiplication.  Writing methods that are prefix
operators is described above.  *Note Prefixes::.

Overloading Parameters
......................

Exactly when you should write methods that overload things like
parameters and variable arguments is somewhat within the philosophy of
programming languages.  For example, a common use of method overloading
based on the number of parameters is the, "getter/setter," type of
method, which retrieves and sets an object's private data.

In Ctalk, these are much less necessary than in other languages, because
Ctalk can address an object's private data with a message that has the
same name as an instance or class variable.  Since these messages bind
more tightly to receiver objects than messages that refer to methods,
these types of methods might not work the way you think they would.  So
be sure that if you write a method of this type, that the program is
actually using a method message, and not an instance data message.

Here is an example of overloading parameters.  Because the 'String'
class already has a 'concat' method (it overloads the '+' operator), we
overload the method, 'myConcat,' to concatenate one or two strings to
the receiver.

As long as the program is relatively simple, it's easy to keep track of
which methods already exist in a class.  In a bigger application,
though, you might want to define a subclass of 'String' class for this
program.


     String instanceMethod myConcat (String s1) {

       self = self + s1;

     }

     String instanceMethod myConcat (String s1, String s2) {

       self = self + s1 + s2;

     }

     int main () {
       String new s1;
       String new s2;
       String new s3;

       s1 = "Hello, ";
       s2 = "world! ";
       s3 = "Again.";

       s1 myConcat s2;
       printf ("%s\n", s1);

       s1 myConcat s2, s3;
       printf ("%s\n", s1);

     }


We should mention that the 'myConcat' method changes its receiver.  So
the arguments to the second 'myConcat' message simply get added to the
receiver again.  The output should look something like this.

     Hello, world!
     Hello, world! world! Again.


File: ctalk.info,  Node: Variable method arguments,  Next: Method functions,  Prev: Overloading,  Up: Methods

Variable Method Arguments
-------------------------

Ctalk supports variable arguments lists for methods that follow the
'stdarg.h' format for argument lists, where the argument assigned to the
last named parameter determines the number and type of the following
arguments.  (The manual page 'stdarg (3)' has more details.)


       String instanceMethod writeFormat (char *fmt, ...)


In addition, Ctalk supports argument lists with _no_ named parameters.
To implement this, Ctalk interprets an ellipsis as a variable argument
list, as usual.  It is then up to the method to interpret the arguments
as they appear on Ctalk's argument stack.

For this task, the '__ctalkNArgs' library function returns the number of
arguments that the run-time libraries place on the stack.  The method
can then interpret these arguments as necessary.

Here is the slightly abbreviated code for the 'List' : '=' method, which
should help illustrate this.  *Note List::.


     List instanceMethod = initEQ (...) {
       int n, i;
       OBJECT *arg;

       self delete;         /* Start with an empty List. */
       n = __ctalkNArgs ();

       for (i = (n - 1); i >= 0; --i) {
         arg = __ctalk_arg_internal (i);
         self push arg;
       }
     }



File: ctalk.info,  Node: Method functions,  Next: Errors,  Prev: Variable method arguments,  Up: Methods

Method Functions
----------------

Occasionally an application needs to call a method as a function.  One
example of this is a 'SignalHandler' method that the program installs as
the handler for signals from the operating system.

Methods that use a C calling convention need to do several things
differently than normal methods.
   * The method needs to use a C variable as its argument.
   * Because the method can be called with no receivers, Ctalk does not
     perform any of the normal initialization of local and parameter
     objects.
   * The method body needs to be written almost entirely in C.

In order to make Ctalk interpret a method parameter as a C variable, the
method must declare the parameter with the '__c_arg__' attribute.

_Note:_ C functions that are called by the operating system generally
need only one argument, and the '__c_arg__' attribute only works for
methods with a single parameter.

Additionally, to prevent Ctalk from adding local object initialization
code to the method, the method must contain the 'noMethodInit' keyword.

Here is an example of a method that is used as a signal handler, and
installed by the statements in 'main.'
     SignalHandler instanceMethod myHandler (__c_arg__ int signo) {
       noMethodInit;
       printf ("sigInt handler! Signal %d.\n", signo);
       return NULL;
     }

     int main () {

       SignalHandler new s;

       s setSigInt;
       s installHandler myHandler;
     }

The 'setSigInt' method (class 'SignalHandler') tells the 'SignalHandler'
object 's' that it is going to handle 'SIGINT' signals.  *Note
SignalHandler::, for the other signals that the class can handle.

The '__ctalkNewSignalEventInternal' function can generate and queue
'SignalEvent' objects, so the signal handler does not need to create
objects in order to send signal events to the application.  *Note
__ctalkNewSignalEventInternal::.

Including C Header Files
........................

Often you will need to use C functions and data types in method
functions.  However, you need to take care that if you include a C
header file, it might not be included later on if a class library
requires that file.

Normally Ctalk includes whatever C definitions it needs in the class
libraries.  However, that can cause the preprocessor to omit those
definitions from another source file, should the definitions be needed
later.

For example, in the method 'handleSignal', from the 'timeclient.c'
program, the method needs the definition of the 'time(2)' function.  If
you were to '#include' 'time.h' in the input, as in this example, then
'time.h''s definitions would not be included in the 'CTime' class later
on.
     #include <time.h>    /* Could cause errors later. */

     SignalHandler instanceMethod handleSignal (__c_arg__ int signo) {
       time_t t;
       char buf[MAXLABEL];
       noMethodInit;
       t = time (NULL);
       __ctalkDecimalIntegerToASCII (t, buf);
       __ctalkNewSignalEventInternal (signo, getpid (), buf);
       return NULL;
     }

The best way to avoid omitting dependencies is to include only the
definitions that the method needs.  In this case, you can include the
prototype of 'time(2)' in the source file.
     extern time_t time (time_t *__timer) __THROW;  /* From time.h. */

     SignalHandler instanceMethod handleSignal (__c_arg__ int signo) {
       time_t t;
       char buf[MAXLABEL];
       noMethodInit;
       t = time (NULL);
       __ctalkDecimalIntegerToASCII (t, buf);
       __ctalkNewSignalEventInternal (signo, getpid (), buf);
       return NULL;
     }

The 'time_t' type is defined with 'ctalklib', and is available to all
programs.

How to resolve multiple library definitions depends on the system's
header files, and may vary between different operating systems or
compiler versions.


File: ctalk.info,  Node: Errors,  Next: Cautions,  Prev: Method functions,  Up: Methods

Exception and Error Handling
----------------------------

There are two ways to handle error conditions in Ctalk.  You can simply
print an error or warning message in your code.  An error message
formats the text and data that you provide, the same as in a 'printf'
statement, and then exits the program.  Here is an example.
     _error ("Program exited with code %d.\n", result_code);

A '_warning' message is similar, but it prints the message and continues
processing.  *Note errorfuncs::.

The other way to handle errors is with exceptions.  This is the method
you need to use if an error occurs within a method, and the program
needs either to print a warning message, or exit.

There are two methods of class 'Exception' that handle exceptions in
application programs: 'pending' and 'handle.' There are also other API
functions, but they are mostly used internally to translate exceptions
into events that application programs can use.

These two methods are generally used together.  The method 'pending,' if
it returns 'TRUE,' signals that there is an exception pending.  Then the
function 'handle' handles the event by executing an exception handler.

Generally, events simply issue error messages.  It is up to you to
determine how the program should handle the exception: by exiting,
trying the procedure again, ignoring the condition, or some other
procedure.  Here is an example.

     Exception new e;
     ...
     inputStream openOn fileArg;
     if (e pending) {
        e handle;
       exit (1);
     }
     if (inputStream isDir) {
       printf ("Input is a directory.\n");
       exit (1);
     }
This is simply the way that Ctalk notifies the application if the method
'openOn' (class 'ReadFileStream') encountered an error while opening the
file named by its argument, 'fileArg.'

You should note that the program also checks whether the input is
actually a directory, because opening a directory as if it were a file
does not necessary cause an error condition.  The 'isDir' (class
'FileStream') method is one portable way to check if the input path is
actually a directory.

The method 'openOn,' like other methods, raises an exception if
necessary.  It does this with 'raiseException' (class
'SystemErrnoException').

Ctalk handles most 'stdio' error codes in this manner.  A program that
uses the 'ReadFileStream' and 'WriteFileStream' classes should rarely
need to use the C library's 'errno' macro, but it is still available if
applications need to check for other errors from the C libraries.

The Ctalk library also provides exceptions for missing arguments,
undefined methods, and other error conditions.  The file,
'include/except.h,' contains the definitions of Ctalk's compile and run
time exceptions.


File: ctalk.info,  Node: Cautions,  Next: Method keywords,  Prev: Errors,  Up: Methods

Cautions when Using Arguments with C Library Calls
--------------------------------------------------

The interface for C functions is in development.  You can use a C
function in a simple expression with any argument, as in the following
example.

     op1 = __ctalkGetInstanceVariableByName ("self", "value", TRUE);

However, if you want to use a C function in a complex expression, then
you must take care that the arguments to the function are C values that
correspond to a Ctalk class, unless the function has a template written
for it in the class library that performs the translations of specific
classes and data types.  *Note Templates::.

If you use a function in a method, and the compiler generates an,
"implicit declaration," warning, you can include the library function's
prototype in either the source file or in 'classes/ctalklib'.

Cautions when using 'Array' class elements in C expressions.
------------------------------------------------------------

If you want to use an 'Array' element in a C expression, you need to
take care that the value of the element translates to a 'void *,' which
is the C type that Ctalk returns the values of these elements as.

That means elements of class 'LongInteger' might be truncated, and
'Float' class array elements cannot be translated in this manner.

If array elements of these classes occur in C expressions, Ctalk prints
a warning at run time.

In these cases, it is necessary to convert the values to a compatible
pointer type, for example an object of class 'String.'


File: ctalk.info,  Node: Method keywords,  Next: Documentation,  Prev: Cautions,  Up: Methods

Method Keywords
---------------

'__c_arg__'
     Treat the next method argument as a C argument.  *Note Method
     functions::.

'classMethod'
     The 'classMethod' keyword declares a method, as described above.

'classVariable'
     Adds a class variable definition to a class.  This method needs to
     be used globally, when a class is declared.  The syntax is:

          PARENT_CLASS classVariable NAME [NATIVE_CLASS|TYPECAST_EXPR]
          [INITIAL_VALUE] [DOCSTRING] ;

     For example:


          FileStream class ReadFileStream;

          _..._

          ReadFileStream classVariable stdinStream Symbol 0x0;


     The value of INITIAL_VALUE can be either a constant or an
     expression that evaluates to a constant.

     Ctalk can also translate a typecast into a native class for the
     variable.  Also refer to the entry for 'instanceVariable', below.
     *Note InstanceVariableKeyword::.

     Similarly, the DOCSTRING element is also optional.  *Note
     VariableDocStrings::.

'eval'
     Do not try to evaluate the following statement until run time.
     Methods can use this keyword if they need to wait until run time to
     determine an receiver's class and are not able to alias the object
     or otherwise inform the front end of the receiver's class before
     the program is run.

'instanceMethod'
     The 'instanceMethod' keyword declares a method, as described above.

'instanceVariable'
     Adds an instance variable definition to a class.  This method needs
     be used when the class is declared.  The syntax is:

          PARENT_CLASS instanceVariable NAME
          [NATIVE_CLASS|TYPECAST_EXPR] [INITIAL_VALUE] [DOCSTRING] ;

     For example:

          FileStream class ReadFileStream;
          ReadFileStream instanceVariable pos LongInteger 0L;

     The value of INITIAL_VALUE can be either a constant or an
     expression that evaluates to a constant.

     You can also use a typecast in place of the variable's
     NATIVE_CLASS. Ctalk can translate most builtin C types or typedefs
     to a class, but for less common data types, Ctalk will translate a
     pointer to the type as a Symbol object.

     Similarly, the DOCSTRING element is also optional.  *Note
     VariableDocStrings::.

     Note that the 'instanceVariable' method does not _create_ any
     variables.  Ctalk only creates instance variables for each object
     when it receives a constructor message (e.g., 'new') by a program.

'noMethodInit'
     Do not include method initialization code for the method.  *Note
     Method functions::.

'require'
     Require a class to be loaded before any other classes or methods.

'returnObjectClass'
     Set the return class of a method to the argument if it is different
     than the receiver class.  *Note Return values::.

'self'
     Return the method's receiver object.  In version 0.0.66, you can
     also use 'self' in arguments as a synonym for the receiver of the
     statement, as in this example.
          String new path;
          path = "/home/user/joe";

          printf ("%s", path subString 1, self length - 1);

     The use of 'self' in method arguments is experimental in version
     0.0.66, and it should be used with caution.

'super'
     The keyword 'super' has two different meanings.  It can modify a
     method, as in the following example.

          MyReceiverClass super new instanceObject;

     'super' can also represent the receiver's superclass object, so it
     can appear as a receiver, as in this example.

          return super new checksum;


File: ctalk.info,  Node: Documentation,  Next: Ctalk library,  Prev: Method keywords,  Up: Methods

Documenting Methods, Classes, and Variables
-------------------------------------------

Ctalk allows you to add publicly visible comments to methods, classes,
and instance and class variables.  These comments are different than
comments within the code that may have meaning only for specific
routines

If you want to add documentation for a class, Ctalk allows documentation
string is class declarations (see below).  *Note ClassDocStrings::.

You can also document instance and class variables.  *Note
VariableDocStrings::.

When documenting methods, Ctalk recognizes both C-style comments and C++
comments.

In addition, Ctalk recognizes a character string at the beginning of a
method or function as a public documentation string, and it adds a few
rules for comments and documentation strings that make it easier to
describe methods when browsing the class library.

Basically, if the method contains a comment or documentation string at
the start of a method or function body, then that style of comment is
used as the method's public documentation when it is referenced by other
programs.


     MyClass instanceMethod myMethod (Object myArg) {
       /* Using a C-style comment at the start of a method body,
          or a series of C-style comments, makes those comments
          available as the method's public documentation. */
       /* The public documentation can span several comments if the
          comments appear before any lines of source code. */

          _Method body..._


       /* That allows you to add (perhaps temporary) comments elsewhere
          in the method that do not appear as part of the method's
          public documentation. */

          _More lines of code..._

     }

     MyClass instanceMethod myMethod (Object myArg) {
       // A series of C++ comments before the first line of
       // code also can appear as the method's public
       // documentation.

          _Method body..._

       /* A different style of comment anywhere else within
          the method does not appear in the method's public
          documentation. */
     }

     MyClass instanceMethod myMethod (Object myArg) {
       "A character string at the start of the method also gets
        interpreted as a public documentation string."

        _Method body..._
     }


The Ctalk libraries contain several methods that can be useful when
printing documentation.  Particularly, the method 'methods' (in 'Object'
class) and 'methodSource' (in 'Application' class) can retrieve the
names of the methods in a class and their source code, and the method
'tokenize' (in 'String' class) can split the source code into tokens,
which you can then process.

Here's a simple application that retrieves a method's source code and
splits it into tokens.


     int main () {

       Application new app;
       String new methodStr;
       List new tokens;

       /* The first argument to methodSource is the class name, and
          the second argument is the method name. */
       methodStr = app methodSource "Application", "methodSource";

       methodStr tokenize tokens;

       tokens map {
         printf ("%s ", self);  /* This example simply prints the method's
                                   tokens, but you can perform any processing
                                   or formatting that you want here. */
       }
       printf ("\n");
     }


If you want only the prototype of the method; that is, the declaration
and the argument list, feed the output of 'methodSource' to
'methodPrototypes', which is also in class 'Application.' The
'methodPrototypes' method takes a string with the source code of a
method or methods as input, which means you can also extract all of the
prototypes of a class library.


     int main () {

       Application new app;
       String new src;
       String new prototypes;

       src = app methodSource "Object", "basicNew";

       prototypes = app methodPrototypes src;

       printf ("%s\n", prototypes);

     }


There are a few caveats:

The 'methods' method is designed to be quick, so it only finds methods
whose declaration appears on one line.  If you prefer method
declarations spread over several lines, you can read the entire class
file using 'readAll' (class 'ReadFileStream').  *Note ReadFileStream::.
Then you can tokenize the entire class file at once, which disregards
any line formatting, although tokenizing an entire file takes
considerably longer.

Also, The 'methodPrototypes' method does not do any special formatting;
it simply collects the prototypes into one 'String' object.

Class Documentation
...................

Ctalk also allows you add documentation to class declarations.  The
declaration syntax allows you to add an option character string between
the class name and the closing semicolon.  The syntax of a class
documentation is the following.


     SUPERCLASSNAME class CLASSNAME <DOCSTRING>;


For example, here is the class declaration of 'WriteFileStream' which
contains a documentation string.


     FileStream class WriteFileStream   "Defines the methods and instance
     variables that write data to files. Also defines the class variables
     stdoutStream and stderrStream, which are the object representation
     of the standard output and standard error streams.";


The 'classdoc' program can print the documentation string of a class if
it provides one.  The 'classdoc(1)' manual page provides more
information.

Instance and Class Variable Documentation
.........................................

You can add an optional documentation string to an instance or class
variable's declaration by enclosing the text within quotes immediately
before the final semicolon.


     WriteFileStream classVariable stdoutStream
     "Defines an object that contains the value of the system's standard output";


The main thing to watch out for is, syntactically, a documentation
string could be mistaken for a variable's initial value if one isn't
included in the definition.  For example, this definition uses a
character string as its initial value.


     ObjectInspector instanceVariable promptString String "> ";


So in this case, if you wanted to add a documentation string, you would
also need to include an initial value, otherwise the documentation
string would be mistaken for the variable's value.


                                                           /* Incorrect! */
     ObjectInspector instanceVariable promptString String
     "The string that is displayed as the object inspector's
     prompt";


Instead, you need to add both an an initial value, and the documentation
string.


                                                                /* Correct. */
     ObjectInspector instanceVariable promptString String "> "
     "The string that is displayed as the object inspector's
     prompt";



File: ctalk.info,  Node: Ctalk library,  Prev: Documentation,  Up: Methods

Ctalk Library Reference
-----------------------

This section describes some of the Ctalk library functions that you can
use in methods and, in many cases, in Ctalk programs generally.

The file 'classes/ctalklib' contains the prototypes of the library
functions.

'__argvName (char *S)'
     Set the name of the program at run time.  Normally this is the same
     as 'argv[0]'.

'__argvFileName (void)'
     Returns the name of the executable program.

'__arg_trace (int STACK_INDEX)'
     Prints the object at argument stack index STACK_INDEX.

'__ctalkAddClassVariable (OBJECT *CLASS_OBJECT, char *NAME, OBJECT *VARIABLE_OBJECT)'
     Add a class variable VARIABLE_OBJECTto CLASS_OBJECT.

'__ctalkAddInstanceVariable (OBJECT *OBJECT, char *NAME, OBJECT *VARIABLE_OBJECT)'
     Add an instance variable to an object.  Note that the function adds
     a copy of VARIABLE_OBJECT to OBJECT.

'__ctalkAliasObject (OBJECT *RCVR, OBJECT * TARGET)'
     Set the RCVR object's label to the TARGET object, so the TARGET
     object can be referred to by the RCVR object's identifier.  This
     function does not require RCVR to be the actual receiver of the
     method, so the results can be unpredictable if it is used in a
     context other than where 'self' is the first argument.  To insure
     that RCVR is the actual receiver of the calling method, use
     '__ctalkAliasReceiver (),' below.

'__ctalkAliasReceiver (OBJECT *RCVR, OBJECT * TARGET)'
     Like '__ctalkAliasObject (),' above, but the function checks that
     RCVR is the actual receiver of the calling method and returns
     'ERROR' ('-1') if it isn't.  Here is an example.


          String instanceMethod = setEqual (OBJECT *__stringArg) {
            // String assignment method. Assigns the argument  to the
            // receiver label.  Also does some String-specific
            // semantic stuff for different sorts of String objects.
            // Returns the new String object.

            __ctalkStringifyName (self, __stringArg);
            if (__ctalkAliasReceiver (self, __stringArg) != 0) {
              __ctalkAddInstanceVariable (self, "value", __stringArg);
              return self;
            } else {
              return __stringArg;
            }
          }


'__ctalkANSIClearPaneLine (OBJECT *PANEOBJECT, int LINENUMBER)'
     Clear (to spaces) the pane line at LINENUMBER.

'__ctalkANSITerminalPaneMapWindow (Object *CHILDPANE)'
     Map CHILDPANE onto the receiver pane.  The child pane's upper
     left-hand corner origin is relative to the receiver pane's origin.
     The receiver pane should be large enough to completely enclose the
     child pane.  The child pane is displayed at the next 'refresh'
     message.

'__ctalkANSITerminalPaneUnmapWindow (Object *CHILDPANE)'
     Removes the pane given as the argument from the receiver pane.

'__ctalkANSITerminalPanePutChar (int X, int Y, char C)'
     Store character C at coordinates X,Y in the pane's content region.
     The character will be displayed after the next 'refresh' message.

'__ctalkANSITerminalPaneRefresh (void)'
     Display the contents of 'ANSITerminalPane' objects on the display,
     including text and window decorations if any.

'__ctalkANSITerminalPaneUnMapWindow (Object CHILDPANE)'
     Unmap CHILDPANE from the receiver pane's visible area.  The child
     pane is not deleted; it is simply not displayed at the next
     'refresh' message.

'__ctalkARB (void)'
     Returns a boolean value of true if the GLEW libraries support the
     GLEW_ARB_vertex_shader and GLEW_ARB_fragment_shader extensions.
     Programs must call the '__ctalkInitGLEW' function before using this
     function.

'__ctalkArgBlkReturnVal (void)'
     Called by the calling function of an argument block to retrieve the
     block's return value, if any.

'__ctalkArgBlkSetCallerReturn (void)'
     Called by a map method to indicate to a calling method or function
     that an argument block has requested a return from the function or
     method that called it.  Map-type methods for general use should
     include a call to this function, which provides argument block
     support for 'return' statements.  Refer to
     '__ctalkRegisterArgBlkReturn', below, and the 'String : map' method
     for an example of these functions' use.

'__ctalkArrayElementToCCharPtr (OBJECT *ARRAY_ELEMENT)'
'__ctalkArrayElementToCChar (OBJECT *ARRAY_ELEMENT)'
'__ctalkArrayElementToCDouble (OBJECT *ARRAY_ELEMENT)'
'__ctalkArrayElementToCInt (OBJECT *ARRAY_ELEMENT)'
'__ctalkArrayElementToCLongLongInt (OBJECT *ARRAY_ELEMENT)'
'__ctalkArrayElementToCPtr (OBJECT *ARRAY_ELEMENT)'
     Translates the object ARRAY_ELEMENT's value to a C 'char *',
     'char', 'double', 'int', 'long long int', or 'void *'.

'__ctalkBackgroundMethodObjectMessage (OBJECT *RCVR, OBJECT *METHOD_INSTANCE)'
     Perform a method call by sending RCVR the message defined by
     METHOD_INSTANCE, which is a previously defined 'Method' object.
     *Note Method::.

     The function starts METHOD_INSTANCE as a separate process, which
     runs concurrently with the process that launched it.  The
     background process exits when METHOD_INSTANCE returns.

     The METHOD INSTANCE argument is a normal method.  However,
     '__ctalkBackgroundMethodObjectMessage' does not save the return
     object before METHOD_INSTANCE exits, and METHOD_INSTANCE, does not
     take any arguments.

     The function returns the PID of the child process, or '-1' on
     error.

     This function is used by the method 'backgroundMethodObjectMessage'
     (class 'Object').  Refer to the description of the method for more
     information.  *Note Object::.

     For examples of method instance calls, *Note methodObjectMessage::.

'__ctalkBackgroundMethodObjectMessage2Args (OBJECT *RCVR, OBJECT *METHOD_INSTANCE, OBJECT *ARG1, OBJECT *ARG2)'

     This function combines a background method instance call with two
     arguments.  Its function is similar to
     '__ctalkMethodObjectMessage', below.

     For examples of method instance calls, *Note methodObjectMessage::.

'__ctalkCallMethodFn (METHOD *METHOD)'
     Used internally to perform a method call.

'__ctalkCallingFnObjectBecome (OBJECT *OLD, OBJECT *NEW)'
     Used by 'Object' : 'become' to translate the receiver when 'become'
     is called within a function.

'__ctalkCallingInstanceVarBecome (OBJECT *OLD, OBJECT *NEW)'
     Used by 'Object' : 'become' to translate the receiver when the
     receiver is an instance variable.

'__ctalkCallingMethodObjectBecome (OBJECT *OLD, OBJECT *NEW)'
     Used by 'Object' : 'become' to translate the receiver when
     'become's' receiver is an object declared in another method.

'__ctalkCallingReceiverBecome (OBJECT *OLD, OBJECT *NEW)'
     Used by 'Object' : 'become' to translate the receiver when
     'become's' receiver also the receiver of the method that calls
     'become'.

'__ctalkCBoolToObj (bool B)'
     Create a 'Boolean' object with the boolean (either true or false)
     value of the argument.

'__ctalkCCharPtrToObj (char *S)'
     Create a String object from a C 'char *'.

'__ctalkConsoleReadLine (OBJECT *string_object, char *prompt_string)'
     Prints the prompt PROMPT_STRING to standard output of a terminal,
     then reads a line of text from the standard input, until it
     encounters a newline, and saves it as the value of STRING_OBJECT.

     If Ctalk is built with support for the GNU readline libraries, the
     function provides the readline libraries' command line editing and
     history facilities.  Otherwise, the function reads input up to a
     newline using only the basic text input and editing facilities
     provided by the stdio functions.

'__ctalkCreateArg (OBJECT *RECEIVER, char *METHODNAME, char *ARG_EXPR)'
     Create an argument for the following '__ctalk_method' or
     '__ctalk_primitive_method' function call.  Unlike '__ctalk_arg',
     this function always creates a new object.  Its primary use is to
     create local method objects that are fully instantiated into a
     class by a following 'new' method.

'__ctalkCreateArgA (OBJECT *RECEIVER, char *METHODNAME, char *ARG_EXPR)'
     Like '__ctalkCreateArg', creates local method objects that are
     instantiated into a class by a following 'new' method.  The
     '__ctalkCreateArgA ()' function is more specialized so it can be
     used when performing method cache fixups.

'__ctalkCDoubleToObj (doubleD)'
     Create a Float object from a C 'float' or 'double'.

'__ctalkCharRadixToChar (char *S)'
     Return the character as a C 'char' that is represented by the
     formatted argument.

     If S contains a number of more than one digit, then it is converted
     from an integer to the ASCII code of a character.

'__ctalkCharRadixToCharASCII (char *S)'
     Return a C string with a lexically correct character - a character
     enclosed in single quotes - from the formatted argument.  If S is
     already a character, then no conversion is done.

     If S contains a decimal number of more than one digit, then it is
     converted from a decimal integer to a character.

'__ctalkCFUNCReturnClass (CFUNC *FN, char *BUF)'
     Return in BUF the name of the class that corresponds to FN's return
     type.

'__ctalkCIntToObj (int I)'
     Create an 'Integer' object from a C 'int.'

'__ctalkCLongLongToObj (long long int L)'
     Create a 'LongInteger' object from a C 'long long int.'

'__ctalkClassMethodInitReturnClass (char *RCVR_CLASS, char *METHOD_NAME, char *RETURN_CLASS);'
     Set the return class of METHOD in RCVR_CLASS to RETURN_CLASS.

'__ctalkClassMethodParam (char *RCVRCLASSNAME, char *METHODNAME, OBJECT *(*SELECTOR_FN)(), char *PARAMCLASS, char *PARAMNAME, int PARAM_IS_POINTER)'
     Define a method parameter when initializing a class method.
     Normally the compiler generates this call for inclusion in
     '__ctalk_init ()' for the method initialization at run time.

'__ctalkClassObject (OBJECT *OBJECT)'
     Returns the class object of the argument.

'__ctalkClassVariableObject (OBJECT *var)'
     Return the object that 'var' is a class variable of, or NULL.

'__ctalkFree (void *P)'
     This is an API wrapper for Ctalk's memory free routines.  Much of
     the old code in the class libraries still uses __xfree () (which
     now gets macroized to __ctalkFree () anyway), but you should use
     __ctalkFree () in new class libraries.

     In cases where you prefer to call __xfree () directly, then you
     need to use the MEMADDR macro to cast the argument to a 'void **',
     i.e.,


            char *my_buf;

            ... do stuff ...

            __xfree (MEMADDR(my_buf));


     which is what __ctalkFree () does automagically.

'__ctalkLocalTime (long int UTCTIME, int *SECONDS_RETURN, int *MINUTES_RETURN, int *HOURS_RETURN, int *DOM_RETURN, int *MON_RETURN, int *YEARS_RETURN, int *DOW_RETURN, int *DOY_RETURN, int *HAVE_DST_RETURN)'
     Returns the system's local time in the arguments that return the
     current second, minute, hour, day of the month, month, year, day of
     the week, day of the year, and (T/F) whether the time uses daylight
     savings time.

     The first argument is the system's UTC time, as returned by the
     'time ()' library function.

'__ctalkCloseGLXPane (OBJECT *PANE_OBJECT)'
     Releases the pane's GLX context and the context's XVisualInfo
     struct, and deletes the PANE_OBJECT'S X11 window.

'__ctalkCloseX11Pane (OBJECT *PANE_OBJECT)'
     Deletes and closes subpanes of a main X11 window.

'__ctalkCopyPaneStreams (OBJECT *SRC, OBJECT *DEST)'
     Copy the SRC 'inputHandle' and 'outputHandle' values to DEST.

'__ctalkCopyCVariable (CVAR *C)'
     Return a 'CVAR *' to a copy of the argument.

'__ctalkCopyObject (OBJREF_T SRC, OBJREF_T DEST)'
     Return an 'OBJECT *' to a copy of the argument.

     _Note:_ When copying normal objects, you can translate them to
     'OBJREF_T' types with the 'OBJREF' macro.  When copying method
     arguments, it is necessary to alias the argument to an object.  See
     'at' (class 'Array') and 'atPut' (class 'AssociativeArray') for
     examples.

'__ctalkCreateArgEntry (void)'
     Used internally to create an ARG type, which maintains a method's
     argument entries.

'__ctalkCreateArgEntryInit (OBJECT *OBJ)'
     Creates an internal method argument entry and initializes the entry
     to the argument object.

'__ctalkDeleteArgEntry (ARG *ARG)'
     Delete a method ARG entry.

'__ctalkCreateObject (char *NAME, char *CLASS, char *SUPERCLASS, int SCOPE)'
     Create an object without instance variables with name NAME of class
     CLASS and superclass SUPERCLASS with scope SCOPE.

'__ctalkCreateObjectInit (char *NAME, char *CLASS, char *SUPERCLASS, int SCOPE, char *VALUE)'
     Create an object with name NAME of class CLASS and superclass
     SUPERCLASS with scope SCOPE and value VALUE.

     For more information about how to use '__ctalkCreateObjectInit',
     refer to the examples in *Note Scoping::, and other examples in
     this manual.

'__ctalkCreateWinBuffer (int X_SIZE, int Y_SIZE, int CELL_SIZE)'
     Create a buffer for a 'Pane' object's window.

'__ctalkCreateGLXMainWindow (OBJECT * PANE_OBJECT)'
     Normally called by the 'initialize' method in class
     'GLXCanvasPane', creates a X11 window with a GLX visual.  The
     visual's default attributes are: 'GLX_RGBA', 'GLX_DEPTH_SIZE', 24
     bits per pixel, and 'GLX_DOUBLEBUFFER'.  These attributes are
     adjustable via the instance variables in 'GLXCanvasPane' class.

     The SELF_OBJECT argument must be an instance of 'GLXCanvasPane'
     class.  This function fills in the object's 'visualInfoPtr'
     instance variable with a pointer to the 'XVisualInfo' structure
     specified by SELF_OBJECT.  *Note GLXCanvasPane::.

     Called by the 'initialize' methods (class 'X11Pane') to create a X
     window.  Returns the window system's ID for the window, an 'int'.

     If a program doesn't specify a window size, then default size is
     250x250 pixels.  If the program doesn't specify a location for the
     window, then this function sets the window's _X,Y_ origin to 0,
     although the actual window placement depends on the machine's
     window manager.  *Note ctalkX11SetSizeHints::.

     Application programs can provide a window geometry specification
     which is used to set the window's size and placement *Note
     parseX11Geometry::.

     If X11PANE_OBJECT contains a 'background' or 'backgroundColor'
     instance variable or resource, the function sets the window's
     background color to the X11 color named in that value.

     If a program doesn't specify a foreground and background color, the
     window's background is set to white and the foreground is set to
     black.

     Refer also to the '__ctalkCreateX11MainWindowTitle' and
     '__ctalkCreanteX11SubWindow' functions.  *Note X11Pane::.

     'char *'TITLE) Similar to '__ctalkCreateX11MainWindow', except that
     if TITLE is non-null, the function uses it to set the new window's
     title.  Returns the X resource ID of the new window, an 'int'.
     *Note X11Pane::.

     Creates an X subwindow that has the parent window defined by
     PARENTPANE_OBJECT'S 'xWindowID' instance variable.  The dimensions
     of the subwindow within the parent window are determined by the
     SUBPANE_OBJECT'S 'origin' and 'size' instance variables.  Creates a
     new graphics context for the window and saves its address in the
     SUBPANE_OBJECT'S 'xGC' instance variable.

     If X11PANE_OBJECT contains a 'background' or 'backgroundColor'
     instance variable or resource, the function sets the window's
     background color to the X11 color named in that value.

     If a program doesn't specify a foreground and background color, the
     window's background is set to white and the foreground is set to
     black.

     Then the function initiazes and clears the window to the value of
     the 'backgroundColor' instance variable.  Otherwise, the function
     sets the window's color to black and clears the window.

     Also sets the display depth in the 'depth' instance variable, and
     the ID of the subwindow in the 'xWindowID' instance variable.

'__ctalkCriticalExceptionInternal (MESSAGE *ORIG, EXCEPTION EX, char *TEXT)'
     Raise a critical exception at run time.  The argument ORIG should
     be 'NULL.' This function should be called from a method.  This
     function saves a snapshot of the _calling method's_ run-time
     context.

     For an example, see 'raiseCriticalException' (class
     'SysErrnoException') in the Ctalk class library, which calls
     '__ctalkCriticalSysErrExceptionInternal,' below.

'__ctalkCriticalSysErrExceptionInternal (MESSAGE *ORIG, int ERRNO, char *TEXT)'
     A convenience function that calls
     '__ctalkCriticalExceptionInternal' with the Ctalk exception that
     corresponds to ERRNO, the C library's error macro.

'__ctalkCVARReturnClass (CVAR *VAR, char *BUF)'
     Return in BUF the name of the class that corresponds to VAR's data
     type.

     '__ctalkDecimalIntegerToChar' C function
'__ctalkDecimalIntegerToChar (int N, char *BUF)'
     Formats the ASCII 8-bit character representation of N as the first
     character in BUF, and returns '(char)n' as its return value.  If N
     is greater than 255 (0xff hex), returns the formatted character
     '(char)(n & 255)'.

'__ctalkDecimalIntegerToASCII (int I, char *S);'
     Format an ASCII representation of I, a decimal integer, in S.

'__ctalkLongLongToDecimalASCII (long long int L, char *BUF);'
'__ctalkLongLongToHexASCII (long long int L, char *BUF, bool UPPERCASE);'
'__ctalkLongToDecimalASCII (long int L, char *BUF);'
'__ctalkLongToHexASCII (long int L, char *BUF, bool UPPERCASE);'
     Format a decimal or hexadecimal ASCII representation of L, a long
     long int, in BUF, and return BUF.

     When using '__ctalkLongLongToHexASCII,' or '__ctalkLongToHexASCII,'
     if UPPERCASE is 'true', format the number using uppercase letters;
     e.g., '0XFFFF'; otherwise format the number using lowercase
     letters: '0xffff'.

'__ctalkDefaultSignalHandler (int SIGNO)'
     Set the handler of signal SIGNO to the system's default handler.

'__ctalkDefineClassMethod (char *CLASS, char *NAME, OBJECT *(*)(fn), int REQUIRED_ARGS);'

     Define a class method in class CLASS with name NAME, which calls
     the function FN, and requires REQUIRED_ARGS arguments.

'__ctalkDefineClassVariable (char *CLASS, char *NAME, char *VARCLASS, char *INIT_EXPR);'

     Define a class variable in class CLASS with NAME.  The variable is
     an object of class VARCLASS with the initial value INIT_EXPR.

'__ctalkDefineInstanceMethod (char *CLASS, char *NAME, OBJECT *(*)(fn), int REQUIRED_ARGS);'

     Define an instance method in class CLASS with name NAME, which
     calls the function FN, and requires REQUIRED_ARGS arguments.

'__ctalkDefineInstanceVariable (char *CLASS, char *NAME, char *VARCLASS, char *INIT_EXPR);'

     Define an instance variable in class CLASS with NAME.  The variable
     is an object of class VARCLASS with the initial value INIT_EXPR.

'__ctalkDefinedClassMethodObject (OBJECT *RCVR, char *CLASSNAME, char *METHOD_NAME)'
     Initialize a 'Method' object from the class method METHOD_NAME from
     class CLASSNAME.  Note that this function only works for methods
     that are already defined.  *Note Method::.

'__ctalkDefinedInstanceMethodObject (OBJECT *RCVR, char *CLASSNAME, char *METHOD_NAME)'
     Initialize a 'Method' object from the instance method METHOD_NAME
     from class CLASSNAME.  Note that this function only works for
     methods that are already defined.  *Note Method::.

'__ctalkDefineTemplateMethod (char *CLASSNAME, char *NAME, OBJECT *(*CFUNC)(), int REQUIRED_ARGS, int N_ARGS)'
     Defines a template method.  First calls __ctalkDefineClassMethod
     (), then performs additional initialization needed for templates.

'__ctalkDeleteLastExceptionInternal (void)'
     Deletes the most recent exception from Ctalk's internal exception
     list.

'__ctalkDeleteObject (OBJECT *OBJECT)'
     Delete an object, and any objects it refers to, if they are not
     referenced elsewhere.  It's a good idea to call '__objRefCntZero'
     first.  The object then won't be showing any extra references.

     Zeroing the reference count first causes the function to delete the
     object _completely_.  It bypasses Ctalk's internal mechanisms that
     decide when objects are no longer needed.  Don't use these
     functions unless you know where the object and any objects it
     refers to are declared.

     It should seldom be necessary to remove an object from a particular
     scope manually anyway.  But in that case, call '__objRefCntDec'
     instead, and then let Ctalk try to clean up the object when it goes
     out of scope.

     For example, to delete a scratch object using C,


          Object new tmpObject;
          OBJECT *tmpObject_alias;

          tmpObject_alias = tmpObject;

          __objRefCntZero (OBJREF(tmpObject_alias));
          __ctalkDeleteObject(tmpObject_alias);


     Translating the object to C should work in all cases, regardless of
     the surrounding code.  Of course, you can also use the 'delete'
     method (class 'Object') with many simple C expressions.


          Object tmpObject;
          OBJECT *tmpObject_alias;

          tmpObject delete;

          _..or.._

          tmpObject_alias delete;

          _..or even this expression.._

          tmpObject_alias -> instancevars delete;


     Deletes OBJ if there are no references to it, or if this is the
     last reference to the object.  In this case, the function works
     similarly to '__ctalkDeleteObject'.  Otherwise, the function
     decreases the object's reference count by 1.

'__ctalkDeleteObjectList (OBJECT *OBJECT)'
     Delete an object and any objects that link to it.

'__ctalkDeleteWinBuffer (OBJECT *PANEBUFFER_INSTANCE_VAR)'
     Deletes a 'paneBuffer' backing store allocated when a subclass of
     'Pane' creates an object.

'__ctalkDocDir (void)'
     Returns a 'char *' that contains the path where the Ctalk-specific
     documentation is installed on the system (i.e., documentation other
     than man pages and Texinfo manuals).

'__ctalkDoubleToASCII (double D, char *S);'
'__ctalkFloatToASCII (float F, char *S);'
'__ctalkLongDoubleToASCII (long double F, char *S);'
     Format an ASCII representation of the first argument in S.  Returns
     S.

     '__ctalkEnterArgBlockScope' C function
'__ctalkEnterArgBlockScope (void)'
     Ctalk inserts this call at the beginning of argument blocks.
     Checks that the block call is the result of an inline method call
     and sets the run-time stack's RTINFO structure to indicate a block
     call with the correct stack frame for the block's scope.

     '__ctalkEntryIconXPM' C function
'__ctalkEntryIconXPM (int ICONID)'
     Returns a 'char **' with the contents of an eye or slashed eye icon
     used when X11TextEntryPane objects echo dots.  The argument,
     ICONID, may be one of the following.


          #define ENTRY_ICON_EYE_NON       0
          #define ENTRY_ICON_EYE_OK        1
          #define ENTRY_ICON_EYE_SLASHED   2


     The definitions are included in 'x11defs.h' and 'ctalkdefs.h',
     which should be included in classes or programs with a statement
     like this.


          #include <ctalk/ctalkdefs.h>


     '__ctalkExec' C function
'__ctalkExec(char *CMDLINE, OBJECT *STROBJECT)'
     Executes the command line given as the argument and waits for the
     subprocess to finish.  If the STROBJECT argument is non-NULL, the
     function saves the subprocesses' standard output as the object's
     'value'.  Normally, STROBJECT should be a 'String' object.

     If the STROBJECT argument is NULL, '__ctalkExec' reads and prints
     the subprogram's standard output to the terminal's standard output.

     '__ctalkExec' supports the redirection operators '>' or '>>', which
     send the subprocess's standard output to the file given as the
     redirection operator's target.  If CMDLINE is a shell script, it is
     executed by a sub-shell using the 'system(3)' library function.

     '__ctalkExitArgBlockScope' C function
'__ctalkExitArgBlockScope (void)'
     Ctalk inserts this function, which is currenly a no-op, as the last
     function call in an argument block.

     '__ctalkExpandPath' C function
'__ctalkEpandPath (char *DIRGLOBPATTERN, char *EXPANDEDPATHOUT)'
     Expands DIRGLOBPATTERN into the full path name, and stores it in
     EXPANEDPATHOUT.  Returns the value of EXPANDEDPATHOUT.

'__ctalkErrorExit (void)'
     Cleans up the program's immediate object environment before a call
     to the C 'exit(3)' function.

'__ctalkEvalExpr (char *EXPR)'
     Evaluate EXPR and return an 'OBJECT *' to the result.

'__ctalkEvalExprU (char *EXPR)'
     Like '__ctalkEvalExpr', above, but '__ctalkEvalExprU' returns a C
     NULL instead of a null result object when an expression evaluates
     to 0.

'__ctalkExceptionInternal (MESSAGE *MSG, EXCEPTION E, char *TEXT)'
     Generate an exception of type E.  Exceptions are listed in
     'except.h', and in the description of 'Exception' class.  *Note
     Exception::.  If MSG is non-NULL, which is usually the case when
     the compiler generates and exception, the function records the line
     and column number of the exception.  If TEXT is non-NULL, the
     exception handler adds the text to the exception record, so it can
     be displayed when the program handles the exception.

     Programs should handle run-time exceptions as soon as possible
     after returning from a method.  The function
     '__ctalkHandleRunTimeExceptionInternal' is the normal exception
     handler, and '__ctalkTrapExceptionInternal' determines whether an
     exception has occurred.

'__ctalkFindClassVariable (char *VARNAME, int WARN)'
     Search the class library for _first occurrence_ of the class
     variable VARNAME.

     If WARN is 'TRUE,' issues a warning if the variable is not found.

     '__ctalkFindMethodByName' C function
'__ctalkFindMethodByName (OBJECT **OBJECT, const char *NAME, int WARN)'
     Returns the first instance or class method NAME if it exists in
     OBJECT's class or superclasses, or NULL if a method with that name
     isn't found.  If WARN is true, prints a warning message if the
     method isn't found.

'__ctalkFindPrefixMethodByName (OBJECT **RCVR, const char *NAME, int WARN)'
     Looks up a classes' instance method that matches NAME which has the
     'prefix' attribute set.  If WARN is true, prints a warning if the
     method is not found.

'__ctalkExceptionNotifyInternal (I_EXCEPTION *I)'
     The handler function of most exceptions.  Prints a message
     including any text provided as an argument to
     '__ctalkExceptionInternal'.

'__ctalkFilePtrFromStr (char *sFORMATTED_PTR)'
     Like '__ctalkGenericPtrFromStr (),' below, converts a string
     containing a formatted hexadecimal number to a pointer, and also
     checks that the pointer is a valid file.

     The function returns a 'void *' in order to keep Ctalk's header
     inclusion simple, or NULL if the argument does not contain a valid
     hexadecimal number, or if the pointer does not point to a valid
     file.

     This function can also set 'errno' in case of an error.

     Because the function returns a 'void *' an app or method must
     perform the cast from 'void *' to 'File *' when it calls this
     function.

'__ctalkFindClassMethodByFn (OBJECT **RCVR_P, OBJECT *(*FN)(), int WARN)'
     Finds a class method by calling '__ctalkGetClassMethodByFn' for the
     method's receiver and then the receivers of previous method calls.
     On success, returns the method, and RCVR_P contains the address of
     the method's receiver.

     If WARN is 'TRUE,' issues a warning if the method is not found.

'__ctalkFindClassMethodByName (OBJECT **RCVR_P, char *NAME, int WARN)'
     Finds a class method by by calling '__ctalkGetClassMethodByName'
     for the method's receiver and then the receivers of previous method
     calls.  On success, returns the method, and RCVR_P contains the
     address of the method's receiver.

     If WARN is 'TRUE,' issues a warning if the method is not found.

'__ctalkFindInstanceMethodByFn (OBJECT **RCVR_P, char *NAME, int WARN)'
     Finds an instance method by calling '__ctalkGetInstanceMethodByFn'
     for the method's receiver and then the receivers of previous method
     calls.  On success, returns the method, and RCVR_P contains the
     address of the method's receiver.

     If WARN is 'TRUE,' issues a warning if the method is not found.

'__ctalkFindInstanceMethodByName (OBJECT **RCVR_P, char *NAME, int WARN)'
     Finds an instance method by by calling
     '__ctalkGetInstanceMethodByName' for the method's receiver and then
     the receivers of previous method calls.  On success, returns the
     method, and RCVR_P contains the address of the method's receiver.

     If WARN is 'TRUE,' issues a warning if the method is not found.

'__ctalkSaveCVARArrayResource (char *NAME, int INITIALIZER_SIZE, void *var)'
     Saves an 'Array' object with the contents of 'var' in a method's
     object pool.

'__ctalkSaveCVARResource (char *NAME)'
     Saves the contents of C variable NAME in a method's object pool.

'__ctalkSaveOBJECTMemberResource (OBJECT *OBJECT)'
     Saves an 'OBJECT *' member to a method's resource pool.

'__ctalkSleep (int USECS)'
     Put a program to sleep for USECS microseconds.  The operating
     system restores the program to a running state no sooner than that
     amount of time has elapsed.

'__ctalkSort (OBJECT *COLLECTION, bool SORTDESCENDING)'
'__ctalkSortByName (OBJECT *COLLECTION, bool SORTDESCENDING)'
     Sorts a collection's members into ascending or descending order.
     '__ctalkSort' performs the sort using the collection members'
     values, while '__ctalkSortByName' uses the members' names.

     The algorithm used is very simple minded, although due to the
     mechanics of finding earlier/later collection members, it is as
     fast as divide-and-conquer algorithms for small or medium sized
     collections.  For large collections it is probably more practical
     to sort the collection as an 'OBJECT **' array and create a new
     list based on the collection members' sorted order.

     However, it is almost always faster to add members to collections
     in the order you want them sorted rather than trying to re-arrange
     the collection later.  For this, refer to the methods in the
     'SortedList' class *Note SortedList::.

'__ctalkStrToPtr (char *PTR)'
     Converts a formatted hexadecimal number to a 'void *'.  The
     function '__ctalkGenericPtrFromStr', below, performs some extra
     validation.

'__ctalkGenericPtrFromStr (char *S)'
     A wrapper function for '__ctalkStrToPtr ()' that performs some
     extra validation of the string argument.  These functions convert a
     string containing a formatted hexadecimal number (e.g.,
     '"0xnnnnnn"' or "'"0XNNNNNN"' into a 'void *.' Both of the
     functions return a 'void *', or NULL if the string does not contain
     a valid hexadecimal number.

'__ctalkGetCallingFnObject (char *NAME, char *CLASSNAME)'
     When used within 'Object : become', returns the object with the
     name NAME in the class CLASSNAME from 'become's' calling function.
     Also adjusts its caller indexes if 'become' is called within an
     argument block.

'__ctalkGetCallingMethodObject (char *NAME, char *CLASSNAME)'
     When used within 'Object : become', returns the object with the
     name NAME in the class CLASSNAME from 'become's' calling method.
     Also adjusts its caller indexes if 'become' is called within an
     argument block.

'__ctalkGetCArg (OBJECT *OBJ)'
     Retrieves the CVAR of the C variable named by OBJ.

'__ctalkGetInstanceMethodByFn (OBJECT *class_object, OBJECT *(*FN)(void), int WARN)'
     Returns the method that defines function FN from CLASS_OBJECT, or
     NULL if the method doesn't exist.  If WARN is true, prints a
     warning message if the method isn't found.

'__ctalkGetInstanceMethodByName (OBJECT *class_object, const char *NAME, int WARN)'
     Returns the method named NAME from CLASS_OBJECT, or NULL if the
     class doesn't define a method with that name.  If WARN is true,
     prints a warning message if the method isn't found.

'__ctalkGetReceiverPtr (void)'
     Returns an 'int' with the current value of the receiver stack
     pointer.

'__ctalkGetRS (void)'
     Returns a 'char' with the current record separator.  The record
     separator determines, among other uses, how regular expression
     characters act at line endings.  *Note RecordSeparator::.

'__ctalkGetRunTimeException (void)'
     Remove the first exception from the exception queue and return the
     exception's message as a char *.

'__ctalkGetTemplateCallerCVAR (char * NAME)'
     If called from within a function template, looks up the 'CVAR' NAME
     in the calling function or method.  This function returns a
     temporary object with the name and class, superclass, and value
     that correspond to the 'CVAR''s data type.  The return object
     persists until the next time this function is called.

'__ctalkGetClass (char * CLASSNAME)'
     Get the class object for CLASSNAME.

'__ctalkGetClassMethodByFn (OBJECT *RCVR, OBJECT *(*FN)(void), int WARN)'
     Return a class method of RCVR'S class with the run-time function
     FN.

     If WARN is 'TRUE,' issue a warning if the method is not found.

'__ctalkGetClassMethodByName (OBJECT *RCVR, char *NAME, int WARN)'
     Return a class method of RCVR'S class with the name NAME.

     If WARN is 'TRUE,' issue a warning if the method is not found.

'__ctalkGetExprParserAt (int IDX)'
     Return the expression parser, which is a struct 'EXPR_PARSER'
     typedef, at stack index IDX.

'__ctalkGetExprParserPtr (void)'
     Return the expression parser pointer, and 'int.'

'__ctalkGetClassVariable (OBJECT *RECEIVER, char *VARNAME, int)'
     WARN) Return the class variable named VARNAME from the receiver's
     class object, or 'NULL' if the variable does not exist.  If WARN is
     'TRUE,' issue a warning message if the variable is not found.

'__ctalkGetExceptionTrace (void)'
     Return 'TRUE' if a program has enabled exception walkbacks, 'FALSE'
     otherwise.

'__ctalkGetInstanceVariable (OBJECT *RECEIVER, char *VARNAME, int)'
     WARN) Return the instance variable named VARNAME from the receiver,
     or 'NULL' if the variable does not exist.  If WARN is 'TRUE,' issue
     a warning message if the variable is not found.

'__ctalkGetInstanceVariableByName (char *RECEIVER_NAME, char *VARNAME, int)'
     WARN) Return the instance variable named VARNAME from the object
     named by RECEIVER_NAME, or 'NULL' if the variable does not exist.
     If WARN is 'TRUE,' issue a warning message if the variable is not
     found.

'__ctalkGetPrefixMethodByName (OBJECT *class_object, const char *NAME, int WARN)'
     Returns the method named NAME from CLASS_OBJECT that has the
     'prefix' attribute set, or NULL if the class doesn't define a
     prefix method with that name.  If WARN is true, prints a warning
     message if the method isn't found.

'__ctalkGetTypeDef (char * NAME)'
     Return the 'CVAR' of the typedef NAME.

'__ctalkGetX11KeySym (int KEYCODE, int SHIFT_STATE, int KEYPRESS)'
     Returns an 'int' with the keyboard mapping of a keypress in X
     applications.  This allows programs to distinguish between modifier
     keypresses (e.g., shift, control, and alt), and alphanumeric
     keypresses.

     The first and second parameters are taken from an XKeyPressEvent or
     XKeyReleaseEvent structure.  The third parameter, KEYPRESS, should
     be true for Keypress events and false for keyrelease events.

     For alphanumeric keys, this function does not automatically modify
     the ASCII code of a key that is pressed when the shift key (or any
     other modifier key) is pressed.  That is, pressing 'A' and 'a' both
     return the ASCII value 97.  It is up to the program to record
     whether the shift key is pressed at the same time, and to provide
     the shifted character itself if necessary.

     Refer to the 'run' method in 'GLXCanvasPane' class for an example.

     This function uses 'XGetKeyboardMapping(3)' internally.

'__ctalkGLEW20 (void)'
     Returns a boolean value of true if the GLEW library supports
     version 2.0 extensions, mainly for OpenGL programs that use
     shaders.  Programs must call the '__ctalkInitGLEW' function before
     using this function.

'__ctalkGlobalObjectBecome (OBJECT *OLD, OBJECT *NEW)'
     Called when the receiver of 'Object : become' is a global object.

'__ctalkGlobFiles (char *PATTERN, OBJECT *list)'
     If the system's C libraries support file globbing with the 'glob'
     library function, '__ctalkGlobFiles' returns the file and directory
     pathnames that match PATTERN in the 'List' object given as the LIST
     argument.

     For information about how the C library matches file patterns,
     refer to the 'glob(3)' and related manual pages.

'__ctalkGLUTVersion (void)'
'__ctalkGLUTCreateMainWindow (char *TITLE)'
'__ctalkGLUTInitWindowGeometry (int X, int Y, int WIDTH, int HEIGHT)'
'__ctalkGLUTInit (int ARGC, char **ARGV)'
'__ctalkGLUTRun (void)'
'__ctalkGLUTInstallDisplayFn (void (*FN)())'
'__ctalkGLUTInstallReshapeFn (void (*FN)(int, int))'
'__ctalkGLUTInstallIdleFn (void (*FN)())'
'__ctalkGLUTInstallOverlayDisplayFunc (void (*FN)())'
'__ctalkGLUTInstallKeyboardFunc (void (*FN)(unsigned char, int, int))'
'__ctalkGLUTInstallMouseFunc (void (*FN)(int, int, int, int))'
'__ctalkGLUTInstallMotionFunc (void (*FN)(int, int))'
'__ctalkGLUTInstallPassiveMotionFunc (void (*FN)(int, int))'
'__ctalkGLUTInstallVisibilityFunc (void (*FN)(int))'
'__ctalkGLUTInstallEntryFunc (void (*FN)(int))'
'__ctalkGLUTInstallSpecialFunc (void (*FN)(int, int, int))'
'__ctalkGLUTInstallSpaceballMotionFunc (void (*FN)(int, int, int))'
'__ctalkGLUTInstallSpaceballRotateFunc (void (*FN)(int, int, int))'
'__ctalkGLUTInstallSpaceballButtonFunc (void (*FN)(int, int))'
'__ctalkGLUTInstallButtonBoxFunc (void (*FN)(int, int))'
'__ctalkGLUTInstallDialsFunc (void (*FN)(int, int))'
'__ctalkGLUTInstallTabletMotionFunc (void (*FN)(int, int, int, int))'
'__ctalkGLUTInstallMenuStatusFunc (void (*FN)(int, int, int))'
'__ctalkGLUTInstallMenuStateFunc (void (*FN)(int))'
'__ctalkGLUTInstallMenuStateFunc (void (*FN)(int))'
'__ctalkGLUTSphere (double, int, int, int);'
'__ctalkGLUTCube (double, int);'
'__ctalkGLUTCone (double, double, int, int, int);'
'__ctalkGLUTTorus (double, double, int, int, int);'
'__ctalkGLUTDodecahedron (int);'
'__ctalkGLUTOctahedron (int);'
'__ctalkGLUTTetrahedron (int);'
'__ctalkGLUTIcosahedron (int);'
'__ctalkGLUTTeapot (double, int);'
'__ctalkGLUTFullScreen (void);'
'__ctalkGLUTPosition (int, int);'
'__ctalkGLUTReshape (int, int);'
'__ctalkGLUTWindowID (char *WINDOW_NAME)'
     The functions that make up Ctalk's glue layer for the GLUT API. For
     their use, refer to the methods in GLUTApplication class.

'__ctalkGLXAlpha (float ALPHA)'
     Sets the alpha (opacity) channel for outline text rendering.
     Values should be between 0.0 (transparent) and 1.0 (opaque).  The
     Ctalk library's default value is 1.0 (opaque).

'__ctalkGLXDrawText (char *TEXT)'
     This is another convenience function that draws text on a
     'GLXCanvasPane' using a X font that the program registered with the
     pane's GLX context via a previous call to '__ctalkGLXUseXFont'.

     The 'GLXCanvasPane' class defines several methods that facilitate
     drawing with X fonts when using GLX. *Note GLXCanvasPane::.

'__ctalkGLXDrawTextFT (char *TEXT, float X, float Y)'
     Draws TEXT at the matrix coordinates given by the X,Y arguments.
     Programs should call at least '__ctalkGLXUseFTFont' before calling
     this function.

'__ctalkGLXExtensionsString (void)'
     Returns a 'char *' containing the extensions supported glX.

'__ctalkGLXExtensionSupported (char *EXTNAME)'
     Returns a boolean value of True if the system's glX extension
     supports EXTNAME, False otherwise.

'__ctalkGLXFrameRate (void)'
     Returns a 'float' with the frames per second of the calling
     program.  The function averages the rate over each interval of
     approximately five seconds.

'__ctalkGLXFreeFTFont (void)'
     Frees the font and library data from a previous call to
     '__ctalkGLXUseFTFont.'

'__ctalkGLXFreeXFont (void)'
     Frees X font data that was allocated by a previous call to
     '__ctalkGLXUseXFont'.  The 'GLXCanvasPane' class defines several
     methods that facilitate drawing with X fonts when using GLX. *Note
     GLXCanvasPane::.

'__ctalkGLXFullScreen (OBJECT *SELFOBJECT, char *WINTITLE)'
     Toggles the window's full screen mode on and off.

'__ctalkGLXNamedColorFT (char *COLORNAME)'
     Sets the foreground color for drawing text with Freetype fonts to
     the named X11 color given as the argument.

'__ctalkGLXPixelHeightFT (int PXHEIGHT)'
     Sets the height of the current Freetype face in use to the pixel
     height given as the argument.

'__ctalkGLXRefreshRate (void)'
     Returns a 'float' with the display's refresh rate if the OpenGL
     installation supports the 'GLX_OML_sync_control' extension.  If
     OpenGL doesn't support 'GLX_OML_sync_control', the function prints
     a warning message on the terminal and returns -1.

'__ctalkGLXSwapBuffers (OBJECT *GLXPANE_OBJECT)'
     This is an API-level wrapper for the GLXSwapBuffers library
     function.

'__ctalkGLXSwapControl (int INTERVAL)'
     Sets the swap buffer synchronization to 1/interval.  If interval is
     0, disables buffer swap synchronization.  If the machine's OpenGL
     does not support the 'GLX_MESA_swap_control' extension, the
     function is a no-op.  Returns 0 on success, -1 if the extension is
     not supported.

'__ctalkGLXTextWidth (char *TEXT)'
     Returns an 'int' with the width in pixels of TEXT rendered in the
     current font.  The program must first have selected a X font using
     '__ctalkGLXUseFon'.  If no font is selected, the function returns
     '-1'.

'__ctalkGLXUseFTFont (String FONTFILENAME)'
     Initializes the Freetype library and loads the font from the file
     given as the argument.  Use '__ctalkGLXFreeFTFont' to release the
     font data before calling this function again when changing fonts.

'__ctalkGLXUseXFont (OBJECT *GLXCANVASPANEOBJECT, char *FONTNAME)'
     This is a convenience function that registers the X font, FONTNAME
     for use with GLXCANVASPANEOBJECT, first by retrieving the X font
     data for FONTNAME, then registering the font using
     'glXUseXFont(3)'.

     After the program has finished drawing with the font, the program
     should call '__ctalkGLXFreeXFont'.

     The 'GLXCanvasPane' class defines several methods that facilitate
     drawing with X fonts when using GLX. *Note GLXCanvasPane::.

'__ctalkGLXFullScreen (void)'
     Returns a boolean value of true if the window is using Freetype
     fonts, false otherwise.

'__ctalkGLXWindowPos2i (int X, int Y)'
     This is a wrapper for the 'glWindowPos2i' function, which several
     methods in 'GLXCanvasPane' class use.

     Because 'glWindowPos2i' is an extension in many GL implementations,
     Ctalk checks for the function's presence when compiling the
     libraries.

     If the GL implementation does not provide 'glWindowPos2i', then any
     Ctalk program that tries to use this function (or one of the
     methods that call it), prints an error message and exits.

'__ctalkGLXWinXOrg (void)'
'__ctalkGLXWinYOrg (void)'
'__ctalkGLXWinXSize (void)'
'__ctalkGLXWinYSize (void)'
     These functions return an int with the window's current origin and
     size.

'__ctalkGUIPaneDrawCircleBasic (void *DISPLAY, int WINDOW_ID, int GC, int CENTER_X, int CENTER_Y, int RADIUS, int FILL, int PEN_WIDTH, int ALPHA char *FG_COLOR_NAME, char *BG_COLOR_NAME)'
     Draws a circle centered at CENTER_X,CENTER_Y with radius RADIUS.
     The dimensions are given in pixels.  If FILLED is true, then the
     function draws a filled circle; otherwise, the circle's edge has
     the width PEN_WIDTH.

     This function is a synonym for '__ctalkX11PaneDrawCircleBasic'.

'__ctalkGUIPaneClearRectangle (OBJECT *PANE_OBJECT, int X, int Y, int WIDTH, int HEIGHT)'
     Clear a rectangular region in a GUI Pane object.  Also clear the
     region in any buffers associated with the object.

'__ctalkGUIPaneClearWindow (OBJECT *PANE_OBJECT)'
     Clear a pane object's window.

'__ctalkGUIPaneDrawLine (OBJECT *PANE_OBJECT, OBJECT *LINE_OBJECT, OBJECT *PEN_OBJECT)'
     Draw a line specified by LINE_OBJECT (an instance of 'Line' class)
     using PEN_OBJECT (an instance of 'Pen' class).

'__ctalkGUIPaneDrawLineBasic (void *DISPLAY, int DRAWABLE_ID, int GC_PTR, int X_START, int Y_START, int X_END, int Y_END, int PEN_WIDTH, int ALPHA, char *PEN_COLOR)'
'__ctalkX11PaneDrawLineBasic (void *DISPLAY, int DRAWABLE_ID, int GC_PTR, int X_START, int Y_START, int X_END, int Y_END, int PEN_WIDTH, int ALPHA, char *PEN_COLOR)'
     Draw a line between the points (x_start,y_start) and (x_end, y_end)
     with the color, and transparency using the drawable ID, graphics
     context, and pen color, width, and transparency given as arguments.

     This function is a synonym for '__ctalkX11PaneDrawPointBasic.'

'__ctalkGUIPaneDrawPoint (OBJECT *PANE_OBJECT, OBJECT *POINT_OBJECT, OBJECT *PEN_OBJECT)'
     Draw a point on PANE_OBJECT specified by POINT_OBJECT using
     PEN_OBJECT.

'__ctalkGUIPaneDrawRectangle (OBJECT *PANE_OBJECT, OBJECT *RECTANGLE_OBJECT, OBJECT *PEN_OBJECT, int FILL)'
     Draw a rectangle on PANE_OBJECT specified by RECTANGLE_OBJECT using
     PEN_OBJECT.  If FILL is non-zero, draw a filled rectangle.

'__ctalkGUIPaneDrawRoundedRectangle (OBJECT *PANE_OBJECT, OBJECT *RECTANGLE_OBJECT, OBJECT *PEN_OBJECT, int FILL, int RADIUS)'
     This is similar to '__ctalkGUIPaneDrawRectangle', except that it
     takes an extra argument, RADIUS, which specifies the radius of the
     arcs that are used to draw the corners.

'__ctalkGUIPanePutStr (OBJECT *PANE_OBJECT, int X, int Y, char *STRING)'
     Display 'String' object STRING at coordinates X,Y on PANE_OBJECT.
     You can select the font with the 'font' method in class 'X11Pane'.
     This function relies on instance variables defined in 'X11Pane'
     class.  The '__ctalkX11PanePutStrBasic' function, below, provides a
     more flexible interface to the X libraries.

'__ctalkGUIPaneRefresh (OBJECT *PANE_OBJECT, int SRCX, int SRCY, int SRCWIDTH, int SRCHEIGHT, int DESTX, int DESTY)'
     Refresh the Pane object by updating the visible window with
     PANE_OBJECT's buffers and, if necessary, notifying the GUI library
     that the window has been updated.

'__ctalkGUISetBackground (OBJECT *PANE_OBJECT, char *COLOR)'
     Set the background of a pane's window to COLOR.  This function is
     intended only for objects that have an actual window; e.g.,
     'X11Pane' objects.  For all other visual types, like pixmaps, use
     __ctalkX11SetBackgroundBasic.

'__ctalkX11SubWindowGeometry (OBJECT * PARENTPANE, char * GEOMSTR, int *X_OUT, int *Y_OUT, int *width_out, int *HEIGHT_OUT)'
     Parses a string that contains the geometry specification of a
     subwindow, and returns the width and height of the subwindow and
     its X,Y position within the parent pane's window.

     A geometry specification has the form:


          width[%]xheight[%][+[x_org[%]]|[cC]+[y_org[%]]|[cC]]


     The _x, y, width, and height_ parameters are interpreted as the
     actual origin and size of the subwindow, unless a parameter is
     followed by a percent sign ('%').  In that case, the dimension is
     interpreted as a fraction of the parent window's corresponding
     vertical or horizontal dimension.

     If the value of either _x_ or _y_ is 'c' or 'C', then the subwindow
     is centered in the parent pane horizontally vertically.

     For some 'Pane' classes, like dialog windows, if _x_org_ and
     _y_org_ are missing, then the class positions the dialog window
     centered over the parent window.

     Also, if the specification is missing the width and height
     dimensions, for example,


          +100+100


     then the function returns '-1' for the width and height values.

'__ctalkX11TextFromData (void *DISPLAY, int DRAWABLE_ID, int GD_PTR, char *TEXT)'
     Displays TEXT on DRAWABLE_ID.

'__ctalkX11TextWidth (char *FONTDESC, char *TEXT)'
     Returns an 'int' with the width in screen pixels of the TEXT
     argument when rendered in the font named by FONTDESC.  There is
     more information about how to use fonts in the sections that
     discuss the X graphics classes.  *Note X11Font::.

'__ctalkX11WxHGeometry (int PARENTWIDTH, int PARENTHHEIGHT, char *GEOMSPEC, int XOUT, int YOUT, int WIDTHOUT, int HEIGHTOUT)'
     Calculate the dimensions specified by GEOMSPEC within PARENTWIDTH
     and PARENTHEIGHT, and return the results in XOUT, YOUT, WIDTHOUT,
     and HEIGHTOUT.  For information about the format of GEOMSPEC, refer
     to the 'Window Geometry' subsection of the 'X11PaneDispatcher'
     class.  *Note X11PaneDispatcher::.

'__ctalkHandleRunTimeException (void)'
     Execute the exception handler for a pending exception.  The
     'handle' method (class 'Exception') calls this function.  *Note
     Exception::.

'__ctalkHandleRunTimeExceptionInternal (void)'
     Execute the exception handler for a pending exception.  If the
     exception is generated by an expression, execute the exception
     handler only if further expressions or subexpressions need to be
     evaluated.

'__ctalkHaveFTFaceBasic (void)'
     Returns TRUE if an application has created a new FreeType2 font
     face, FALSE otherwise.  This is a lower level library function that
     apps should not need to use directly, and may go away in the
     future.

'__ctalkHexIntegerToASCII (unsigned int PTR, char *S)'
     Format a hexadecimal representation of PTR in S.  The return value
     is the formatted string in S.

     On 64-bit machines, the prototype is:


          char *__ctalkHexIntegerToASCII (unsigned long long int ptr, char *buf)


'__ctalkIconXPM (int ICONID)'
     Returns a 'char **' with the XPM data for the dialog icon given by
     ICONID.  The library defines the following icon IDs.


          ICON_NONE
          ICON_STOP
          ICON_CAUTION
          ICON_INFO


'__ctalkIgnoreSignal (int SIGNO)'
     Set the handler for SIGNO to ignore the signal.

'__ctalkIncKeyRef (OBJECT *OBJECT, int INC, int OP)'
'__ctalkIncStringRef (OBJECT *OBJECT, int IDX, int OP)'
     Increment the reference to the value of OBJECT, a 'String' or 'Key'
     object, or one of its subclasses, by IDX.  If IDX is negative,
     decrements the reference to the value of the receiver.  If the
     reference is before or after the start or end of the receiver's
     value, further uses of the object return NULL.

     The argument OP can be one of the following constants, which are
     defined in 'ctalkdefs.h'.

     'TAG_REF_PREFIX'
          Increments (or decrements) the value of the receiver
          immediately.  Normally this is used for prefix '++' and '--'
          operators, and also '+=' and '-=' operators.

     'TAG_REF_POSTFIX'
          Increments (or decrements) the value of the receiver after its
          value is accessed.  Used normally for postfix '++' and '--'
          operators.

     'TAG_REF_TEMP'
          Adds a temporary reference that is cleared after the receiver
          is next read.  Normally you would use this for expressions
          that assign the reference to another object, as in this
          example.


               String new str1;
               String new str2;

               str1 = "Hello, world!";

               str2 = str1 + 3;


          The object 'str2' is assigned the calculated reference.  The
          value of 'str1' is unaffected.

'__ctalkInitGLEW (void)'
     Initialize the GLEW library.  Programs must call this function
     before performing any operations that use OpenGL extensions.

'__ctalkInlineMethod (OBJECT *RCVR, METHOD *METHOD, int N_ARGS, ...)'
     Call a method or block of code that is an argument to another
     method.  The class of RCVR and the class of METHOD do not need to
     be the same.  Currently, only the 'map' method uses inline method
     calls.  For an example of the '__ctalkInlineMethod ()''s use, see
     'map' (implemented by the 'List', 'Array', and 'AssociativeArray'
     classes).  This function can (and should) be used to implement
     inline method messages or code blocks when streaming over
     collections.

     The N_ARGS argument specifies the number of arguments to be passed
     to the target method.  Currently '__ctalkInlineMethod ()' supports
     0 - 6 arguments.

'__ctalkIntRadixToDecimalASCII (char *INTBUF)'
     Return a C string with the integer formatted in INTBUF formatted as
     a decimal (base 10) integer.

'__ctalkInstallHandler (int SIGNO, OBJECT *(*METHOD_C_FUNCTION)())'
     Set the handler of signal SIGNO to METHOD_C_FUNCTION.  The
     prototype of METHOD_C_FUNCTION is similar to the intermediate C
     prototype of Ctalk's methods.  Signal handlers installed with this
     function reset the handler to the default after each use, except
     for handlers on DJGPP platforms.

'__ctalkInstallPrefix (void)'
     Returns a 'char *' with the top-level directory where Ctalk is
     installed.  Ctalk's installation uses this directory as the
     top-level directory of its installation layout; for example, in
     relative terms, this is where Ctalk's various components get
     installed:


          Executables:            _prefixdir_/bin
          Libraries:              _prefixdir_/lib
          Class Libraries:        _prefixdir_/include/ctalk
          Texinfo Manuals:        _prefixdir_share/info
          Manual Pages:           _prefixdir_/share/man
          Searchable Docs:        _prefixdir_/share/ctalk


'__ctalkIntanceMethodInitReturnClass (char *RCVRCLASSNAME, char *METHODNAME, char *RETURNCLASSNAME)'
     Set the return class of method METHODNAME of class RCVRCLASSNAME to
     RETURNCLASSNAME.

'__ctalkInstanceVarsFromClassObject (OBJECT *OBJ)'
     Add the instance variables defined by OBJ'S class object.

'__ctalkInstanceVarIsCallersReceiver (void)'
     Used by 'Object: become'.  Returns True if the receiver object is
     an instance variable, False otherwise.

'__ctalkInitFTLib (void)'
     Initialize the system's FreeType2 library.  Returns 0 if
     successful, ERROR ('-1') if unsuccessful or if the library isn't
     available.  This is a lower level function that should not normally
     be needed by apps directly, and may go away in the future.

'__ctalkInstanceMethodParam (char *RCVRCLASSNAME, char *METHODNAME, OBJECT *(*SELECTOR_FN)(), char *PARAMCLASS, char *PARAMNAME, int PARAM_IS_POINTER)'
     Define a method parameter when initializing a method.  Normally the
     compiler generates this call for inclusion in '__ctalk_init ()' for
     the method initialization at run time.

'__ctalkIntFromCharConstant (char *STR)'
     Returns the 'int' value of the character constant STR.  Recognizes
     all of the escape sequences that Ctalk uses, whether the constant
     is enclosed in single quotes or not.  Also recognizes backslash
     escape sequences and the following control character constants.


          Escape Sequence    Int Value
          \0                 0
          \a                 1
          \b                 2
          \e                 27
          \f                 6
          \n                 10
          \r                 13
          \t                 9
          \v                 11


     The '\e' escape sequence is an extension to the C language
     standard.

'__ctalkIsClassVariableOf (char *CLASS, char *VARNAME)'
     Returns 'TRUE' if VARNAME is a class variable of CLASS, 'FALSE'
     otherwise.

'__ctalkIsCallersReceiver (void)'
     Used by 'Object : become' to determine if an object is the calling
     method's receiver.

'__ctalkIsDir (char *PATH)'
     Returns 'TRUE' if PATH is a directory, 'FALSE' otherwise.

'__ctalkIsInstanceMethod (OBJECT *SELF_OBJECT, char *METHOD_NAME)'
'__ctalkIsClassMethod (OBJECT *SELF_OBJECT, char *METHOD_NAME)'
     The functions return True if the method given by METHOD_NAME is an
     instance or class method, respectively, in SELF_OBJECT'S class.

'__ctalkIsInstanceVariableOf (char *CLASS, char *VARNAME)'
     Returns 'TRUE' if VARNAME is an instance variable of CLASS, 'FALSE'
     otherwise.

'__ctalkIsObject (OBJECT *O)'
     Return 'TRUE' if if O is a valid object, 'FALSE' otherwise.

'__ctalkIsSubClassOf (char *CLASSNAME, char *SUPERCLASSNAME)'
     Return 'TRUE' if CLASSNAME is a subclass of SUPERCLASSNAME, 'FALSE'
     otherwise.

'__ctalkLastMatchLength (void)'
     Return the length of the match from the last call to
     '__ctalkMatchText', below.

'__ctalkLibcFnWithMethodVarArgs (int (*LIBCFN)(), METHOD *METHOD, char *LIBCFN_RETURN_CLASS)'
     Call the C library function LIBCFN using with its template method
     METHOD.  For C library functions that use 'stdarg.h' variable
     arguments, LIBCFN_RETURN_CLASS should be 'Integer.'

     When evaluating an expression, the currently executing method is
     contained in the current 'EXPR_PARSER'.  *Note
     __ctalkGetExprParserAt::.

     _Note:_ This version of Ctalk only supports variable-argument
     functions on 32-bit Intel platforms.  If you try to use a
     variable-argument function on another hardware platform, Ctalk
     issues a warning and returns 'NULL.'

'__ctalkLogMessage (char *, ...)'
     Formats the message given as the argument and writes the message to
     the system's syslog facility.

'__ctalkMatchAt (Integer N)'
'__ctalkMatchIndexAt (Integer N)'
     Returns, respectively, the text, or the character index matched by
     the N'TH parenthesized subexpression during a previous call to
     '__ctalkMatchText' (i.e., a backreference).  The argument, N, is
     '0' for the first parenthesized subexpression, '1' for the next
     subexpression, and so on.  If the _n'_th pattern didn't match any
     text, returns NULL. *Note Pattern Matching::.

'__ctalkMatchText (char *PATTERN, char *TEXT, long long int *OFFSETS)'
     Find the occurences of PATTERN in TEXT.  Returns the index of each
     match in the OFFSETS array, with the list terminated by -1.
     Returns the number of matches, or -1 if there are no matches.

'__ctalkMatchPrintToks (bool PRINTTOKS)'
     If PRINTTOKS is 'true', then Ctalk prints the regular expression
     tokens and the matching text for every regular expression match,
     which can be useful for debugging regular expressions.

'__ctalkMapGLXWindow (OBJECT *GLXCANVASPANE_OBJECT)'
     Maps a 'GLXCanvasPane's' window to the display and creates a
     'GLXContext' for the window, and makes the GLXContext current.

     Saves the GLXContext pointer in the receiver's 'glxContextPtr'
     instance variable.  *Note GLXCanvasPane::.

'__ctalkMapX11Window (OBJECT *X11PANE_OBJECT)'
     The X library interface of the 'map' (class 'X11Pane') method *Note
     X11Pane::.  This function is a wrapper for the 'XMapWindow' and
     'XMapSubwindows' Xlib functions.

'__ctalkMethodObjectMessage (OBJECT *RCVR, OBJECT *METHOD_INSTANCE)'
     Perform a method call by sending RCVR the message defined by
     METHOD_INSTANCE, which is a previously defined 'Method' object.
     *Note Method::.

     The function returns '0' on success, '-1' on error.

     For examples of 'Method' object calls, *Note methodObjectMessage::.

'__ctalkMethodObjectMessage (OBJECT *RCVR, OBJECT *METHOD_INSTANCE, OBJECT *ARG1, OBJECT *ARG2)'
     Perform a method call by sending RCVR the message defined by
     METHOD_INSTANCE, which is a previously defined 'Method' object.

     The parameters ARG1 and ARG2 are the arguments to the method
     instance.  'Method' objects with two arguments are commonly used in
     graphical event dispatchers, particularly in 'X11PaneDispatcher'
     class.  This helps simplify the event dispatcher methods.

     The function returns '0' on success, '-1' on error.

     For examples of 'Method' object calls, *Note methodObjectMessage::.

'__ctalkMethodPoolMax (void)'
'__ctalkSetMethodPoolMax (int NEW_SIZE)'
     Get or set a program's method pool size, in the number of objects
     that each method's pool retains.  The default pool size is set when
     the Ctalk libraries are built, and is displayed in the configure
     program's status report during the build process.  When a method's
     pool size reaches this number of objects, the pool deletes the
     oldest object in the pool to make room for the new object.

     Generally, the default pool size is suitable for the language tools
     and demonstration programs that come packaged with Ctalk.  Some of
     the test programs in the 'test/expect' subdirectory that run
     through many iterations (i.e., thousands of iterations) require a
     larger pool size.  This is especially true if a program uses many C
     variables when iterating through its operations, and whether the C
     variables are simply scalar or constant values (e.g., ints,
     doubles, and literal strings), and whether the variables are
     pointers to objects in memory.

'__ctalkMethodReturnClass (char *CLASSNAME)'
     Set the return class of an instance or class method during method
     initialization.

'__ctalkNArgs (void)'
     Returns an 'int' with the number of arguments passed to the current
     method.

'__ctalkNMatches (void)'
     Returns an 'int' with the number of matches from the last call to
     __ctalkMatchText.

'__ctalkNewFTFace (void)'
     Initialize a new FreeType2 face object.  This is a lower level
     library function that apps should not need to use directly, and may
     go away in the future.

'__ctalkNewSignalEventInternal (int SIGNO, int PID, char *DATA)'
     Generate and queue a 'SignalEvent' object for signal SIGNO with
     process ID PID.  The DATA argument is a 'String' object that the
     program can use to pass information back to the application.

'__ctalkNonLocalArgBlkReturn (void)'
     Returns a 'bool' value of true or false to an argument block's
     parent method to indicate whether the argument block executed a
     'return' statement.

'__ctalkObjValPtr (OBJECT *O, void *PTR)'
     Set the value of the object O to PTR.

'__ctalkPaneResource (OBJECT *PANEOBJECT, char *RESOURCENAME, bool WARN)'
     Returns an 'OBJECT *' with the value corresponding to RESOURCENAME
     from PANEOBJECT'S 'resource' instance variable.  If WARN is true,
     displays a warning if the resource isn't found.

'__ctalkPeekExceptionTrace (void)'
     Returns a 'char *' with the text of the most recent exception and
     its stack trace.

'__ctalkPeekRunTimeException (void)'
     Returns a 'char *' with the text of the most recent exception.

'__ctalkPendingException (void)'
     A convenience method for '__ctalkTrapException.' Returns 'TRUE' if
     an exception is pending, 'FALSE' otherwise.

'__ctalkPrintExceptionTrace (void)'
     Print a walkback of the current exception's copy of the program
     call stack.

'__ctalkPrintObject (OBJECT *OBJECT)'
     Print the object given by the argument, and its instance variables,
     to standard output.

'__ctalkPrintObjectByName (OBJECT *OBJECT_NAME)'
     Print the object named by OBJECT_NAME to the standard output.

'__ctalkProcessWait (int CHILD_PROCESSID, int *CHILD_RETURN_VALUE_OUT, int *CHILD_TERM_SIG_OUT, int *ERRNO_OUT)'
     Checks the status of the child process specified by
     CHILD_PROCESSID.

     If the return value of '__ctalkProcessWait' is 0, then there is no
     change in the child processes' status to report.  A return value
     equal to CHILD_PROCESSID indicates that the child process has
     exited.  If the return value is -1, then there was an error either
     in the process that called '__ctalkProcessWait', the child process,
     or both.

     When '__ctalkProcessWait's' return value is equal to
     CHILD_PROCESSID, the function returns the child processes' return
     value in CHILD_RETURN_VALUE_OUT.  If the child process was
     terminated by an uncaught signal, the signal number is returned in
     CHILD_TERM_SIG_OUT.

     If the function's return value is -1, then function returns the
     system's error code in ERRNO_OUT.

'__ctalkRaiseX11Window (OBJECT *X11PANE_OBJECT)'
     The X library interface of the 'raise' (class 'X11Pane') method.

'__ctalkReceiverReceiverBecome (OBJECT *OBJECT)'
     Used by 'become' (class 'Object') to change the calling method's
     receiver to the object given as the argument.

'__ctalkReferenceObject (OBJECT *OBJ, OBJECT *REFFED_OBJ)'
     Sets OBJ'S value to REFFED_OBJ'S hexadecimal address.  Also
     incrememts REFFED_OBJ'S reference count by 1 and adds
     VAR_REF_OBJECT to its scope.

'__ctalkRegisterArgBlkReturn (int RETURN_CODE, OBJECT *RETURN_OBJECT)'
     This function gets called when Ctalk encounters a return statement
     in an argument block.  The first argument is the return code of the
     argument block itself (typically an 'Integer' object with a value
     of -2, which signals the 'map' method that the argument block has
     requested a return from the parent function or method), and the
     second argument is the object that is to be returned by the caller.

     The following example should hopefully explain how these functions
     work together.  The comments indicate where the compiler inserted
     these functions.


          int main () {
            String new str;

            str = "Hello, world!";

            str map {
              if (self == 'o') {
                break;
              }
              printf ("%c", self);
            }
            printf ("\n");

            str map {
              switch (self)
                {
                case 'a':
                case 'e':
                case 'i':
                case 'o':
                case 'u':
          	if (self == 'o') {
          	  printf ("\n");
          	  return 11;          /* __ctalkRegisterArgBlkReturn inserted   */
          	}                    /* here.  The String map method, which is */
          	break;                /* the argument block's direct caller,    */
                }                      /* contains a __ctalkArgBlkSetCallerReturn*/
              (Character *)self -= 32;  /* function call.                         */
              printf ("%c", self);
            }
            printf ("\n");
          }


          /* After the argument block call, the compiler inserts a
             construct like the following:

              if (__ctalkNonLocalArgBlkReturn ()) {
                  return __ctalkToCInteger (__ctalkArgBlkReturnVal (), 1);
              }

            This retrieves the argument block's return value if any,
            and returns from the calling function.
          */

     The 'String : map' method contains an example of how an argument
     block can signal a return from the function or method that called
     it.  Refer also to the '__ctalkArgBlkSetCallerReturn' and
     '__ctalkArgBlkClearCallerReturn' functions above.

'__ctalkRegisterBoolReturn (int T-OR-F-ARG)'
     Returns a boolean object with a true or false value depending on
     the value of T-OR-F-ARG.  If the Boolean class variables 'boolTrue'
     or 'boolFalse' are defined, returns one of those objects.
     Otherwise, creates a 'Boolean' object with the value true or false.

'__ctalkRegisterCharPtrReturn (char *VAR)'
     Saves a C 'char *' method return value to the method's resource
     pool.

'__ctalkRegisterCharPtrReturn (char VAR)'
     Saves a C 'char' method return value to the method's resource pool.

'(char *TYPE, char *QUALIFIER, char *QUALIFIER2, char *QUALIFIER3, char *QUALIFIER4, char *STORAGE_CLASS, char *NAME, int N_DEREFS, int ATTRS, int IS_UNSIGNED, int SCOPE)'
     Register a C typedef with an application.  This function is
     typically used by '__ctalk_init' to register typedefs defined in C
     include files and elsewhere.

'__ctalkRegisterExtraObject (OBJECT *CREATED_OBJECT)'
     Save an object retrieved by a function so it may be referred to
     later.  This function registers each object only once and does not
     adjust the object's reference count or scope.  The
     '__ctalkRegisterExtraObject' function silently ignores request to
     register global and class objects.  Refer to the entry for
     '__ctalkRegisterUserObject,' below.

'__ctalkRegisterFloatReturn (double d)'
     Registers a C 'double' return value as a 'Float' method resource
     object.  Note that the C libraries do not automatically convert C
     'floats' to 'doubles', so if you register a C 'float' as a method
     resource, you need to cast it to a 'double' first.

'__ctalkRegisterIntReturn (int RETURNVAL)'
     Registers a C 'int' method return value as an 'Integer' method
     resource object.

'__ctalkRegisterIntReturn (long long int RETURNVAL)'
     Registers a C 'long long int' method return value as a
     'LongInteger' method resource.

'__ctalkRegisterUserFunctionName (char *NAME)'
     Registers the names of C functions in the program, mainly for
     diagnostic messages.  This function is added automatically to
     '__ctalk_init' whenever a C function in the source code is parsed
     and is called at the start of a program.

'__ctalkRegisterUserObject (OBJECT *CREATED_OBJECT)'
     Save objects created by a method so they may be referred to later.
     New objects registered by this function have a reference count of
     1, and have the additional scope 'METHOD_USER_OBJECT'.  This
     function is also used by many of the 'methodReturn*' macros, and if
     necessary you can included it in a method if you need to register
     an object in some non-standard manner.  *Note Returning method
     values::.

     Note that global objects and class objects do not need to be
     registered.  In fact, registering such objects as method resources
     can confuse the object's entries in their respective dictionaries,
     because method resources have a separate dictionary of their own.
     If a method tries to register a class object or global object,
     '__ctalkRegisterUserObject' silently ignores the request.

'__ctalkReplaceVarEntry (VARENTRY *VARENTRY, OBJECT *NEW_OBJECT)'
     This function has been superceded.  If you want to attach an Object
     to another tag, it's only necessary to use an assignment statement.
     See '__ctalkAliasReceiver ()' for an example

'__ctalkRtGetMethod (void)'
     Returns the currently executing method as a 'METHOD *' from the
     call stack, or NULL if called from within a C function.

'__ctalkRtReceiver (OBJECT *RECEIVER_OBJECT)'
     Sets the call stack's receiver to RECEIVER_OBJECT.  The function
     however, does not alter the currently executing method's receiver
     on the receiver stack.

'__ctalkRtReceiverObject (void)'
     Returns the currently executing method's receiver object from the
     call stack.

'__ctalkRtSaveSourceFileName (char *FN)'
     Called during the initialization of a function or method to store
     the name of its source file.

'__ctalkRtGetMethodFn (void)'
     Returns the C function pointer (an 'OBJECT *(*)()' of the currently
     executing method, or NULL if called from within a C function.

'__ctalkRtMethodClass (OBJECT *CLASS_OBJECT)'
     Sets the class object of the currently executing method to
     CLASS_OBJECT.

'(OBJECT *CLASS_OBJECT)'
     Returns the class object of the currently executing method.

'__ctalkSearchBuffer (char *PATTERN, char *BUFFER, long long *OFFSETS)'
     Finds all occurrences of PATTERN in BUFFER, and returns the
     positions of the matches in OFFSETS, terminated by -1.

'__ctalkSelectXFontFace (void *DISPLAY, int DRAWABLE_ID, int GC_PTR, int FACE)'
     Selects the typeface of the currently selected font, if available,
     which should have been loaded with a call like
     '__ctalkX11UseFontBasic', or the equivalent calls for FreeType
     fonts.

     The argument, FACE, may be one of the following.


          X_FACE_REGULAR
          X_FACE_BOLD
          X_FACE_ITALIC
          X_FACE_BOLD_ITALIC


     Because these functions use shared memory to manage each X
     typeface's metrics, it is generally necessary to call this function
     after calling '__ctalkOpenX11InputClient' in order to display
     multiple faces with the correct character spacing.

'__ctalkSelfPrintOn (void)'
     Print the calling method's arguments to the receiver.  This
     function is called directly by 'printOn' (class 'String') and
     similar methods.  *Note String::.

'__ctalkSetExceptionTrace (int VAL)'
     Enable or disable exception method traces in 'handle' (class
     'Exception') and other methods.  *Note Exception::.

'__ctalkSetObjectAttr (OBJECT *OBJECT, unsigned intATTRIBUTE)'
'__ctalkObjectAttrAnd (OBJECT *OBJECT, unsigned intATTRIBUTE)'
'__ctalkObjectAttrOr (OBJECT *OBJECT, unsigned intATTRIBUTE)'
     These methods sets the 'attr' member of OBJECT to ATTRIBUTE.

     Note that when setting or clearing attributes on complex objects,
     it is better to use '__ctalkObjectAttrAnd' or
     '__ctalkObjectAttrOr', because complex objects can contain instance
     variables that use different attributes.

     For example, an instance variable that is a 'Symbol' would have the
     additional attribute 'OBJECT_VALUE_IS_BIN_SYMBOL', so if a method
     or function contained an expression like this:


          __ctalkSetObjectAttr (myObj, myObj -> attrs | OBJ_HAS_PTR_CX);


     This would have the effect of setting the parent object's
     attributes as well as the instance variables, which would clear any
     additional attributes that the instance variables have.

     What would actually happen is that the parent object 'myObj', and
     its instance variables would have their attributes set like this.


          <obj> -> attrs = (myObj -> attrs | OBJ_HAS_PTR_CX);


     so it is better to use an expression like this one.


          __ctalkObjectAttrOr (myObj, OBJ_HAS_PTR_CX);


     This has the effect of applying the following to the parent object
     and each instance variable:


          <obj> -> attrs |= OBJ_HAS_PTR_CX);


     Conversely, to clear a single attribute, a function or method would
     contain an expression like this.


          __ctalkObjectAttrAnd (myObj, ~OBJ_HAS_PTR_CX);


'__ctalkSetObjectName (OBJECT *OBJECT, char *NAME)'
     Sets the name of OBJECT to NAME.

'__ctalkSetObjectScope (OBJECT *OBJECT, int SCOPE)'
     Set the scope of OBJECT to SCOPE.  Note that many of Ctalk's scopes
     are only used internally.  The scopes that are useful in methods
     are defined in 'ctalkdefs.h'.  Those definitions are listed here
     along with their values.  *Note Scoping::.


          GLOBAL_VAR          (1 << 0)
          LOCAL_VAR           (1 << 1)
          CREATED_PARAM       (1 << 6)
          CVAR_VAR_ALIAS_COPY (1 << 7)
          VAR_REF_OBJECT      (1 << 9)
          METHOD_USER_OBJECT  (1 << 10)


'__ctalkSetObjectValue (OBJECT *OBJECT, char *VALUE)'
     This is a wrapper for '__ctalkSetObjectValueVar ()', below, which
     was used in earlier versions of the class libraries.  You should
     use '__ctalkSetObjectValueVar ()' instead.

'__ctalkSetObjectValueAddr (OBJECT *OBJECT, void *MEM_ADDR, int DATA_LENGTH)'
     Set OBJECT'S value to a pointer to the memory area MEM_ADDR.  The
     object must be a member of Vector class or one of its subclasses.
     The function also sets the object 'length' instance variable, and
     adds OBJECT_VALUE_IS_MEMORY_VECTOR to its attributes, and registers
     the vector * address.

'__ctalkSetObjectValueBuf (OBJECT *OBJECT, char *BUF)'
     Set the 'value' instance variable to the buffer BUF.  Unlike
     '__ctalkSetObjectValue ()' and '__ctalkSetObjectValueVar (),' this
     function replaces the value of OBJECT with BUF, even if BUF is
     empty, so you can add a random-length buffer to OBJECT.

'__ctalkSetObjectValueVar (OBJECT *OBJECT, char *VALUE)'
     Set the value of OBJECT to VALUE.  If VALUE is 'NULL', sets
     OBJECT's value to Ctalk's '(null)' string.

'__ctalkSetObjPtr (OBJECT *OBJECT, void *P)'
     Save the pointer P in OBJECT.

'__ctalkSetRS (char RECORD_SEPARATOR_CHAR)'
     Set's the current program's record separator character, which
     determines, among other things, how regular expression
     metacharacters work with line endings.  *Note RecordSeparator::.

'__ctalkSignalHandlerBasic (int SIGNO)'
     Provides a basic signal handler that is more robust than the
     methods in 'SignalHandler' class, but less flexible.  Causes the
     application to terminate and print a walkback trace if enabled.

     Applications can use '__ctalkInstallHandler ()' to install the
     signal handler.  In this case it works similarly to a method with a
     C calling protocol.  Here is the 'installExitHandlerBasic' method
     from 'Application' class.


          Application instanceMethod installExitHandlerBasic (void) {
            __ctalkInstallHandler
              (__ctalkSystemSignalNumber ("SIGINT"),
               (OBJECT *(*)())__ctalkSignalHandlerBasic);

            return NULL;
          }


'__ctalkSpawn (char *COMMAND, int RESTRICT_IO)'
     The '__ctalkSpawn' function launches the program named by COMMAND
     as a daemon process, and then returns to the parent program and
     continues execution of the parent.

     The function returns the process id of the child process.

     The daemon process runs as a true daemon - that is, without a
     controlling terminal, and without the standard input, output, or
     error channels.  All communication between the daemon and the
     parent program should take place with UNIX interprocess
     communication facilities.

     If RESTRICT_IO is non-zero, the program changes the daemon
     processes' working directory to '/' and sets its umask to '0'.

     Traditionally, a parent program exits immediately after spawning a
     daemon process.  But '__ctalkSpawn' maintains the session process -
     the process that handles the session and I/O initialization before
     it launches the daemon.  The session process stays active until the
     parent process exits and orphans it.  Then the session process
     exits also, leaving the daemon to run completely in the background
     until it is killed.  That means, while the parent program is
     running, there can be _three_ entries in the system's process
     table, when viewed with a program like 'ps' or 'top'.  However, it
     also mimimizes the possibility of causing zombie processes should
     any part of the program quit unexpectedly.

     You should note that '__ctalkSpawn' does not use a shell or any
     shell facilities to exec the daemon process, which means the
     function doesn't support I/O redirection or globbing.  If you want
     the parent process to handle the child processes' I/O, refer to the
     '__ctalkExec' function.  *Note ctalkExec::.

'__ctalkStringifyName (OBJECT *SRC, OBJECT *DEST)'
     When called by a function like 'String' : '=', performs some
     munging of different types of 'String' objects in order to keep the
     API consistent for different types of 'String' objects.

'__ctalkSplitText (char *TEXT, OBJECT *LIST_OUT)'
     Splits a text buffer into word tokens, and returns the tokens as
     members of LIST_OUT.  This function preserves newlines and spaces,
     and places HTML-style format tags in their own tokens.  This is
     used by classes like 'X11TextPane' to split its text buffer before
     displaying the wrapped text.  *Note X11TextPane::.

'__ctalkStrToPtr (char *S)'
     If S is a C string formatted as a hexadecimal number with the
     format '0x'NNNNNNN, return a C 'void *' pointer with that address.

'__ctalkSysErrExceptionInternal (MESSAGE *ORIG, int ERRNO, char *TEXT)'
     Generates an exception base on ERRNO with the text TEXT.  Ctalk
     translates ERRNO in an exception that represents the C library's
     'errno' error definitions.  The ORIG argument provides the line and
     column number where the exception occurred.  If NULL, the exception
     doesn't record the line and column information.

'__ctalkSystemSignalName (int SIGNO)'
     Returns a string containing a mnemonic name like 'SIGINT' or
     'SIGHUP' that corresponds to SIGNO.  Includes the mnemonics of the
     common signals defined by POSIX standards.

'__ctalkSymbolReferenceByName (OBJECT *OBJECT)'
     Used in 'Symbol : =' and similar methods returns a boolean value of
     'true' if the object (the argument to the method normally) was
     retrieved by its name, or false if the argument is the result of
     pointer math or indirection.  This allows the method to determine
     whether it needs to perform additional indirection or pointer math
     on the argument before assigning it the the receiver.

'__ctalkSystemSignalNumber (char *SIGNAME)'
     For a signal named SIGNAME, return the number system-dependent
     number of the signal.  The function defines names POSIX 1990
     signals on most systems.  Refer to the system's 'signal(2)' (or
     similar) manual page for information.

'__ctalkTemplateCallerCVARCleanup (void)'
     Cleans up after a '__ctalkGetTemplateCallerCVAR' call.  *Note
     __ctalkGetTemplateCallerCVAR::.  Ctalk calls this function
     internally; you should not need to use it in your own programs.

     Note that this function does not know about parameter substitution.
     If you want to print an object that is an argument to a method, use
     the 'ARG(N)' macro, and reference the 'name' member.  *Note ARG
     macro::.
          __ctalkPrintObject(ARG(0)->__o_name);

'__ctalkTerminalHeight (void)'
'__ctalkTerminalWidth (void)'
     Returns the height and width of the terminal in character rows and
     columns.  If the terminal does not support reporting its size,
     these functions return 0.

'__ctalkToCArrayElement (OBJECT *O)'
     Translate the value of an 'Integer,' 'Character,' 'String,' or
     'LongInteger' array element to a 'void *' that points to its
     corresponding C data type.

'__ctalkToCCharPtr (OBJECT *OBJ, int KEEP)'
     Returns the value of OBJ as a C 'char *'.  If KEEP is zero, deletes
     OBJ if possible.

'__ctalkToCDouble (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'double'.

'__ctalkToCIntArrayElement (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'int'.  This function has mostly
     been superceded by '__ctalkToCInteger' (below).

'__ctalkToCInteger (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'int'.  The value can be a binary,
     octal, decimal, or hexadecimal number.  Prints a warning message if
     the value is not a valid number or is out of range.

'__ctalkTrapException (void)'
     If there is a run-time exception pending, returns the first
     exception in Ctalk's internal format.  Otherwise, returns NULL.

'__ctalkTrapExceptionInternal (void)'
     Similar to '__ctalkTrapException', except that it works with the
     passes in the compiler as well as the run time library.

'__ctalkObjectPrintOn (OBJECT *OBJECT)'
     Print the calling method's arguments to the argument's 'value'
     instance variable.  This function is called directly by 'printOn'
     (class 'ANSITerminalStream') and similar methods.  *Note
     ANSITerminalStream::.

'__ctalkOpenX11InputClient (OBJECT *X11TERMINALSTREAM_OBJECT)'
     Start a GUI program's input client in the background.  The input
     client receives input events, like mouse motion and keypresses, and
     window events, like resize notifications from the X display server,
     and sends the information to the application program so that it can
     queue 'InputEvent' objects which the app can then process.

     The argument is a 'X11TerminalStream' object, which is normally
     created with a 'X11Pane' object, and which programs can refer to by
     the 'X11Pane' object's 'inputStream' instance variable.

     This is the lower-level function that the 'openEventStream' (class
     'X11Pane') method uses to begin communicating with the X display
     server.  For an example, refer to the 'X11TerminalStream' section.
     *Note X11TerminalStream::.

'__ctalkUNIXSocketOpenReader (char *SOCKETPATH)'
     Opens a UNIX domain socket, binds the socket to the path given by
     SOCKETPATH, and places the socket in listening mode.

     Returns the file descriptor of the new socket on success, or -1 if
     an error occured, in which case the C library sets the variable
     'errno'.

'__ctalkUNIXSocketOpenWriter (char *SOCKETPATH)'
     Opens a UNIX domain socket and connects to the socket given by
     SOCKETPATH.

     Returns the file descriptor of the new socket on success, or -1 if
     an error occurs, in which case the C library sets the variable
     'errno'.

'__ctalkUNIXSocketRead (int SOCKFD, void * BUF_OUT)'
     Reads data from the socket given by SOCKFD.  On success, returns
     the data read in BUF_OUT and the return value is the number of
     bytes read.  On error returns -1 and the C library sets the
     variable ERRNO.

'__ctalkUNIXSocketShutdown (int SOCKFD, int HOW)'
     This function is a wrapper for the C library's 'shutdown' function.
     Shuts down the socket identified by the SOCKFD argument.  The
     second argument, HOW, can be either 'SHUT_RD, SHUT_WR, or SHUT_RW.'
     These constants are defined in 'UNIXNetworkStream' class and
     described in the 'shutdown(1)' manual page.

     The function returns 0 on success, or -1 if an error occurred.

'__ctalkUNIXSocketWrite (int SOCKFD, void * DATA, int LENGTH)'
     Writes LENGTH bytes of DATA to the socket given by SOCKFD.

     On success returns the number of bytes written, or returns -1 on
     error, in which case the C library sets the variable 'errno'.

'__ctalkUTCTime (void)'
     Returns an 'int' with the system's UTC time.  This function is
     currently a wrapper for the 'time(2)' function.  Because
     'time(2)''s argument is an 'int *', it can often be more reliable
     to use '__ctalkUTCTime' and let the library worry about the
     argument's storage.  There is also a template for 'time(2)' if you
     want to use the function directly in complex expressions.

'__ctalkWarning (char *FMT, ...)'
     Prints a formatted message to the terminal.  Unlike '_warning' and
     other functions, does not add line numbers or input file
     information to the output.

'__ctalkWrapText (unsigned int DRAWABLE, unsigned int GC_PTR, OBJECT *TEXT_LIST, int PANE_WIDTH, int LMARGIN)'
     Formats the text in TEXT_LIST to be displayed between LMARGIN and
     PANE_WIDTH (the right edge of the drawing surface given as the
     first argument..  The TEXT_LIST list should have been generated by
     '__ctalkSplitText'.  The '__ctalkWrapText' function uses the
     current typeface to determine character widths.  If no font or
     typeface is selected, uses the default font, "fixed" to format the
     text.

'__ctalkX11CloseClient (OBJECT *PANE_OBJECT)'
     Closes the main program's connection to the X11 client and exits
     the client process.

'__ctalkX11CloseParentPane (OBJECT *PANE_OBJECT)'
     Closes and deletes an application's main X11 window, and its
     buffers and other data.  Does not delete subpanes - see
     __ctalkCloseX11Pane () (above) to delete subpanes.  Applications
     should delete subpanes before closing and deleting the main window.
     For an example of the functions' use, refer to the method 'X11Pane
     : deleteAndClose'.  *Note X11Pane::.

'__ctalkX11ClearRectangleBasic (void *DISPLAY, int VISUAL_ID, int GC_PTR, int X, int Y, int WIDTH, int HEIGHT)'
     Clear a rectangle of a visual type like a pixmap to the background
     color.

'__ctalkX11Colormap (void)'
     Returns the X resource ID of the display's default colormap.  It's
     contained in a library function because the X headers define some
     of the DefaultColormap's dependent macros after DefaultColormap,
     which is not compatible with the ctpp preprocessor.

'__ctalkX11CopyPixmapBasic (void *DISPLAY, int DEST_DRAWABLE_ID, int DEST_GC_PTR, int SRC_DRAWABLE_ID, int SRC_X_ORG, int SRC_Y_ORG, int SRC_WIDTH, int SRC_HEIGHT, int DEST_X_ORG, int DEST_Y_ORG)'
     Copies the drawable SRC_DRAWABLE_ID to DEST_DRAWABLE_ID, with the
     dimensions of the source graphic given by SRC_X_ORG, SRC_Y_ORG,
     SRC_WIDTH, and SRC_HEIGHT.  The image is drawn with its upper
     left-hand corner positioned at DEST_X_ORG, DEST_Y_ORG on the
     destination drawable.

     This function is called by 'X11CanvasPane' : 'copy'.  For an
     example, refer the 'X11CanvasPane' classes' description.  *Note
     X11CanvasPane::.

'__ctalkX11CreateGC (void *DISPLAY, int DRAWABLE)'
     Create a X Graphics Context and return its address as a 'void *'.
     The GC is created with the following values:


          foreground     white
          background     black
          fill_style     FillSolid
          function       GXcopy
          font           fixed


'__ctalkX11CreatePixmap (void *DISPLAY, int X_DRAWABLE, int WIDTH, int HEIGHT, int DEPTH)'
     reate a X pixmap and return its X resource ID as an unsigned int.

'__ctalkX11CreatePaneBuffer (OBJECT *PANE_OBJECT, int WIDTH, int HEIGHT, int DEPTH)'
     Create the buffers for a pane object's X window.  Applications
     normally call this function when the pane object is created or when
     a subpane is attached to a parent pane.  This function sets the
     PANE_OBJECT'S 'paneBuffer' and 'paneBackingStore' instance
     variables.

'__ctalkX11DeletePixmap (int DRAWABLE_ID)'
     Delete the server-side pixmap whose ID is given as the argument.

'__ctalkX11Display (void)'
     Return a pointer to the X display, opening the display if
     necessary.

'__ctalkX11DisplayHeight (void)'
     Returns an 'int' with the display's height in pixels.

'__ctalkX11DisplayWidth (void)'
     Returns an 'int' with the display's width in pixels.

'__ctalkX11FontCursor (OBJECT *CURSOR_OBJECT, int CURSOR_ID)'
     Set CURSOR_OBJECT's value to a X11 CURSOR_ID.  Cursor ID's are
     defined by the X server in the include file 'X11/cursorfont.h'.
     *Note X11Cursor::.

'__ctalkX11FreeGC (int GC_ADDR)'
     Free the X11 graphics context pointed to by GC_ADDR.  The address
     of the GC is given as an 'int' which does not require any special
     handling by methods; the library function casts GC_ADDR to a 'GC
     *'.

'__ctalkX11FreePaneBuffer (OBJECT *PANE_OBJECT)'
     Release the server-side buffers used by PANE_OBJECT.  Note that
     this function is being phased out; programs should use
     '__ctalkX11DeletePixmap', which does not rely on hard-coded
     instance variable names.

'__ctalkX11FreeSizeHints (void)'
     Frees the data allocated by '__ctalkX11SetSizeHints ()', below.

'__ctalkX11GetSizeHints (int WIN_ID, int *X_ORG_RETURN, int *Y_ORG_RETURN, int *WIDTH_RETURN, int *HEIGHT_RETURN, int *WIN_GRAVITY_RETURN, int *FLAGS_RETURN)'
     Get the actual size and placement of the window, as reported by the
     X server, after the window is created, normally with
     '__ctalkCreateX11MainWindow ()'.

'__ctalkX11InputClient (OBJECT *STREAMOBJECT int FD)'
     The 'X11TerminalStream' input client.  This function is not used
     directly by any method but is a process of the
     '__ctalkOpenX11InputClient' function, above.

'__ctalkX11MakeEvent (OBJECT *EVENTOBJECT_VALUE_VAR, OBJECT *inputqueue)'
     Encapsulates much of the function of the 'X11TerminalStream :
     queueInput' method: receives the data for an X event from the X11
     input client and saves it in an 'InputEvent' object, then queues
     the 'InputEvent' object in the 'X11TerminalStream''s 'inputQueue'.

'__ctalkX11MoveWindow (OBJECT *PANE_OBJECT, int X, int Y)'
     Move PANE_OBJECT's window so that its origin is at X,Y.

'__ctalkX11OpenInputClient (OBJECT *STREAMOBJECT)'
     The library interface of the 'X11TerminalStream' class's input
     client.  This function is called by 'openInputClient' (class
     'X11TerminalStream').  The STREAMOBJECT argument is a
     'X11TerminalStream' object, generally the stream created by 'new'
     (class 'X11Pane').  *Note X11TerminalStream::.

'__ctalkX11ParseGeometry (char *GEOMSTRING, int* X, int* Y, int* Y, int* WIDTH, int* HEIGHT)'
     Parses a X11 geometry string and returns the values specified in
     the X, Y, WIDTH, or HEIGHT variables.  If the geometry string does
     not specify one of these values, sets the corresponding variable to
     zero.

     For information about the format of a X11 geometry specification,
     refer to the 'XParseGeometry(3)' manual page.

'__ctalkX11PaneDrawCircleBasic (void *DISPLAY, int WINDOW_ID, int GC, int CENTER_X, int CENTER_Y, int RADIUS, int FILL, int PEN_WIDTH, int ALPHA, char *FG_COLOR_NAME, char * BG_COLOR_NAME)'
     Draws a circle centered at CENTER_X,CENTER_Y with radius RADIUS.
     The dimensions are given in pixels.  If FILLED is true, then the
     function draws a filled circle; otherwise, the circle's edge has
     the width PEN_WIDTH.

     This function is a synonym for '__ctalkGUIPaneDrawCircleBasic'.

'__ctalkX11PaneDrawRectangleBasic (void *DISPLAY, int DRAWABLE_ID, unsigned long intGC_PTR, int XORG, int YORG, int XSIZE, int YSIZE, int FILL, int PEN_WIDTH, char *PEN_COLOR, int CORNER_RADIUS)'
     Draw a rectangle on the drawable with the ID DRAWABLE_ID, with the
     dimensions givent in the arguments.  If FILL is non-zero, draws a
     filled rectangle; otherwise uses the line width given by the
     PEN_WIDTH argument.  If CORNER_RADIUS is non-zero, draws a
     rectangle with rounded corners with the radius in pixels given by
     CORNER_RADIUS.

     This function is a synonym for '__ctalkGUIPaneDrawRectangleBasic'.

'__ctalkX11PanePutStr (OBJECT *PANE_OBJECT, int X, int Y, char *STR)'
     Displays STR at window coordinates X,Y on PANE_OBJECT's drawable in
     the pane's current font.  If 'pane_object' is buffered, writes the
     string to the pane's buffers, and the string is displayed at the
     next 'refresh' method call.

     Note that this method is slowly being superceded because it relies
     on instance variable names that are defined in several class
     libraries.  If the application uses different drawables than
     PANE_OBJECT's window surface or its buffers, use
     '__ctalkX11PanePutStrBasic' instead.

'__ctalkX11SetSizeHints (int X, int Y, intp WIDTH, int HEIGHT, int GEOM_FLAGS)'
     Set the window size hints based on the window dimensions set by the
     application.  The GEOM_FLAGS argument has the format provided by
     the '__ctalkX11ParseGeometry ()' function, above.  Normally this
     function is called by a 'X11Pane*' class when initializing a
     window.

     If an application calls this function, it must also call
     '__ctalkX11FreeSizeHints ()', above.

'__ctalkX11ResizePaneBuffer (OBJECT *PANE_OBJECT, int WIDTH, int HEIGHT)'
     Resize PANE_OBJECT's buffers to width WIDTH and height HEIGHT.  New
     programs should use '__ctalkX11ResizePixmap', which does not rely
     on hard-coded instance variable names.

'__ctalkX11ResizePixmap (void *DISPLAY, int, PARENT_DRAWABLE_ID, int SELF_XID, int GC, int OLD_WIDTH, int OLD_HEIGHT, int NEW_WIDTH, int NEW_HEIGHT, int DEPTH, int *NEW_PIXMAP_RETURN)'
     Create a new Pixmap with the dimensions NEW_WIDTH and NEW_HEIGHT
     that contains the contents of the original pixmap.  Returns the X
     ID of the new pixmap in NEW_PIXMAP_RETURN.

'__ctalkX11ResizeWindow (OBJECT *PANE_OBJECT, int WIDTH, int HEIGHT, int DEPTH)'
     Resize a pane object's X window.  Returns '1' on success, '0' if
     the window's new size is <= its current size, and '-1' if there is
     an error.

'__ctalkX11PaneClearRectangle (OBJECT *PANE_OBJECT, int X, int Y, int WIDTH, int HEIGHT)'
     Clears a rectangle in PANE_OBJECT's window.  Note that this
     function is deprecated - it relies on the Pane object having
     specific instance variables.  New programs should use
     '__ctalkX11PaneClearRectangleBasic' instead.

'__ctalkX11PaneDrawLine (OBJECT *PANE_OBJECT, OBJECT *LINE_OBJECT, OBJECT *PEN_OBJECT)'
     Draw a line on the drawable identified by PANE_OBJECT *Note
     X11Pane::, with the endpoints given by LINE_OBJECT *Note Line::,
     with the line width and color defined in PEN_OBJECT *Note Pen::.
     This function is a synonym for '__ctalkGUIPaneDrawLine' on systems
     with a X Window System display.

'__ctalkX11PaneDrawLineBasic (int DRAWABLE_ID, int GC_PTR, int X_START, int Y_START, int X_END, int Y_END, int PEN_WIDTH, int ALPHA, char *PEN_COLOR)'
     Draw a line between the points (x_start,y_start) and (x_end, y_end)
     with the color, and transparency using the drawable ID, graphics
     context, and pen color, width, and transparency given as arguments.

'__ctalkX11PaneDrawPoint (OBJECT *PANE_OBJECT, OBJECT *point_object, OBJECT *PEN_OBJECT)'
     Draw a point on the drawable id given in PANE_OBJECT *Note
     X11Pane::, with the location given by POINT_OBJECT *Note Point::,
     with the radius and color given by PEN_OBJECT *Note Pen::.  This
     function is a synonym for '__ctalkGUIPaneDrawPoint' on systems that
     use the X Window system.

'__ctalkX11PaneDrawPointBasic (void *DISPLAY, int DRAWABLE_ID, int GC_PTR, int X, int Y, int PEN_WIDTH, int ALPHA, char *PEN_COLOR)'
     Draw a point of the size, position, color, and transparency using
     the drawable ID, graphics context, and Pen color, transparency, and
     width given as arguments.

'__ctalkX11PaneClearWindow (OBJECT *PANE_OBJECT)'
     Clears PANE_OBJECT's window.  Note that this function is deprecated
     - it relies on the Pane object having specific instance variables.
     New programs should use

'__ctalkX11PaneDrawRectangle (OBJECT *PANE_OBJECT, OBJECT *RECTANGLE_OBJECT, OBJECT *PEN_OBJECT, Integer FILL)'
     Draw a rectangle on the drawable identified by PANE_OBJECT *Note
     X11Pane::, with the dimensions given by RECTANGLE_OBJECT *Note
     Rectangle::, and with the line width and color given by PEN_OBJECT
     *Note Pen::.  If FILL is true, draw a filled rectangle.

'__ctalkX11PanePutStrBasic (void *DISPLAY, int VISUAL_ID,int GC_PTR, int X, int Y, char *TEXT)'
     Write the string TEXT on the drawable named by VISUAL_ID at X,Y
     using the graphics context pointed to by GC_PTR.  If the drawable
     is a 'X11CanvasPane' buffer, the text will not be visible until the
     next call to the pane's 'refresh' method.

'__ctalkX11PaneRefresh (OBJECT *PANE_OBJECT, int SRC_X_ORG, int SRC_Y_ORG, int SRC_WIDTH, int SRC_HEIGHT, int DEST_X_ORG, int DEST_Y_ORG)'
     If PANE_OBJECT is a buffered pane, copy the contents of the pane
     buffer(s) within the rectangle given by SRC_X_ORG, SRC_Y_ORG,
     SRC_WIDTH, SRC_HEIGHT to the visible window at DEST_X, DEST_Y.

'__ctalkX11QueryFont (OBJECT *FONT_OBJECT, char *XLFD)'
     Fills in FONT_OBJECT's 'ascent', 'descent', 'maxWidth', 'height',
     and 'fontDesc' instance variables with the font metrics returned by
     the X server for the font given by XLFD.

'__ctalkX11SetBackground (OBJECT *PANE_OBJECT, char *COLOR_NAME)'
     Set PANE_OBJECT's background color to COLOR_NAME.  This function is
     being phased out because it uses named instance variables of
     PANE_OBJECT.  Programs should use '__ctalkX11SetBackgroundBasic
     ()', below, instead.

'__ctalkX11SetBackgroundBasic (void *DISPLAY, int visual_xid, int GC_PTR, char *COLOR)'
     Sets the background color of any class with a X11 visual and
     graphics context.

'__ctalkX11SetForegroundBasic (void *DISPLAY, int visual_xid, int GC_PTR, char *COLOR)'
     Sets the foreground color of any class with a X11 drawable and
     graphics context.

'__ctalkX11SetResource (void *DISPLAY, int DRAWABLE_ID, char *RESOURCE_NAME, char *RESOURCE_VALUE)'
     Sets the X11 resource RESOURCE_NAME to RESOURCE_VALUE for the
     drawable identified by DRAWABLE_ID.

'__ctalkX11SetWMNameProp (OBJECT *PANE_OBJECT, char *NAME)'
     Sets the WMName property PANE_OBJECT's window to NAME.  This is the
     window property that window managers use to set the window frame's
     title.

'__ctalkX11UseCursor (OBJECT *PANE_OBJECT, OBJECT *CURSOR_OBJECT)'
     Sets the X11 cursor of PANE_OBJECT to CURSOR_OBJECT.  *Note
     X11Cursor::.

'__ctalkX11UseXRender (bool B)'
     If B is true, draw using the X Render entension if it is available.
     If B is false, use Xlib for drawing even if X Render is available.

'__ctalkX11UseFontBasic (void *DISPLAY, int DRAWABLE_ID, int GC_PTR, char *FONT_DESC)'
     Sets the font of the graphics context GC_PTR and drawable
     DRAWABLE_ID for further string printing operations.  See use in
     'X11Bitmap' class, where the GC pointer, which is an opaque object,
     is encoded as an 'int', in order to avoid confusion with 'OBJECT
     *'s'.

'__ctalkX11UsingXRender (void)'
     Returns a boolean value of True if the program is using the X
     Render extension for drawing, False otherwise.  To use the X Render
     extension, the extension and its supporting libraries must be
     available when the Ctalk libraries are built, and the program has
     not changed the default setting, normally via
     '__ctalkX11UseRender', above.

'__ctalkX11XPMFromData (void *DISPLAY, int DRAWABLE_ID, int GC_PTR, int X_ORG, int Y_ORG, char **XPM_DATA)'
     Draw a X pixmap at the x,y position on the drawable named by
     DRAWABLE_ID.  The XPM_DATA argument is the declaration of the data
     given in a XPM file, and has the C data type 'char **'.

'__ctalkX11XPMInfo (void *DISPLAY, char **XPM_DATA, int *WIDTH_RET, int *HEIGHT_RET, int *N_COLORS_RET, int *CHARS_PER_COLOR_RET)'
     Returns the width, height, number of colors, and characters per
     color of the XPM data referred to by XPM_DATA

'__ctalkXPMToGLTexture (char **XPM_DATA, unsigned short int ALPHA, int *WIDTH_OUT, int *HEIGHT_OUT, void **TEXEL_DATA_OUT)'
'__ctalkXPMToGLXTexture (char **XPM_DATA, unsigned short int ALPHA, int *WIDTH_OUT, int *HEIGHT_OUT, void **TEXEL_DATA_OUT)'
     Read the XPM data pointed to by XPM_DATA, and return the OpenGL
     texture data pointed to by TEXEL_DATA_OUT.

     The ALPHA parameter defines the texture data transparency and
     should be in the range 0 - 0xffff.  The alpha channel's effect may
     not be apparent in the image that is displayed, because OpenGL has
     its own set of functions to perform texture blending.

     For Mesa OpenGL implementations, like those found on Linux systems,
     textures have the format GL_RGBA and the data type
     GL_UNSIGNED_INT_8_8_8_8.  To define a basic 2-dimensional texture
     to the OpenGL API, use an OpenGL function like this.


          glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, my_width, my_height, 0,
                        GL_RGBA, GL_UNSIGNED_INT_8_8_8_8, my_texel_data);


     Apple OpenGL implmentations use a different internal format, so a
     program would define a texture from the '__ctalkXPMToGLXTexture'
     function's output like this.


          glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, my_width, my_height, 0,
                        GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, my_texel_data);


     Note that the function does not make any changes for 1-dimensional
     or 3-dimensional textures, nor for textures that might be rendered
     as mipmaps.  The specific texture parameters depend on the nature
     of the texture and the surface that it's applied to...  in most
     cases, though OpenGL works best with a XPM that has a geometry that
     is an even multiple of 2; e.g., 512x512 or 1024x1024 pixels.

     Both functions are similar, and generic enough to work with any
     OpenGL toolkit - the main difference is that either of the
     functions can be implemented for either a GLUT or GLX development
     environemnt independently, and that the GLX version is compatible
     with 64-bit machines.

'__ctalkXftAscent (void)'
     Returns an 'int' with the currently selected font's height in
     pixels above the baseline.

'__ctalkXftDescStr (void)'
     Returns a string with the font descriptor of the currently selected
     font that containing the attributes that the Ctalk Xft library
     uses: family, point size, slant, and weight.

     For the complete descriptor string that the Freetype library
     derives from the selected font's pattern, refer to the
     '__ctalkXftSelectedFontDescriptor' function.

'__ctalkXftAscent (void)'
     Returns an 'int' with the currently selected font's height in
     pixels below the baseline.

'__ctalkXftFgRed (void)'
'__ctalkXftFgGreen (void)'
'__ctalkXftFgBlue (void)'
'__ctalkXftFgAlpha (void)'
     Returns 'int' values 0-0xffff for the selected font's red, green,
     blue, and alpha values.

'__ctalkXftRed (unsigned short VAL)'
'__ctalkXftGreen (unsigned short VAL)'
'__ctalkXftBlue (unsigned short VAL)'
'__ctalkXftAlpha (unsigned short VAL)'
     Set the current Xft font's foreground color channels individually.
     The value of the argument must be between 0 and 65535 (0xffff hex).

'__ctalkXftFontPathFirst (char *PATTERN)'
     Return the path of the first font file that matches PATTERN.  If
     pattern is '*' or an empty string ('""'), return the first path of
     all the fonts that are available to the library.

'__ctalkXftFontPathNext (void)'
     Return a string containing the path of the next font file that
     matches the pattern given to '__ctalkXftFontPathFirst ()', above.

'__ctalkXftGetStringDimensions (char *STR, int *X, int *Y, int *WIDTH, int *HEIGHT, int * RBEARING)'
     Return the x and y origin, and width and height of STR in the
     currently selected FreeType font.  Because the dimensions are
     absolute, X and Y are normally 0.  If the Xft library is not
     initialized or not available, the function returns 0 for all of the
     dimensions.  If the library is initialized but the application
     hasn't yet specified a font, then the value returned for RBEARING
     is '0'.

'__ctalkXftHeight (void)'
     Returns an 'int' with the font's height above and below the
     baseline in pixels, and including any additional vertical spacing.

'__ctalkXftInitLib (void)'
     Initializes the Freetype outline font library.  If Ctalk isn't
     built with libXft or Fontconfig support, this function returns
     'ERROR' ('-1'.  This is the only Xft-related function to return
     silently; all other functions exit with an error message.  However
     applications can check the 'X11Pane : haveXft' instance variable to
     determine if the libraries were initialized.  *Note haveXft::.

     If the system is not configured to use outline fonts *Note
     X11FreeTypeFont::, then the function prints a message and exits the
     program.  If the library is already initialized, then this function
     returns 'SUCCESS' '0'.

'__ctalkXftInitialized (void)'
     Returns TRUE if the FreeType font library is available and
     initialized, FALSE otherwise.

'__ctalkXftIsMonospace (void)'
     A read-only function that returns 'true' if the program's selected
     font is monospace, false otherwise.

'__ctalkXftListFontsFirst (char *XFTPATTERN)'
     Initializes the FreeType library to list fonts and returns a 'char
     *' that contains the first font descriptor that contains the string
     XFTPATTERN.  If XFTPATTERN is emtpy ('""') or '*', then the
     function returns the first font, and the following calls to
     '__ctalkXftListFontsNext ()' match all of the fonts available to
     the FreeType library.

'__ctalkXftListFontsNext (void)'
     Returns a 'char *' with the next matching font descriptor of a font
     listing initialized by '__ctalkXftListFontsFirst ()'.

'__ctalkXftListFontsNext (void)'
     Cleans up after a series of list fonts function calls.

'__ctalkXftMajorVersion (void)'
     Returns an 'int' with the Xft library's major version number.  Like
     all libXft library functions, '__ctalkXftMajorVersion' causes the
     program to exit with an error if Ctalk is built without libXft
     support.

'__ctalkXftMaxAdvance (void)'
     Returns an 'int' with the maximum horizontal dimension in pixels of
     any of the selected font's characters.

'__ctalkXftMinorVersion (void)'
     Returns an 'int' with the Xft library's minor version number.
     Returns an 'int' with the Xft library's major version number.  Like
     all libXft library functions, '__ctalkXftMinorVersion' causes the
     program to exit with an error if Ctalk is built without libXft
     support.

'__ctalkXftQualifyFontName (char *PATTERN)'
     Return the qualified font name string for PATTERN.

'__ctalkXftRequestedFamily (void)'
'__ctalkXftRequestedPointSize (void)'
'__ctalkXftRequestedSlant (void)'
'__ctalkXftRequestedWeight (void)'
'__ctalkXftRequestedDPI (void)'
     Returns the font attributes requested after parsing a Fontconfig
     string by '__ctalkXftSelectFontFromFontConfig' and
     '__ctalkXftSelectFontFromXLFD'.

'__ctalkXftRevision (void)'
     Returns an 'int' with the Xft library's revision number.  Returns
     an 'int' with the Xft library's major version number.  Like all
     libXft library functions, '__ctalkXftRevision' causes the program
     to exit with an error if Ctalk is built without libXft support.

'__ctalkXftSelectFontFromFontConfig (char *FONTDESC)'
     Parses a Fontconfig font descriptor and selects the font.  For
     information about selecting fonts using Fontconfig descriptors,
     refer to the 'X11FreeTypeFont' class.  *Note X11FreeTypeFont::.

'__ctalkXftShowFontLoad (int WARNINGLEVEL)'
     Enables or disables the display on standard output of fonts that
     the library is loading.  The Ctalk library defines the following
     constants.


          XFT_NOTIFY_NONE
          XFT_NOTIFY_ERRORS
          XFT_NOTIFY_LOAD
          XFT_NOTIFY_VERBOSE


     See also '__ctalkXftVerbosity'.

     Note that programs should call this function before launching any
     processes.  Generally, this is before the program calls the
     'X11Pane : openEventStream' method.  Otherwise, the program will
     only display message for the process that this function was called
     from.

'__ctalkXftSelectedFamily (void)'
     Returns a 'char *' string that contains family of the selected
     font.

'__ctalkXftSelectedPointSize (void)'
     Return the point size of the selected font as a C DOUBLE.

'__ctalkXftSelectedSlant (void)'
     Returns an 'int' that contains slant of the selected font.

'__ctalkXftSelectedSlant (void)'
     Returns an 'int' that contains slant of the selected font.

'__ctalkXftSelectedFontDescriptor (void)'
     Returns a 'char *' string that contains the descriptor of the
     selected font.

'__ctalkXftSelectedFontDescriptor (void)'
     Returns a 'char *' string that contains the file path descriptor of
     the selected font.

'__ctalkXftSelectFont (char *FAMILY, int SLANT, int WEIGHT, int DPI, double POINT_SIZE)'
     Selects the FreeType font that matches the arguments.  Returns 0 if
     successful in matching the font given by the arguments.  If no
     matching font is found, the current font does not change, and the
     method returns -1.  The 'selectFont' method (class
     'X11FreeTypeFont' contains a description of the parameters
     recognized by the function.  *Note X11FreeTypeFont-selectFont::.

'__ctalkXftSelectFontFromXLFD (char *XLFD)'
     Selects fonts in the FreeType font library using a XLFD
     specification.  When selecting outline fonts: the libraries use the
     fields: family, weight, slant, dpi-x, and pixel height.  An example
     XLFD would be the following.


          -*-Nimbus Sans L-medium-r-*-*-12-72-*-*-*-*-*-*


     Note that the function does not translate between bitmap and
     outline font families - the font libraries pick the closest match
     to the font metrics given in the XLFD, regardless of type style.

     Also, the outline font libraries use a single dpi metric for both
     the vertical and horizontal dot pitch of the display, so only the
     'resx' field of the XLFD is actually used.

'__ctalkXftSetForegrounc (int RED, int GREEN, int BLUE, int ALPHA)'
     Sets the red, green, blue, and alpha values for the selected font.
     The values are 'ints' and have a range of 0-0xffff.

'__ctalkXftSetForegroundFromNamedColor (String COLORNAME)'
     Sets the selected outline font's red, green, and blue values from
     the named X11 color given as the argument.

'__ctalkXftSelectedFontDescriptor (void)'
     Return the font descriptor of the selected font as a 'char *'.

'__ctalkXftVerbosity (void)'
     Returns the current Xft message reporting level.  The values that
     are defined in 'ctalk/ctalkdefs.h' are:


          XFT_NOTIFY_NONE
          XFT_NOTIFY_ERRORS
          XFT_NOTIFY_LOAD
          XFT_NOTIFY_VERBOSE


     See also '__ctalkXftShowFontLoad.'

'__ctalkXftVersion (void)'
     Returns an 'int' with the Xft library's version number, which is
     (__ctalkXftMajorVersion () * 10000) + (__ctalkXftMinorVersion *
     100) + __ctalkXftRevsion ().

'__ctalk_arg (char *RCVR, char *METHOD,void *ARG)'
     Define an argument for the following '__ctalk_method ()' call.

'__ctalk_arg_cleanup (OBJECT *RESULT)'
     Remove an argument used by the previous method call.  If used
     within an expression, then RESULT, the return object of the
     previous method call, may not be NULL. If used after a
     '__ctalk_method ()' call, then RESULT may be NULL.

'__ctalk_arg_internal (int N_TH_ARG)'
     Return the N_TH_ARG that method was called with, as an 'OBJECT *.'
     The first argument's index on the stack is 0 within the caller's
     argument frame, and the last argument is METHOD -> N_PARAMS - 1.

'__ctalk_arg_value_internal (int N_TH_ARG)'
     Return the value object of the N_TH_ARG that method was called
     with, as an 'OBJECT *,' if available.  If it isn't (for example, if
     the value instance variable is used as an argument alone, and not
     the parent object), then the function returns the argument object.

     As with '__ctalk_arg_internal (),' The first argument's index on
     the stack is 0 within the caller's argument frame, and the last
     argument is METHOD -> N_PARAMS - 1.

'__ctalk_arg_pop (void)'
'__ctalk_arg_pop_deref (void)'
     Removes and returns the last object pushed onto the argument stack.
     '__ctalk_arg_pop_deref' also decreases the object's reference count
     by one.

'__ctalk_class_initialize (void)'
     Called by __ctalk_init () to perform any neeeded initialization the
     before any classes are defined.

'__ctalk_define_class (ARG**ARGS)'
     The primitive method that Ctalk executes when it encounters the
     'class' keyword.

'__ctalk_dictionary_add (OBJECT*OBJECT)'
     Add an object to the Ctalk global dictionary, or, if the object is
     a class object, to the class library.

'__ctalk_exitFn (int APP_EXIT)'
     Called just before a 'return' statement when returning from a C
     function.  If the function is 'main', then APP_EXIT should be
     non-zero, to indicate that the program is finished, and to clean up
     the global objects and the class library.

'__ctalk_initFn (void)'
     Called at the beginning of a function to register the function's
     name.

'__ctalk_initLocalObjects (void)'
     Called during method or function initialization to delete old local
     objects before creating new objects.

'__ctalk_get_object (char *NAME, char *CLASSNAME)'
'__ctalk_get_object_return (char *NAME, char *CLASSNAME)'
     Retrieves the object NAME.  If CLASSNAME is non-null, retrieves the
     object by name and class.

     The '__ctalk_get_object_return' function is similar, but it is used
     only as an operand to a 'return' keyword.  The function checks the
     call stack's local object cache, in case an expression cleanup
     removed the most recent call's local variable list during recursive
     or successive calls of the same method.

'__ctalk_init (char *PROGRAM_NAME)'
     Initialize the Ctalk class libraries when the program starts.  The
     argument, PROGRAM_NAME is normally 'argv[0]'.

'__ctalk_method (char *RCVR_OBJECT_NAME, OBJECT *(METHOD_FN *)(), char *METHOD_NAME)'
     Perform a simple Ctalk method call, in places where the call can be
     used after one or more calls to '__ctalk_arg' and followed by
     '__ctalk_arg_cleanup'.  For complex expressions or expressions
     occurring within control structures, Ctalk normally uses
     '__ctalkEvalExpr' instead.

'__ctalk_new_object (ARG **ARGS)'
     The primitive function that is called by the 'new' method.

'__ctalk_primitive_method (char *RCVR_NAME, char *METHOD_NAME, int ATTRS)'
     Call primitive method METHOD_NAME with receiver RCVR_NAME.  The
     ATTRS argument can be METHOD_SUPER_ATTR, which uses the receiver's
     superclass as the receiver redirects the method's arguments to a
     superclass method.

'__ctalk_process_exitFn (int APP_EXIT)'
     Similar to '__ctalk_exitFn', above, except that the function is
     meant to be invoked by child processes on exit, so it does not try
     to manage other child processes.

'__ctalk_receiver_pop (void)'
     Pops the most recent receiver object off the receiver stack and
     returns it.

'__ctalk_receiver_push (OBJECT *OBJECT)'
     Push OBJECT onto the receiver stack, without changing its reference
     count.  This can be useful in conjunction with
     '__ctalk_receiver_pop' to quickly retrieve the current receiver
     object.


           currentReceiver = __ctalk_receiver_pop ();
           __ctalk_receiver_push (currentReceiver);


'__ctalk_register_c_method_arg (char *DECL, char *TYPE, char *QUALIFIER, char *QUALIFIER2, char *STORAGE_CLASS, char *NAME, int TYPE_ATTRS, int N_DEREFS, int INITIALIZER_SIZE, int SCOPE, int ATTRS, void *VAR)'
     Registers a C variable for use as an argument in the following
     method call.  The arguments provide the information given by the
     variable's declaration so that it can be re-created by Ctalk.  The
     last parameter, VAR, contains the address of the actual C variable
     in memory.

     There are also abbreviated versions of
     '__ctalk_register_c_method_arg',
     __ctalk_register_c_method_arg_b|c|d, which work similarly but don't
     try to handle syntax elements that aren't present in the variable's
     declaration.

'__ctalk_self_internal (void)'
     Return the current method's receiver object as an 'OBJECT *'.

'__ctalk_self_internal (void)'
     Return the current method receiver's 'value' instance variable as
     an 'OBJECT *' if it exists, or the receiver object otherwise (for
     example, if the receiver is the 'value' instance variable itself
     instead of the parent object).

'__ctalk_set_global (char *NAME, char *CLASSNAME)'
     Adds the object NAME of class CLASSNAME to ctalk's global
     dictionary.  This function is normally called during program
     initialization.

'__ctalk_set_local (OBJECT *OBJ)'
'__ctalk_set_local_by_name (char *OBJ_NAME)'
     Make OBJ a method- or function-local object.  This function is
     normally called during a method or function's initialization when
     the local objects are created with a 'new' method.  The
     '__ctalk_set_local_by_name' function is similar, except that it
     retrieves the global object by looking up its name in the global
     dictionary.

'__ctalk_to_c_char (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'char' if possible.  If the value
     is an ASCII code, converts the value to the actual 'char'.

'__ctalk_to_c_char_ptr (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'char *'.  This function has been
     mostly replaced by '__ctalkToCCharPtr', which you should use
     instead.

'__ctalk_to_c_double (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'double'.  This function performs
     the conversion with the C library function 'strtod'.  Currently
     only supports the translation of base 10 values.

'__ctalk_to_c_int (OBJECT *OBJ)'
     Returns the value of OBJ as a C 'int'.  This function handles
     values in hexadecimal, octal, using the C library function
     'strtol', and binary, using Ctalk's internal routines.  Also
     handles ASCII-to-char conversions if the argument is a 'Character'
     object.

'__ctalk_to_c_longlong (OBJECT *obj)'
     Returns the value of OBJ, which is normally an instance of
     'LongInteger' class, as a C 'long long int'.  This function uses
     the C library function 'strtoll' to perform the conversion.
     Currently only handles 'LongInteger' object values in base 10.

'__ctalk_to_c_ptr (OBJECT *O)'
     Translate the value of an object into a C 'void *.' If the value
     isn't a pointer, then return the address of the value in memory.

'__ctalk_to_c_ptr_u (OBJECT *O)'
     Translate the value of an object into a C 'void *.' This is an
     unbuffered verson of '__ctalk_to_c_ptr ()', above.  That is, if the
     value of the object is an empty string, '(NULL)', or '0x0', it
     returns 'NULL'.  This allows you to compare objects to 'NULLs' in C
     expressions without the generating compiler warnings.

     ('X11TextEditorPane' class)

'__edittext_delete_char (OBJECT *x11texteditorpane_object)'
'__edittext_delete_selection (OBJECT *x11texteditorpane_object)'
'__edittext_get_primary_selection (OBJECT *x11texteditorpan_eobject, void **buf_out, int *size_out)'
'__edittext_get_clipboard (OBJECT *x11texteditorpan_eobject, void **buf_out, int *size_out)'
'__edittext_insert_at_point (OBJECT *x11texteditorpane_object, int keycode, int shift_state, int keypress)'
'__edittext_line_end (OBJECT *x11texteditorpane_object)'
'__edittext_line_start (OBJECT *x11texteditorpane_object)'
'__edittext_xk_keysym (int KEYCODE, int SHIFT_STATE, int KEYPRESS)'
'__edittext_next_char (OBJECT *x11texteditorpane_object)'
'__edittext_next_line (OBJECT *x11texteditorpane_object)'
'__edittext_next_page (OBJECT *x11texteditorpane_object)'
'__edittext_prev_char (OBJECT *x11texteditorpane_object)'
'__edittext_prev_line (OBJECT *x11texteditorpane_object)'
'__edittext_prev_page (OBJECT *x11texteditorpane_object)'
'__edittext_scroll_down (OBJECT *x11texteditorpane_object)'
'__edittext_scroll_up (OBJECT *x11texteditorpane_object)'
'__edittext_text_start (OBJECT *x11texteditorpane_object)'
'__edittext_text_end (OBJECT *x11texteditorpane_object)'
'__edittext_point_to_click (OBJECT *x11texteditorpane_object, int pointer_x, int pointer_y)'
'__edittext_index_from_pointer (OBJECT *x11texteditorpane_object, int pointer_x, int pointer_y)'
'__edittext_insert_str_at_click (OBJECT *x11texteditorpane_object, int click_x, int click_y, char *)'
'__edittext_insert_str_at_point (OBJECT *x11texteditorpane_object, char *)'
'__edittext_set_clipboard_owner (OBJECT *x11texteditorpane_object)'
'__edittext_set_selection_owner (OBJECT *x11texteditorpane_object)'
'__edittext_recenter (OBJECT *x11texteditorpane_object)'
     Text editing functions used by 'X11TextEditorPane' objects.  For
     more information, refer to 'X11TextEditorPane' class..  *Note
     X11TextEditorPane::.

'__entrytext_set_selection_owner (void *DISPLAYPTR, unsigned int WIN_ID unsigned long int GC_PTR)'
'__entrytext_get_primary_selection (OBJECT *entrypane_object)'
'__entrytext_update_selection (void *DISPLAYPTR, unsigned int WIN_ID, unsigned long int GC_PTR)'
'__entrytext_send_selection (void *DISPLAYPTR, void * XEVENT)'
     These functions handle requesting ownership of the X display's
     primary selection, storing current values of the selection text
     that might be requested by other programs, and requesting the
     contents of the primary selection when another X application owns
     the selection.  The functions are normally called by methods in
     'X11TextEntryPane' class that handle X events.

'_error (char *FMT, ...)'
     Display an error message and exit the program.

'__inspector_trace (int STACK_INDEX)'
'__inspect_get_arg (int STACK_INDEX)'
'__inspect_get_receiver (int STACK_INDEX)'
'__inspect_get_global (char *OBJ_NAME)'
'__inspect_get_local (int STACK_INDEX, char *OBJ_NAME)'
'__receiver_trace (int STACK_INDEX)'
'__inspect_globals (void)'
'__inspect_locals (void)'
'__inspect_short_help (void)'
'__inspect_long_help (void)'
     Functions used internally by Ctalk's object inspector.  The
     function parameters are designed to be consistent with the syntax
     of the inspector commands, although not every function makes use of
     them.  For details refer to the 'inspect(3ctalk)' manual page, the
     'inspectors' section of the 'ctalktools.info' Texinfo manual, and
     the 'inspect' method in 'ObjectInspector' class.

'__rt_init_library_paths (void)'
     Initialize Ctalk's library paths.  The function first checks the
     value of the 'CLASSLIBDIRS' environment variable for a
     colon-separated list of directories, then adds the location of
     CLASSLIBDIR which is configured when Ctalk is built, and
     CLASSLIBDIR'ctalk'.

'__warning_trace (void)'
     A generic stack trace function that prints a trace of the call
     stack wherever it is inserted in a program.

'__xalloc (int SIZE)'
     Allocates a block of memory of SIZE characters and returns a
     pointer to the memory.  If the alloc call fails, generates an
     '_error' message and exits the program.

'__xfree (void **ADDR)'
     Frees the block of memory pointed to by *ADDR, then sets the ADDR
     to to NULL. *ADDR must be a block of memory previously allocated by
     '__xalloc', above, or a similar 'malloc' call.  When used in a
     program, wrapping ADDR in the 'MEMADDR()' macro provides the
     correct dereferencing for the allocated memory and its pointer.
     The example shows how the 'MEMADDR()' macro is used.


          char *my_ptr;

          my_ptr = (char *)__xalloc (BUF_SIZE);

          _... do stuff ..._

          __xfree (MEMADDR(my_ptr));


'__xrealloc (void **ADDR, int SIZE)'
     Re-allocates the block of memory pointed to by *ADDR to size.  If
     SIZE is larger than the original block of memory, the contents of
     ADDR are preserved.  As with '__xfree', above, the 'MEMADDR' macro
     provides the correct dereferencing for the reference to ADDR.

'_warning (char *FMT, ...)'
     Print a warning message.

'__objRefCntInc (obj_ref)'

     Increment the reference count of an object and its instance
     variables.  This function takes an object reference as its
     argument.  You can use the 'OBJREF' macro to cast the object to an
     object reference.

'__objRefCntDec (obj_ref)'

     Decrement the reference count of an object and its instance
     variables.  As with all of the '__objRefCnt*' functions,
     '__objRefCntDec' takes an object reference as its argument.  You
     can use the 'OBJREF' macro to cast the object to an object
     reference.

'__objRefCntSet (obj_ref, int REFCOUNT)'

     Set the reference count of an object and its instance variables to
     REFCNT.  As with all of the '__objRefCnt*' functions,
     '__objRefCntDec' takes an object reference as its argument.  You
     can use the 'OBJREF' macro to cast the object to an object
     reference.

     _Note:_ '__objRefCntSet' will not set an object's reference count
     to zero.  That is, if you give '0' as the second argument, the call
     has no effect.  Use '__objRefCntZero' instead.  That might sound
     silly, but it's much more reliable overall, in a
     programming-by-contract way.

'__objRefCntZero (obj_ref)'

     Set the reference count of an object and its instance variables to
     0 (zero).  As with all of the '__objRefCnt*' functions,
     '__objRefCntZero' takes an object reference as its argument.  You
     can use the 'OBJREF' macro to cast the object to an object
     reference.

     You should not need to use this function unless you're _completely_
     deleting an object.  Refer to the '__ctalkDeleteObject' function
     for more information.

'obj_ref_range_chk (OBJECT **HOSTOBJ, OBJECT **TARGETOBJECT)'
     Returns a 'bool' value of 'true' or 'false' depending on whether
     the host object and the target object it references occupy the same
     data segment.

'__refObj (OBJECT **OBJ1, OBJECT **OBJ2)'
     Assign OBJ2 to OBJ1.  If OBJ1 already points to an object,
     decrement its reference count.  Increment the reference count of
     OBJ2 by 1.  When calling functions that use 'OBJECT **' arguments,
     they correspond to the OBJREF_T typedef, and Ctalk defines the
     macro OBJREF() to cast an object to an OBJREF_T.

'_store_int (OBJECT *RECEIVER, OBJECT *arg)'
     This is a primitive that stores the value of ARG in RECEIVER, which
     is an 'Integer'.  Checks the class of 'arg', and if ARG is not an
     'Integer', converts it to an 'Integer' value.  If RECEIVER a
     pointer to a value, then it stores ARG as a fully-fledged object.

'BOOLVAL(INTEGERORBOOLVALUE)'
     This macro returns the value of an 'Integer' or 'Boolean' object,
     or any of 'Boolean's' subclasses (or just about any other scalar
     value), as a C 'bool'.  For an example of its use, refer to the
     entry for the *Note INTVAL_Macro::.

'INTVAL(INTEGEROBJECTVALUE)'
     A macro that returns the value of an 'Integer' object, or any of
     'Integer's' subclasses, as a C 'int'.  Uses an 'OBJECT *'s'
     '__o_value' member directly, as in this example.


          OBJECT *my_int_object_alias = myInt;

          int a = INTVAL(my_int_object_alias -> __o_value);


'is_zero_q (char *str)'
     Returns a 'bool' if the number represented by the string evaluates
     to zero, false otherwise.

'LLVAL(LONGINTEGERVALUE)'
     A macro that returns the value of a 'LongInteger' object, or any of
     'LongInteger's' subclasses, as a C long long int.  For an example
     of its use, refer to the entry for the *Note INTVAL_Macro::.

'obj_ref_str (char *STR)'
     If STR contains a formatted hexadecimal number of the format
     '0xNNNNNN' that points to an object, return an 'OBJECT *' reference
     to the object, 'NULL' otherwise.

'str_is_zero_q (char *STR)'
     Like 'is_zero_q', above, except that it also checks for an empty
     string (and returns true), as well as a string that contains only
     the digit '0', which causes the function to return false.

'substrcat (char *DEST, char *SRC, int START_INDEX, int END_INDEX)'
     Concatenate the substring of SRC from START_INDEX to END_INDEX to
     DEST.

'substrcpy (char *DEST, char *SRC, int START_INDEX, int END_INDEX)'
     Copy a substring of SRC from START_INDEX to END_INDEX to DEST.

'SYMTOOBJ (SYMBOLVALUE)'
     This is another macro that converts a 'Symbol's' reference to an
     'OBJECT *'.  This macro can be used on the right-hand side of an
     assignment statement.


          if ((value_object =
              SYMTOOBJ((self_object -> instancevars) ?
                       (self_object -> instancevars -> __o_value) :
                       (self_object -> __o_value))) != NULL) {
                return value_object;
              }


'SYMVAL(SYMBOLVALUE)'
     A macro that returns the value of a 'Symbol' object, or any of
     'Symbol's' subclasses, as a C 'uintptr_t *', which is guaranteed to
     be valid for 32- and 64-bit machines.

     However, due to the way that pointers work in C, 'SYMVAL' only
     works on the left-hand side of an assignment; you just need a cast
     (for example to 'OBJECT *') in order to avoid compiler warnings
     when it appears on the right-hand side of an assignment.  Here is
     an example:


          SYMVAL(object_alias->__o_value) = (OBJECT *)some_ptr;


     However, if he label on the right-hand side is also a 'Symbol', the
     'Symbol' class duplicates the address that the operand points to,
     not the operand itself.


          SYMVAL(object_alias->__o_value) = SYMVAL(some_ptr -> __o_value);


     For another, perhaps more basic, example of the macro's use, refer
     to the entry for the *Note INTVAL_Macro::.

'OBJREF(OBJ)'
     Creates a reference to an object.  This macro returns an 'OBJECT
     **', but using the macro allows the definition of an object
     reference to change without affecting too much code.  'OBJREF' is
     used with the '__objRefCnt*' functions, and in other places.

'TRIM_LITERAL(S)'
     A macro that trims the quotes from a literal string.  It expands to
     'substrcpy (S, S, 1, strlen (S) - 2)'.

'TRIM_CHAR(C)'
     A macro that trims the quotes from a literal character.  It expands
     to 'substrcpy (C, C, 1, strlen (C) - 2)'

'TRIM_CHAR_BUF(S)'
     A macro that trims nested single quotes from a literal character.
     'TRIM_CHAR_BUF' also checks whether a single quote (''') is the
     actual character.

'xfopen (const char *path, const char *mode)'
'xfprintf (FILE *stream, const char *fmt, ...)'
'xfscanf (FILE *stream, const char *fmt, ...)'
'xmemcpy (void *s, const void *s, size_t)'
'xmemmove (void *s, const void *s, size_t)'
'xmemset (void *s, int c, size_t n)'
'xsprintf (char *s, const char *fmt, ...)'
'xstrcat (char *d, const char *s)'
'xstrncat (char *d, const char *s, size_t)'
'xstrcpy (char *d, const char *s)'
'xstrncpy (char *d, const char *, size_t)'
     These are portable wrappers for systems that #define their own
     (possibly more secure) versions of library functions.  For the
     exact prototype and definition, you should consult the system's
     manual page for the corresponding library function (e.g.,
     'strcpy(3)' for the definition of 'xstrcpy').

'xstdin (void)'
'xstdout (void)'
'xstderr (void)'
     These functions return a 'FILE *' with the 'stdin, stdout,' or
     'stderr' file stream.  They're useful if your compiler redefined
     either 'stdin, stdout,' or 'stderr' internally.  The functions
     provide a consistent interface and leave any implementation details
     in the library, where they belong.


File: ctalk.info,  Node: C,  Next: Copying,  Prev: Methods,  Up: Top

Ctalk Language Features
=======================

This section describes 'ctalk''s C language features and its low-level
application programming interface.

* Menu:

* Preprocessor::        Compatibility with 'cpp'.
* C statements::        How to use objects and C in the same programs.
* Externs::             Working with multiple input files.
* Class casting::       How to tell Ctalk which class an object is.
* Control structures::  Objects in loops and conditional statements.
* OBJECT typedef::      Ctalk's 'OBJECT' type.
* Attributes::          Attributes help identify an object's context.
* C library functions:: How to use objects with C library functions.
* GNU tools::           Using automake, etc., with Ctalk programs.


File: ctalk.info,  Node: Preprocessor,  Next: C statements,  Up: C

'ctpp,' the 'ctalk' Preprocessor
--------------------------------

Information about 'ctpp', the Ctalk preprocessor, is contained in its
Texinfo manual, 'ctpp.info'.

The preprocessor is compatible with GNU 'cpp' and supports ISO C99
preprocessing features.  This allows you to include C header files in
Ctalk programs and class libraries.  Ctalk caches macros from include
files, so it can use, in the GNU compiler's terminology, _include once_
header files.

If you have a header file called, for example, 'myheader.h', you would
wrap the definitions with the following preprocessor directives.


     #ifndef _MYHEADER_H
     #define _MYHEADER_H
     .
     . <Your definitions appear here.>
     .
     #endif /* _MYHEADER_H */

This makes certain that the preprocessor defines macros, data types, and
other library definitions only once, no matter how many times the input
includes the header file.


File: ctalk.info,  Node: C statements,  Next: Externs,  Prev: Preprocessor,  Up: C

Pragmas
-------

Ctalk recognizes GCC, G++, and C99 pragmas.

Pragmas that apply to floating point operations and code generation are
ignored and elided, unless the '--keeppragmas' command line option is
given.  *Note Invoking::.

Inclusion of a file that contains G++ pragmas causes the preprocessor to
issue a warning if the '-v' option is given, and 'ctalk' ignores the
file.  *Note Invoking::.

Here is the effect of the GCC and C99 pragmas.

'#pragma interface'
'#pragma implementation'
     The include file is not processed.

'#pragma GCC dependency FILE'
     Issues a warning if the source file is more recent than FILE.

'#pragma GCC poison IDENTIFIER ...'
     'ctalk' issues an error and discontinues processing if the source
     file contains an identifier given as an argument.

'#pragma GCC system header'
     The 'ctalk' preprocessor processes all input files in the same
     manner and ignores this pragma.

'#pragma GCC pack'
'#pragma STDC FP_CONTRACT'
'#pragma STDC FENV_ACCESS'
'#pragma STDC CX_LIMITED_RANGE'
     'ctalk' ignores and elides these pragmas, which apply to floating
     point and code generation options, unless the '--keeppragmas'
     option is used.  *Note Invoking::.

C Expressions
-------------

In version 0.0.66, you can use simple constant expressions as receivers,
as in this example.

     printf ("%s", "/home/users/joe" subString 1, self length - 1);

_Warning_ - This use of 'self' is experimental in version 0.0.66 and
should be used with caution.

You can use a C constant in place of any receiver whose class
corresponds to a basic C data type.  These classes include 'Character',
'String', 'Float', 'Integer', and 'LongInteger'.

Expressions like the following work.
     if (99 == myInt)
      ...

     if ('c' == myInt asCharacter)
      ...

     if (3.1416 == pi)
      ...

The following code examples are equivalent.

     myString = "This is a string.";
     printf ("%d\n", myString length);

and,

     printf ("%d\n", "This is a string" length);

However, if you try to use a C variable on the left side of a method
that overloads a C operator, the expression might simply be interpreted
as C code, as in this example.

       String new progName;

       progName = "myprog";

       if (argv[0] == progName) {
         ...
       }

This is because Ctalk does not interpret 'argv[0]' as a receiver object,
and then interprets '==' as a C operator.

Objects in Function Parameters
------------------------------

Programs cannot, at this time, use objects as parameters to C functions.
If you need to use an object as a parameter, you need to use a method
instead of a function, or translate the object's value to C. *Note
Translating::.

Objects in Function Arguments
-----------------------------

You can use of Ctalk expressions as C function arguments, but the values
should be treated as read-only, as in this example.

     Integer new myIndex;
     char buf[255];

     myIndex = 0;

     /*
      *   This statement works correctly.
      */
     sprintf (buf, "%d", __ctalk_to_c_int (myIndex));

     /*
      *   This statement does not work correctly.
      */
     sscanf (myString, "%s %s", mySubString1, mySubString2);

If you need to read a string into objects, try 'readFormat' (class
'String') instead.

If you receive an 'Unimplemented C type' warning, it means that Ctalk
does not implement a class that corresponds to the data type.  In these
cases, you can generally assign the C variable to an instance of class
'Symbol,' and use that as the argument to a function.

The Classes that implement C data types are described in the next
section.

C Data Type Classes
-------------------

These classes correspond to the basic C types.

'Array'
     'char **'

'Character'
     'char'

'Float'
     'float' and 'double'

'Integer'
     'int' and 'long int'

'LongInteger'
     'long long int'

'String'
     'char *'

Typedefs in Function Arguments
------------------------------

Ctalk resolves many of the derived types defined in C99, as well as
incomplete types; however, variables that are of derived types can still
cause unpredictable results, if the variable is of an unusual or complex
type.

If you encounter a case where a derived type confuses the parser or
run-time library, the workaround is to declare the type as an equivalent
C type.  For example, if a variable is of type 'time_t,' you could
equivalently declare it as type 'long long int.'

C Functions in Complex Expressions
----------------------------------

You can use C functions in complex expressions within conditionals, as
in this example.
     int int_fn1 (void) {
       return 10;
     }

     char *add_int_fn_as_string (int a, int b, int c) {
       static char buf[30];
       sprintf (buf, "%d", a + b + c);
       return buf;
     }

     int main () {

       String new myString1;

       if ((myString1 = add_int_fn_as_string (int_fn1 (), 20, 30)) != "60")
         exit(1);

       printf ("%s\n", myString1);

     }
As long as your function returns one of the C data types 'int, char,
char *,' or 'double,' Ctalk can translate the function output to an
object, as well as call the function at run time using a method call.

If you try to use a C function that returns a complex or derived type,
Ctalk prints a warning and uses 'Integer' as the default return class.
In these cases, you should consider writing a method instead.

_Note:_ When you use functions in complex expressions, the function's
arguments must also be C variables or expressions.  If you want to use
objects as the arguments to a function, then you must perform the
object-to-C translation manually.

Debugging
---------

Object Inspectors
.................

Ctalk provides a basic set of methods that can inspect and print the
contents of objects.

The 'inspect' method in 'Object' class is an interactive utility that
lets you examine a program's objects as the program is running.

To inspect an object, simply send it the message, 'inspect' - it's a
shortcut for the 'inspect' method in 'ObjectInspector' class, which a
program can also call directly.


     String new globalString;

     int main () {
       Integer new i;

       globalString = "global string";

       i inspect;
     }


In either case, the program stops execution when it reaches the
'inspect' method, and presents a prompt where you can type commands.

Here's a transcript of a brief inspector session.


     $ ./inspect
     > p
     p
     name:       i
     class:      Integer (0x48bf4958)
     superclass: Magnitude (0x48bf29f0)
     value:      (null) (Integer)

     > p g globalString
     p g globalString
     name:       globalString
     class:      String (0x48cce8d0)
     superclass: Character (0x48c8acc0)
     value:      global string (String)

     > c
     c
     $


At the inspector prompt, '> ', the command 'p' prints the inspector's
receiver object, and 'p g globalString' prints the named global object,
'globalString'.  The 'c' command exits the inspector and continues
running the program.

There are several commands that the inspector recognizes.  Typing '?,'
'h,' or 'help' at the prompt displays a list of them.

The inspector uses the method 'formatObject' to print the contents of
individual objects.

If you want to print a formatted object directly, without stopping the
program, Ctalk also has the method 'dump' in 'Object' class, which
simply calls 'formatObject' with its receiver object to print the object
and then returns so the program can continue running.

Using 'gdb' for Debugging
.........................

The GNU 'gdb' debugger allows you to trace through Ctalk applications as
well as the compiler and the run-time libraries, at the level of Ctalk's
source code.

In order to debug Ctalk programs with 'gdb', the source must be
compatible with the debugger; that means that you can debug Ctalk
programs using the intermediate C code to get source level debugging
within Ctalk apps.

You can also examine the contents of objects and their run-time
environment with the 'inspect' method (in 'Object' class), which doesn't
use line number information.  *Note Object_inspect::.  There's a
tutorial on using object inspectors in the 'ctalktools' Texinfo manual,
and yet more information in the 'inspect.3ctalk' manual page.

The '-P' command line option disables line numbering.  You can then
debug the intermediate output, which is normal C that 'gdb' can
interpret correctly.

This means that method line numbers are calculated from the start of all
of the input, which includes all other classes and header files.  So
when you give the '-P' option to Ctalk, it reports the line if possible,
although without line number information, the compiler can't track line
numbers of preprocessor output; like for example, by adjusting line
numbers after including a file with the '#include' directive.

The 'ctdb' command builds Ctalk programs with the correct arguments for
debugging.  Then you can use 'gdb' to debug the program.

     $ ctdb -k myprog.c -o myprog

If you need to debug either 'ctalk' or the 'libctalk' library, then you
need to build and install Ctalk without optimization.  You can do that
by adding the '--without-optimization' option to 'configure' when
building Ctalk.  Compiler optimization often removes lines of code (and
variables) from the binary, so the output often doesn't correspond to
the source code.  Also, it often helps to add the
'--without-inline-functions' option to 'configure'.


     $ ./configure --without-inline-functions --without-optimization


Then build and install Ctalk with 'make' and 'make install.'

Ctalk also provides other build options.  Typing
     $ ./configure --help
at the shell prompt prints a list of them.

Ctalk is compatible at the machine code level with C programs.  That
means you use most of 'gdb's' functions, like peek into a running
program and examine core dumps.  The 'gdb' documentation describes the
debugger's extensive set of options.


File: ctalk.info,  Node: Externs,  Next: Class casting,  Prev: C statements,  Up: C

Externs
-------

Ctalk provides a few facilities to help when compiling code in several
input modules.

There are also a few caveats when dealing with C variables in multiple
input modules, which are described below.

Ctalk allows you to prototype methods.  That is, you can declare a
method in a source code module before compiling another module later
where the method is actually defined.

Prototypes are similar to method declarations, except that the prototype
omits the method body.  For example, a method prototype before the
method is first used would look like this.

     String instanceMethod myLength (void);

You can also define a different return class in the prototype, as in
this example.

     String instanceMethod myLength (void) returnClass Integer;

For example, if the input file module1.ca looks like this:


     String instanceMethod trimStrLength (void) returnObjectClass Integer;

     int main () {

       String new myStr;

       myStr = "Hello, world!";

       printf ("%s\n", myStr subString 0, myStr trimStrLength 2);
     }


and the file module2.ca, which contains the definition of
'trimStrLength', looks like this:


     String instanceMethod trimStrLength (void) {
       returnObjectClass Integer;
       return self length - 1;
     }


Then you can build the program with a command line like the following,
and Ctalk will have the definition of 'trimStringLength' while compiling
module1.ca, before it actually compiles the method in module2.ca.


     $ ctcc module1.ca module2.ca -o myprog


C Variables and 'extern' Declarations
.....................................

When using a global C variable in several input modules, you only need
to declare it once, before it is first used.  Ctalk combines the C code
of all of the input files with one copy of the class libraries, so it
isn't necessary to declare a C variable in the first module and then
declare it as extern in the modules that get compiled later.


File: ctalk.info,  Node: Class casting,  Next: Control structures,  Prev: Externs,  Up: C

Class casting
-------------

In many cases, it's obvious which class an object is, even when the
object's defition is removed from the place where a program needs to
perform an operation on it, or the object is aliased to 'self' or to a C
variable, or you need to use a different type of language semantics with
an object.

If a program has a set of expressions, as in this hypothetical example:


     Integer new myInt;
     myList new myList;
     Key new myKey;
     Symbol new *intPtr;

     *intPtr = Integer new "Int 1", "1";
     myList push *intPtr;
     *intPtr = Integer new "Int 2", "2";
     myList push *intPtr;

     myKey = myList + 1;

     myInt = *myKey;

     myInt += 3;

     _... do stuff with myInt ..._

     myList map {
       printf ("%d\n", self value);
     }


When run, the program would produce output like this.


     $ ./myProg
     1
     2


That's because the changes to 'myInt' would not take effect for the
member of 'myList', because 'Integer' objects, when a program assigns
values to them, normally assigns the value of one 'Integer' to another.
However, in the example above, you might want to work on the original
list member - that is, you want the assignment to treat 'myInt' as if it
were a reference.

One way to notify Ctalk of this is to use an 'Object' to refer to the
list element, and use a _class cast_ to notify Ctalk that the 'Object'
is actually an 'Integer'.

Then the program example above looks like this.


     Object new myIntObject;
     myList new myList;
     Key new myKey;
     Symbol new *intPtr;

     *intPtr = Integer new "Int 1", "1";
     myList push *intPtr;
     *intPtr = Integer new "Int 2", "2";
     myList push *intPtr;

     myKey = myList + 1;

     myIntObject = *myKey;

     (Integer *)myIntObject += 3;  /* The cast tells Ctalk to treat myIntObject,
                                      which is declared as an Object,
                                      as an Integer, so it can work correctly
                                      with the first element of myList. */

     _... do stuff with myIntObject ..._

     myList map {
       printf ("%d\n", self value);
     }


Other places that you can use class casting is when a program uses a C
'OBJECT *'.  In that case, you can tell Ctalk what class the object is.
Here's an abbreviated example from a 'map' method in 'TreeNode' class.


       OBJECT *t, *list_elem;

       /* rcvr_obj is a TreeNode object. */
       for (t = __LIST_HEAD(rcvr_obj), have_break = NULL;
            t && !have_break; t = t -> next) {
         list_elem = obj_ref_str ((t -> instancevars) ?
     			     t -> instancevars -> __o_value :
     			     (IS_VALUE_INSTANCE_VAR(t) ?
     			      t -> __o_p_obj -> instancevars -> __o_value :
     			      "0x0"));

       _... do stuff ..._

       (TreeNode *)list_elem children __mapChildren methodfn;

       (TreeNode *)list_elem siblings __mapSiblings methodfn;

       }

This is a convenient way for a program to tell Ctalk that 'list_elem' is
a 'TreeNode' object.  It's up to the program to ensure that the C
variable actually does point to an object of that class, or the program
won't work correctly at run time.

Programs can also cast 'self' to a class, in cases where Ctalk cannot
determine 'self's' class from its context, like in this example


     myList map {

       (Float *)self = 0.01f;

     }


This feature is still experimental, and you should use it with caution;
in particular, it's up to the program to insure that the object actually
is a member of the class that you cast it to.  However, on the occasions
when a program needs to excercise some control over a set of
expressions' semantics, then class casting can be useful.


File: ctalk.info,  Node: Control structures,  Next: OBJECT typedef,  Prev: Class casting,  Up: C

Control Structures
------------------

Generally, Ctalk objects work the same as C variables when they appear
in 'if', 'for', 'while', 'switch', and 'do-while' statements.

If Ctalk cannot figure out a way to resolve an expression that contains
both C variables or functions and objects, it will try to warn you.

One exception to these rules are the methods that perform logical
negation operator, which generally overload the '!' math operator.  When
you place a '!' operator at the beginning of a conditional, Ctalk checks
whether the class of the expression's result overloads the operator.  In
that case, Ctalk treats '!' as a method.  If a class does not overload
the operator, then Ctalk treats it as a C operator.

That way, you can overload '!' in classes that define complex objects,
which provides a flexible way to determine if an object has been
initialized or contains valid data.

For example, in 'X11Font' class, you can overload the '!' operator to
check whether or not an object's 'fontId' instance variable is zero to
determine whether or not the object refers to a valid font.

If a class doesn't overload '!', then Ctalk uses the C semantics for the
operator - that is, it simply checks whether an operand is zero (or
NULL) or non-zero, and inverts the logical true or false value of the
operand.

In addition, Ctalk provides many methods to iterate over collections of
objects.  These methods include 'map', 'mapInstanceVariables',
'mapClassVariables', and overloaded math operators like those in 'Key'
class.

For a complete description of the control structures Ctalk uses, refer
to the 'Ctalk Tutorial'.


File: ctalk.info,  Node: OBJECT typedef,  Next: Attributes,  Prev: Control structures,  Up: C

'OBJECT' typedef
================

At the lowest level, ctalk declares objects as pointers to an 'OBJECT'
struct.  You can access an object's members if you assign an object's
value to a C variable of the type 'OBJECT *', as in this example.

     Object new myObject;
     OBJECT *myObjectValue;

     myObjectValue = myObject value;

     if (!strcmp (myObjectValue -> CLASSNAME, "Object"))
        printf ("myObjectValues class is, \"Object.\"\n");

The declaration of the OBJECT type is contained in 'include/object.h'.

     typedef struct _object OBJECT;
     . . .
     struct _object {
       char sig[16];
       char __o_name[MAXLABEL];
       char __o_classname[MAXLABEL];
       OBJECT *__o_class;
       char __o_superclassname[MAXLABEL];
       OBJECT *__o_superclass;
       OBJECT *__o_p_obj;
       VARTAG *__o_vartags;
       char *__o_value;
       METHOD *instance_methods,
         *class_methods;
       int scope;
       int nrefs;
       int attrs
       struct _object *classvars;
       struct _object *instancevars;
       struct _object *next;
       struct _object *prev;
     };

Note that '__o_name', '__o_classname', '__o_superclassname', and
'__o_value' are all 'char *', even if the object belongs to a class like
'Integer' or 'Float'.  The struct members '__o_class' and
'__o_superclass' contain pointers to the library class and superclass
entries, which are also objects.

For numeric classes, the 'value' member contains a formatted
representation of a numeric value.  Examples of directly assigning
values to objects are given in the section about writing methods.  *Note
Method API::.

Ctalk uses the members 'instance_methods,' 'class_methods,' 'classvars'
for class objects.

The 'sig' member contains a numeric stamp that verifies that the 'OBJECT
*' refers to a valid object.

The 'scope' member describes an object's scope.  The scope can be one of
'GLOBAL_VAR', 'LOCAL_VAR', 'ARG_VAR', 'RECEIVER_VAR', 'PROTOTYPE_VAR',
or 'BLOCK_VAR.'

The 'nrefs' member keeps track of the number of references that exist to
an object at run time.  Every time ctalk creates a reference to an
object, internally ctalk increments 'nrefs'.  When ctalk deletes a
reference, it decrements 'nrefs'.  When 'nrefs' drops to zero, 'ctalk'
deletes the object.

The 'attrs' member is a combination of one or more object attributes.
The next section describes object attributes in more detail.

The 'tag' member is an abbreviation for the '__o_vartags -> tag ->
var_decl -> name' member; that is, the object's primary label.


File: ctalk.info,  Node: Attributes,  Next: C library functions,  Prev: OBJECT typedef,  Up: C

Object Attributes
-----------------

The Ctalk API defines a number of object attributes.  The attributes
help identify the context that the object appears in.  Many of the
attributes are only meaningful internally; some are also useful in the
method API.

The attributes are defined in 'ctalkdefs.h', which you can include in
class libraries.  To set an object's attribute, it's generally
convenient to use the '__ctalkSetObjectAttr ()' library function, which
has the prototype:


     __ctalkSetObjectAttr (OBJECT *OBJECT, int ATTR)


Many attributes are only used by Ctalk internally.  The attributes that
are useful in methods are defined in 'ctalkdefs.h'.  Those attributes,
and their values and uses, are listed here.

'OBJECT_IS_VALUE_VAR (1 << 0)'
     The object is the 'value' instance variable of its parent object.
'OBJECT_VALUE_IS_C_CHAR_PTR_PTR (1 << 1)'
     Used to indicate that an object refers to a 'char **' C array.
'OBJECT_IS_NULL_RESULT_OBJECT (1 << 2)'
     Indentifies an object that is created when an operation produces a
     NULL result.
'OBJECT_HAS_PTR_CX (1 << 3)'
     Set when an object appears on the left-hand side of an equation
     with a pointer reference; e.g.,

          *mySymbol = __ctalk_self_internal ().


'OBJECT_IS_GLOBAL_COPY (1 << 4)'
     Set when a program copies a global object.

'OBJECT_IS_I_RESULT (1 << 5)'
     Identifies temporary objects that are the result of an operation
     that sets the object tag's pointer references.

'OBJECT_IS_STRING_LITERAL (1 << 6)'
     Used to identify an object created to represent a string literal.

'OBJECT_IS_MEMBER_OF_PARENT_COLLECTION (1 << 7)'
     Indicates that an object (generally a 'Key' object) is a member of
     a parent collection.  Normally used to identify individual
     collection members.

'OBJECT_HAS_LOCAL_TAG (1 << 8)'
     Indicates that an object's tag was created as a placeholder for an
     ad-hoc object; for example, objects created by a 'basicNew' method.
     The local tag is not necessarily the primary tag - the object can
     also acquire other tags when being assigned.  Normally this
     attribute is set by the '__ctalkAddBasicNewTag ()' library
     function.

'OBJECT_IS_DEREF_RESULT'
     Set by the 'Object : ->' method.  The attribute is used to indicate
     that the receiver of '->' is the result of a previous call to '->';
     i.e., the expression contains several dereference operators; for
     example, 'myObject -> instancevars -> __o_value'.


File: ctalk.info,  Node: C library functions,  Next: GNU tools,  Prev: Attributes,  Up: C

C Library Functions
-------------------

You can assign the result of a C library function to a Ctalk object,
provided that the return type of the function has a corresponding Ctalk
class.

All C functions must have prototypes.  The library functions in this
section already have their prototypes defined in the C library headers.
If a function in a program does not have a prototype, Ctalk prints an
error and exits.

Generally, if Ctalk has a method that is analogous to a C library
function, you can use the method with Ctalk objects, although in many
cases you can mix objects and C variables.  Of course, you can still use
any C library function with C data types.

There are some incompatibilities with more specialized libraries.  For
example, you should take care when using the X Window System Xt widgets
in Ctalk programs, because the widget classes use the some of the same
class names as the Ctalk library.

The following sections describe the C library functions that Ctalk can
use directly.

* Menu:

* abs::
* acos::
* acosh-asinh-atanh::
* asctime::
* asin::
* atexit::
* atof::
* atoi::
* atol::
* atoll::
* calloc::
* cbrt::
* ceil::
* chdir::
* clock::
* copysign::
* cos::
* cosh::
* ctime::
* difftime::
* erf::
* erfc::
* exp::
* expm1::
* fabs::
* fclose::
* fegetround::
* feholdexcept::
* feof::
* ferror::
* fesetround::
* fetestexcept::
* fflush::
* fgetc::
* fgetpos::
* fgets::
* floor::
* fmod::
* fopen::
* fprintf::
* fputc::
* fputs::
* fread::
* free::
* freopen::
* frexp::
* fscanf::
* fseek::
* fsetpos::
* fstat::
* ftell::
* fwrite::
* getc::
* getchar::
* getcwd::
* getenv::
* getpid::
* gmtime-localtime::
* index-function::
* isalnum-isxdigit::
* labs::
* llabs::
* llrint::
* llround::
* log::
* log10::
* log1p::
* lrint::
* lround::
* malloc::
* memchr::
* memcmp::
* memcpy::
* memmove::
* memset::
* mkdir::
* modf::
* nearbyint::
* perror::
* pow::
* printf::
* raise::
* rand::
* realloc::
* remove::
* rename::
* rindex::
* rint::
* rmdir::
* round::
* scanf::
* sin::
* sinh::
* snprintf::
* sprintf::
* sqrt::
* srand::
* sscanf::
* strcat-strcpy::
* strchr::
* strcoll::
* strspn::
* strerror::
* strftime::
* strlen::
* strncat-strncpy::
* strpbrk::
* strrchr::
* strstr::
* strtod::
* strtok::
* strtoll::
* strxfrm::
* system::
* tan::
* tanh::
* tmpnam::
* tolower::
* toupper::
* trunc::
* ungetc::
* vfprintf::
* vfscanf::
* vprintf::
* vscanf::
* vsnprintf::
* vsprintf::
* vsscanf::


File: ctalk.info,  Node: abs,  Next: acos,  Up: C library functions

'abs' Function
--------------


     #include <stdlib.h>

     Integer new i;

     i = abs (3);



File: ctalk.info,  Node: acos,  Next: acosh-asinh-atanh,  Prev: abs,  Up: C library functions

'acos' Function
---------------


     #include <math.h>

     Integer new i;

     i = acos (0.5);


Ctalk does not check if the argument is outside the range -1 to 1 and
does not check for an error.  Refer to the, 'acos', manual page.


File: ctalk.info,  Node: acosh-asinh-atanh,  Next: asctime,  Prev: acos,  Up: C library functions

'acosh,' 'asinh,' and 'atanh' Functions
---------------------------------------


     #include <math.h>

     Float new myFloat;

     myFloat = acosh (2.0);


Ctalk does not check the range of the arguments or errors.  Refer to
the, 'acosh(3), asinh(3),' and 'atanh(3)' manual pages.


File: ctalk.info,  Node: asctime,  Next: asin,  Prev: acosh-asinh-atanh,  Up: C library functions

'asctime' Function
------------------


     #include <time.h>

     time_t t;
     struct tm *time_struct;
     String new s;

     time (&t);
     time_struct = localtime (&t);
     s = asctime (time_struct);


_Note:_ Ctalk does not have a class corresponding to a 'struct tm *.' An
explicit assignment of a 'struct tm *' to a 'Symbol' passes the address
to 'asctime.' *Note Objects in Function Arguments::.


File: ctalk.info,  Node: asin,  Next: atexit,  Prev: asctime,  Up: C library functions

'asin' Function
---------------

     #include <math.h>

     Float new f;

     f = asin (0.5);

Note that ctalk does not perform any range checking of the argument.


File: ctalk.info,  Node: atexit,  Next: atof,  Prev: asin,  Up: C library functions

'atexit' Function
-----------------

     #include <stdlib.h>

     Integer new i;

     i = atexit (exitfunc);



File: ctalk.info,  Node: atof,  Next: atoi,  Prev: atexit,  Up: C library functions

'atof' Function
---------------

     #include <stdlib.h>

     Float new pi;

     pi = atof ("3.1416");


File: ctalk.info,  Node: atoi,  Next: atol,  Prev: atof,  Up: C library functions

'atoi' Function
---------------

     #include <stdlib.h>

     Integer new i;

     i = atoi ("35");


File: ctalk.info,  Node: atol,  Next: atoll,  Prev: atoi,  Up: C library functions

'atol' Function
---------------

     #include <stdlib.h>

     Integer new i;

     i = atol ("35");

Note that, 'Integer', class corresponds to the C types, 'int', and,
'long int'.


File: ctalk.info,  Node: atoll,  Next: calloc,  Prev: atol,  Up: C library functions

'atoll' Function
----------------

#include <stdlib.h>

LongInteger new i;

i = atoll ("35");

_Note:_ The 'atoll(3)' function is not implemented by the OS X or DJGPP
C libraries.  Use 'atol(3)', 'strtoll(3)', or a method instead.


File: ctalk.info,  Node: calloc,  Next: cbrt,  Prev: atoll,  Up: C library functions

'calloc' Function
-----------------

     #include <stdlib.h>

     Integer new n;
     Integer new size;
     int *intbuf;

     n = 10;
     size = sizeof (int);

     intbuf = calloc (n, size);


File: ctalk.info,  Node: cbrt,  Next: ceil,  Prev: calloc,  Up: C library functions

'cbrt' Function
---------------

#include <math.h>

Float new f;

f = cbrt (9.0);


File: ctalk.info,  Node: ceil,  Next: chdir,  Prev: cbrt,  Up: C library functions

'ceil' Function
---------------

#include <math.h>

Float new f;

f = ceil (3.5);


File: ctalk.info,  Node: chdir,  Next: clock,  Prev: ceil,  Up: C library functions

'chdir' Function
----------------

Integer new result; String new dirName;

dirName = "mySubdir";

result = chdir (mySubdir);


File: ctalk.info,  Node: clock,  Next: copysign,  Prev: chdir,  Up: C library functions

'clock' Function
----------------

     #include <time.h>

     Integer new i;

     i = clock ();


File: ctalk.info,  Node: copysign,  Next: cos,  Prev: clock,  Up: C library functions

'copysign' Function
-------------------

     #include <math.h>

     Float new f;

     f = copysign (3.0, -1.0);


File: ctalk.info,  Node: cos,  Next: cosh,  Prev: copysign,  Up: C library functions

'cos' Function
--------------

     #include <math.h>

     Float new f;

     f = cos (45.0);


File: ctalk.info,  Node: cosh,  Next: ctime,  Prev: cos,  Up: C library functions

'cosh' Function
---------------

     #include <math.h>

     Float new f;

     f = cosh (45.0);


File: ctalk.info,  Node: ctime,  Next: difftime,  Prev: cosh,  Up: C library functions

'ctime' Function
----------------

     #include <time.h>

     time_t t;
     String new s;

     time (&t);
     s = ctime (&t);

_Note:_ There is not a portable way to take the address of an object
with '&', although it may be possible to perform the translation
manually in some cases.  If the argument must be an object, then use the
'cTime' (class 'CTime') method instead.


File: ctalk.info,  Node: difftime,  Next: erf,  Prev: ctime,  Up: C library functions

'difftime' Function
-------------------


     #include <time.h>

     Float new f;

     f = difftime (time1, time0);



File: ctalk.info,  Node: erf,  Next: erfc,  Prev: difftime,  Up: C library functions

'erf' Function
--------------


     #include <math.h>

     Float new f;

     f = erf (0.5);



File: ctalk.info,  Node: erfc,  Next: exp,  Prev: erf,  Up: C library functions

'erfc' Function
---------------


     #include <math.h>

     Float new f;

     f = erfc (0.5);



File: ctalk.info,  Node: exp,  Next: expm1,  Prev: erfc,  Up: C library functions

'exp' Function
--------------


     #include <math.h>

     Float new f;

     f = exp (2);



File: ctalk.info,  Node: expm1,  Next: fabs,  Prev: exp,  Up: C library functions

'expm1' Function
----------------


     #include <math.h>

     Float new f;

     f = expm1 (1.05);



File: ctalk.info,  Node: fabs,  Next: fclose,  Prev: expm1,  Up: C library functions

'fabs' Function
---------------


     #include <math.h>

     Float new f;

     f = fabs (-1.05);



File: ctalk.info,  Node: fclose,  Next: fegetround,  Prev: fabs,  Up: C library functions

'fclose' Function
-----------------


     #include <stdio.h>

     Integer new i;

     i = fclose (fileHandle);



File: ctalk.info,  Node: fegetround,  Next: feholdexcept,  Prev: fclose,  Up: C library functions

'fegetround' Function
---------------------


     #include <fenv.h>

     Integer new i;

     i = fegetround ();



File: ctalk.info,  Node: feholdexcept,  Next: feof,  Prev: fegetround,  Up: C library functions

'feholdexcept' Function
-----------------------


     #include <fenv.h>

     Integer new i;

     i = feholdexcept (fe_envp);



File: ctalk.info,  Node: feof,  Next: ferror,  Prev: feholdexcept,  Up: C library functions

'feof' Function
---------------


     #include <stdio.h>

     Integer new i;

     i = feof (fileStream);



File: ctalk.info,  Node: ferror,  Next: fesetround,  Prev: feof,  Up: C library functions

'ferror' Function
-----------------


     #include <stdio.h>

     Integer new i;

     i = ferror (fileStream);



File: ctalk.info,  Node: fesetround,  Next: fetestexcept,  Prev: ferror,  Up: C library functions

'fesetround' Function
---------------------


     #include <math.h>

     Integer new i;

     i = fesetround (mode);



File: ctalk.info,  Node: fetestexcept,  Next: fflush,  Prev: fesetround,  Up: C library functions

'fetestexcepts' Function
------------------------


     #include <math.h>

     Integer new i;

     i = fetestxcept (exceptions);



File: ctalk.info,  Node: fflush,  Next: fgetc,  Prev: fetestexcept,  Up: C library functions

'fflush' Function
-----------------


     #include <stdio.h>

     Integer new i;

     i = fflush (fileStream);



File: ctalk.info,  Node: fgetc,  Next: fgetpos,  Prev: fflush,  Up: C library functions

'fgetc' Function
----------------


     #include <stdio.h>

     Integer new i;

     i = fgetc (fileStream);



File: ctalk.info,  Node: fgetpos,  Next: fgets,  Prev: fgetc,  Up: C library functions

'fgetpos' Function
------------------


     #include <stdio.h>

     Integer new i;

     i = fgetpos (fileStream, pos);



File: ctalk.info,  Node: fgets,  Next: floor,  Prev: fgetpos,  Up: C library functions

'fgets' Function
----------------


     #include <stdio.h>

     String new s;

     s = fgets (s, s length, fileStream);



File: ctalk.info,  Node: floor,  Next: fmod,  Prev: fgets,  Up: C library functions

'floor' Function
----------------


     #include <math.h>

     Float new f;

     f = floor (3.01);



File: ctalk.info,  Node: fmod,  Next: fopen,  Prev: floor,  Up: C library functions

'fmod' Function
---------------


     #include <math.h>

     Float new f;

     f = fmod (3.0, 2.0);



File: ctalk.info,  Node: fopen,  Next: fprintf,  Prev: fmod,  Up: C library functions

'fopen' Function
----------------


     #include <stdio.h>

     FILE *f

     String new path;
     String new mode;

     path = "/home/user/.profile";
     mode = "r";

     f = fopen (path, mode);



File: ctalk.info,  Node: fprintf,  Next: fputc,  Prev: fopen,  Up: C library functions

'fprintf' Function
------------------

*Note Variable arguments::.


File: ctalk.info,  Node: fputc,  Next: fputs,  Prev: fprintf,  Up: C library functions

'fputc' Function
----------------


     #include <stdio.h>

     Integer new myInput;

     myInput = fgetc (xstdin ());
     fputc (myInput, xstdout ());



File: ctalk.info,  Node: fputs,  Next: fread,  Prev: fputc,  Up: C library functions

'fputc' Function
----------------

     #include <stdio.h>

     String new myInput;

     fgets (myInput, 255, xstdin ());
     fputs (myInput, xstdout ());


File: ctalk.info,  Node: fread,  Next: free,  Prev: fputs,  Up: C library functions

'fread' Function
----------------

     #include <stdio.h>

     String new myInput;

     myInput = "";

     fread (myInput, 255, sizeof (char), xstdin ());


File: ctalk.info,  Node: free,  Next: freopen,  Prev: fread,  Up: C library functions

'free' Function
---------------

Do not use 'free' with objects.  Use the '__ctalkDeleteObject' library
function instead.

Also, calling '__objRefCntZero' before '__ctalkDeleteObject' insures
that the object will be completely deleted.  You can do this in two
ways: first, by sending the object a 'delete' message; or by casting the
object to a C 'OBJECT *' and then giving the 'OBJECT *' as an argument
to '__objRefCntZero' and '__ctalkDeleteObject'.

     Object new myObject;
     OBJECT *myObject_alias;

     myObject_aliast = myObject;

     __objRefCntZero (OBJREF (myObject_alias));
     __ctalkDeleteObject (myObject_alias);


File: ctalk.info,  Node: freopen,  Next: frexp,  Prev: free,  Up: C library functions

'freopen' Function
------------------

     #include <stdio.h>

     FILE *f;

     String new path;
     String new mode;

     path = "/home/user/.profile";
     mode = "r";

     f2 = freopen (path, mode, xstdin ());


File: ctalk.info,  Node: frexp,  Next: fscanf,  Prev: freopen,  Up: C library functions

'frexp' Function
----------------

     #include <math.h>

     int i_exp_val;
     Integer new expInt;
     Float new myFloat;
     Float new myFraction;

     myFloat = "2.5";

     myFraction = frexp (myFloat, &i_exp_val);

     expInt = i_exp_val;


File: ctalk.info,  Node: fscanf,  Next: fseek,  Prev: frexp,  Up: C library functions

'fscanf' Function
-----------------

*Note Variable arguments::.

Ctalk wraps 'stdin, stdout,' and 'stderr' in the functions 'xstdin,
xstdout,' and 'xstderr,' which gives the streams a constant interface
for methods to use regardless of the streams' internal implementation.


File: ctalk.info,  Node: fseek,  Next: fsetpos,  Prev: fscanf,  Up: C library functions

'fseek' Function
----------------


File: ctalk.info,  Node: fsetpos,  Next: fstat,  Prev: fseek,  Up: C library functions

'fsetpos' Function
------------------

     #include <stdio.h>

     FILE *f;
     String new path;
     String new mode;
     Integer new offset;

     path = "/home/user/.profile.new";
     mode = "r";


     f = fopen (path, mode);

     offset = 0L;

     fsetpos (f, offset);


File: ctalk.info,  Node: fstat,  Next: ftell,  Prev: fsetpos,  Up: C library functions

'fstat' Function
----------------

     #include <sys/types.h>
     #include <sys/stat.h>
     #include <unistd.h>

     String new path;
     Integer new result;
     struct stat statbuf;

     path = "/home/user/.profile";

     result = fstat (path, &statbuf);



File: ctalk.info,  Node: ftell,  Next: fwrite,  Prev: fstat,  Up: C library functions

'ftell' Function
----------------

     #include <stdio.h>

     Integer new filePos;

     filePos = ftell (file);


File: ctalk.info,  Node: fwrite,  Next: getc,  Prev: ftell,  Up: C library functions

'fwrite' Function
-----------------

     #include <stdio.h>

     FILE *f;
     String new path;
     String new mode;
     String new promptLine;

     path = "/home/user/.profile.new";
     mode = "a";

     f = fopen (path, mode);

     promptLine = "PS1=#";

     fwrite (promptLine, promptLine length, sizeof (char), f);


File: ctalk.info,  Node: getc,  Next: getchar,  Prev: fwrite,  Up: C library functions

'getc' Function
---------------

     #include <stdio.h>

     Integer new myInput;

     myInput = getc (xstdin ());

     printf ("%c", myInput asCharacter);


File: ctalk.info,  Node: getchar,  Next: getcwd,  Prev: getc,  Up: C library functions

'getchar' Function
------------------

     #include <stdio.h>

     Integer new myInput;

     myInput = getchar ();

     printf ("%c", myInput asCharacter);


File: ctalk.info,  Node: getcwd,  Next: getenv,  Prev: getchar,  Up: C library functions

'getcwd' Function
-----------------

     #include <stdio.h>
     String new myString;
     getcwd (myString, FILENAME_MAX);
_Note:_ The argument 'myString' must already be initialized to hold the
entire directory path.  If in doubt, use 'getCwd' (class
'DirectoryStream') instead.  *Note DirectoryStream::.


File: ctalk.info,  Node: getenv,  Next: getpid,  Prev: getcwd,  Up: C library functions

'getenv' Function
-----------------

     String new envPath;

     envPath = getenv ("PATH");

     printf ("%s", envPath);


File: ctalk.info,  Node: getpid,  Next: gmtime-localtime,  Prev: getenv,  Up: C library functions

'getpid' Function
-----------------


File: ctalk.info,  Node: gmtime-localtime,  Next: index-function,  Prev: getpid,  Up: C library functions

'gmtime,' 'localtime' Functions
-------------------------------


File: ctalk.info,  Node: index-function,  Next: isalnum-isxdigit,  Prev: gmtime-localtime,  Up: C library functions

'index' Function
----------------

*Note strchr::.


File: ctalk.info,  Node: isalnum-isxdigit,  Next: labs,  Prev: index-function,  Up: C library functions

'isalnum,' 'isalpha,' 'isascii,' 'isblank,' 'iscntrl,' 'isdigit,' 'isgraph,' 'islower,' 'isprint,' 'ispunct,' 'isspace,' 'isupper,' 'isxdigit' Functions
--------------------------------------------------------------------------------------------------------------------------------------------------------

Ctalk does not support 'ctype.h' macros portably.  Use the corresponding
method of class 'Character' instead.  *Note Character::.

     Ctype.h Macro          Ctalk Method
     -------------          ------------
     isalnum                isAlNum
     isalpha                isAlpha
     isascii                isASCII
     isblank                isBlank
     iscntrl                isCntrl
     isdigit                isDigit
     isgraph                isGraph
     islower                isLower
     isprint                isPrint
     ispunct                isPunct
     isspace                isSpace
     isupper                isUpper
     isxdigit               isXDigit


File: ctalk.info,  Node: labs,  Next: llabs,  Prev: isalnum-isxdigit,  Up: C library functions

'labs' Function
---------------

     #include <stdlib.h>

     Integer new myValue;
     Integer new myAbsValue;

     myAbsValue = labs (myValue);


File: ctalk.info,  Node: llabs,  Next: llrint,  Prev: labs,  Up: C library functions

'llabs' Function
----------------

     #include <stdlib.h>

     LongInteger new myValue;
     LongInteger new myAbsValue;

     myAbsValue = llabs (myValue);


File: ctalk.info,  Node: llrint,  Next: llround,  Prev: llabs,  Up: C library functions

'lrint', 'lrintf', 'lrintl', 'llrint', 'llrintf', 'llrintl' Functions
---------------------------------------------------------------------

     #include <math.h>

     Float new myFloat;
     LongInteger new myLongInt;

     myFloat = 2.5;

     myLongInt = llrint (myFloat);

Consult the manual page for 'lrint(3)', etc., for detailed information
about each function.


File: ctalk.info,  Node: llround,  Next: log,  Prev: llrint,  Up: C library functions

'llround' Function
------------------

     #include <math.h>

     Float new myFloat;
     LongInteger new myLongInt;

     myFloat = 2.5;

     myLongInt = llround (myFloat);


File: ctalk.info,  Node: log,  Next: log10,  Prev: llround,  Up: C library functions

'log' Function
--------------

     #include <math.h>

     Float new myFloat;
     Float new myLog;

     myFloat = 2.5;

     myLog = log (myFloat);


File: ctalk.info,  Node: log10,  Next: log1p,  Prev: log,  Up: C library functions

'log10' Function
----------------

     #include <math.h>

     Float new myFloat;
     Float new myLog;

     myFloat = 2.5;

     myLog = log10 (myFloat);


File: ctalk.info,  Node: log1p,  Next: lrint,  Prev: log10,  Up: C library functions

'log1p' Function
----------------

     #include <math.h>

     Float new myFloat;
     Float new myLog;

     myFloat = 2.5;

     myLog = log1p (myFloat);


File: ctalk.info,  Node: lrint,  Next: lround,  Prev: log1p,  Up: C library functions

'lrint' Function
----------------

     #include <math.h>

     Float new myFloat;
     Integer new myInt;

     myFloat = 2.5;

     myLog = lrint (myFloat);


File: ctalk.info,  Node: lround,  Next: malloc,  Prev: lrint,  Up: C library functions

'lround' Function
-----------------

     #include <math.h>

     Float new myFloat;
     Integer new myInt;

     myFloat = 2.5;

     myLog = lround (myFloat);


File: ctalk.info,  Node: malloc,  Next: memchr,  Prev: lround,  Up: C library functions

'malloc' Function
-----------------

     #include <stdlib.h>

     Integer new size;
     int *intbuf

     size = sizeof (int) * 10;

     memblk = (int *)malloc (size);


File: ctalk.info,  Node: memchr,  Next: memcmp,  Prev: malloc,  Up: C library functions

'memchr' Function
-----------------

     #include <string.h>

     #define BUFLENGTH 1024

     Integer new searchChar;
     Integer new length;
     char buf[BUFLENGTH], *charptr;

     length = BUFLENGTH

     strcpy (buf, "Some text.");

     searchChar = '.';

     charptr = (char *)memchr ((void *)buf, searchChar, length);



File: ctalk.info,  Node: memcmp,  Next: memcpy,  Prev: memchr,  Up: C library functions

'memcmp' Function
-----------------

     #include <string.h>

     #define BUFLENGTH 1024

     Integer new length;
     Integer new result;
     char buf1[BUFLENGTH], buf2[BUFLENGTH];

     length = BUFLENGTH

     strcpy (buf1, "Some text.");
     strcpy (buf2, "Some other text.");

     result = memcmp ((void *)buf1, (void *)buf2, length);



File: ctalk.info,  Node: memcpy,  Next: memmove,  Prev: memcmp,  Up: C library functions

'memcpy' Function
-----------------

     #include <string.h>

     #define BUFLENGTH 1024

     Integer new length;
     Integer new result;
     char buf1[BUFLENGTH], buf2[BUFLENGTH], *charptr;

     length = BUFLENGTH

     strcpy (buf1, "Some text.");

     result = (char *)memcpy ((void *)buf1, (void *)buf2, length);



File: ctalk.info,  Node: memmove,  Next: memset,  Prev: memcpy,  Up: C library functions

'memmove' Function
------------------

     #include <string.h>

     #define BUFLENGTH 1024

     Integer new length;
     Integer new result;
     char buf1[BUFLENGTH], buf2[BUFLENGTH], *charptr;

     length = BUFLENGTH

     strcpy (buf1, "Some text.");

     charptr = (char *)memmove ((void *)buf1, (void *)buf2, length);



File: ctalk.info,  Node: memset,  Next: mkdir,  Prev: memmove,  Up: C library functions

'memset' Function
-----------------

     #include <string.h>

     #define BUFLENGTH 1024

     Integer new length;
     Integer new fillChar;
     char buf[BUFLENGTH], *charptr;

     length = BUFLENGTH
     fillChar = 0;

     charptr = (char *)memset ((void *)buf1, fillChar, length);



File: ctalk.info,  Node: mkdir,  Next: modf,  Prev: memset,  Up: C library functions

'mkdir' Function
----------------

     Integer new r;
     String new myDirName;

     myDirName = "myDir";

     r = mkdir (myDirName);


File: ctalk.info,  Node: modf,  Next: nearbyint,  Prev: mkdir,  Up: C library functions

'modf' Function
---------------

     #include <math.h>

     double dptr;
     Float new x;
     Float new frac;

     x = 2.54;

     frac = modf (x, &dptr);


File: ctalk.info,  Node: nearbyint,  Next: perror,  Prev: modf,  Up: C library functions

'nearbyint' Function
--------------------

     #include <math.h>

     Float new x;
     Float new result;

     x = 2.53;

     result = nearbyint (x);


File: ctalk.info,  Node: perror,  Next: pow,  Prev: nearbyint,  Up: C library functions

'perror' Function
-----------------

     #include <stdio.h>

     String new message;

     message = "Program error";

     perror (message);


File: ctalk.info,  Node: pow,  Next: printf,  Prev: perror,  Up: C library functions

'pow' Function
--------------

     #include <math.h>

     Float new x;
     Float new exp;
     Float new result;

     x = 2.5;
     exp = 2;

     result = pow (x, exp);


File: ctalk.info,  Node: printf,  Next: raise,  Prev: pow,  Up: C library functions

'printf' Function
-----------------

     #include <stdio.h>

     String new message;
     String new fmt;

     printf (fmt, message);


File: ctalk.info,  Node: raise,  Next: rand,  Prev: printf,  Up: C library functions

'raise' Function
----------------

     #include <signal.h>

     Integer new signal;
     Integer new result;

     signal = SIGTERM;

     result = raise (signal);


File: ctalk.info,  Node: rand,  Next: realloc,  Prev: raise,  Up: C library functions

'rand' Function
---------------

     #include <stdlib.h>

     Integer new random;

     random = rand ();


File: ctalk.info,  Node: realloc,  Next: remove,  Prev: rand,  Up: C library functions

'realloc' Function
------------------

     #include <stdlib.h>

     int *intptr;
     Integer new size;

     size = sizeof (int *);

     intptr = (int *)realloc (NULL, size);



File: ctalk.info,  Node: remove,  Next: rename,  Prev: realloc,  Up: C library functions

'remove' Function
-----------------

     #include <stdio.h>

     String new path;
     Integer new result;

     path = ``/home/user'';

     result = remove (path);



File: ctalk.info,  Node: rename,  Next: rindex,  Prev: remove,  Up: C library functions

'rename' Function
-----------------

     #include <stdio.h>

     String new oldPath;
     String new newPath;
     Integer new result;

     oldPath = "/home/user";
     newPath = "/home/joe";

     result = rename (oldPath, newPath);



File: ctalk.info,  Node: rindex,  Next: rint,  Prev: rename,  Up: C library functions

'rindex' Function
-----------------

*Note strrchr::.


File: ctalk.info,  Node: rint,  Next: rmdir,  Prev: rindex,  Up: C library functions

'rint' Function
---------------

     #include <math.h>

     Float new myFloat;
     Float new myIntValue;

     myFloat = 2.54;

     myIntValue = rint (myFloat);



File: ctalk.info,  Node: rmdir,  Next: round,  Prev: rint,  Up: C library functions

'rmdir' Function
----------------

     r = rmdir (dirToRemove);


File: ctalk.info,  Node: round,  Next: scanf,  Prev: rmdir,  Up: C library functions

'round' Function
----------------

     #include <math.h>

     Float new myFloat;
     Float new myIntValue;

     myFloat = 2.54;

     myIntValue = round (myFloat);



File: ctalk.info,  Node: scanf,  Next: sin,  Prev: round,  Up: C library functions

'scanf' Function
----------------

*Note Variable arguments::.


File: ctalk.info,  Node: sin,  Next: sinh,  Prev: scanf,  Up: C library functions

'sin' Function
--------------

     #include <math.h>

     Float new x;
     Float new sinX;

     x = 2.5;

     sinX = sin (x);


File: ctalk.info,  Node: sinh,  Next: snprintf,  Prev: sin,  Up: C library functions

'sinh' Function
---------------

     #include <math.h>

     Float new x;
     Float new sinX;

     x = 2.5;

     sinX = sinh (x);


File: ctalk.info,  Node: snprintf,  Next: sprintf,  Prev: sinh,  Up: C library functions

'snprintf' Function
-------------------

*Note Variable arguments::.


File: ctalk.info,  Node: sprintf,  Next: sqrt,  Prev: snprintf,  Up: C library functions

'sprintf' Function
------------------

*Note Variable arguments::.


File: ctalk.info,  Node: sqrt,  Next: srand,  Prev: sprintf,  Up: C library functions

'sqrt' Function
---------------

     #include <math.h>

     Array instanceMethod printSquareRoot (void) {

       Float new squareRoot;
       WriteFileStream classInit;

       /*
        *  Use Ctalk C API library function calls within a C function.
        */
       squareRoot = sqrt(__ctalk_to_c_double(__ctalk_self_internal ()));
       stdoutStream writeStream squareRoot;

       return NULL;
     }

     int main () {

       Array new floatArray;

       floatArray atPut 0, 1.0;
       floatArray atPut 1, 4.0;
       floatArray atPut 2, 9.0;
       floatArray atPut 3, 16.0;
       floatArray atPut 4, 25.0;

       floatArray map printSquareRoot;

     }


File: ctalk.info,  Node: srand,  Next: sscanf,  Prev: sqrt,  Up: C library functions

'srand' Function
----------------

     #include <stdlib.h>

     Integer new seed;

     seed = 2;

     srand (seed);



File: ctalk.info,  Node: sscanf,  Next: strcat-strcpy,  Prev: srand,  Up: C library functions

'sscanf' Function
-----------------

*Note Variable arguments::.

_Note:_ The C99 standard requires that 'stdin,' 'stdout,' and 'stderr'
should be implemented as macros, which on some systems (notably Solaris)
causes problems with C-to-object translation.  If Ctalk cannot register
these macros as C variables, then either call 'sscanf(3)' C function
with only C variables, or use a method with 'stdoutStream' or
'stderrStream' *Note WriteFileStream::, or 'stdinStream' *Note
ReadFileStream::.


File: ctalk.info,  Node: strcat-strcpy,  Next: strchr,  Prev: sscanf,  Up: C library functions

'strcat,' 'strcasecmp', 'strcmp,' and 'strcpy' Functions
--------------------------------------------------------

The 'strcat(3),' 'strcasecmp(3),' 'strcmp(3),' and 'strcpy(3)' functions
work in most statements.  When necessary, Ctalk uses 'cStrcat',
'cStrcasecmp', 'cStrcmp', and 'cStrcpy' (class 'CFunction').  *Note
CFunction::.


File: ctalk.info,  Node: strchr,  Next: strcoll,  Prev: strcat-strcpy,  Up: C library functions

'strchr' Function
-----------------

     #include <string.h>

     int main () {

       String new s;
       String new result;

       s = "s1";

       if ((result = strchr (s, '1')) == "1") {
         printf ("Pass\n");
       } else {
         printf ("Fail\n");
       }

       exit(0);
     }


File: ctalk.info,  Node: strcoll,  Next: strspn,  Prev: strchr,  Up: C library functions

'strcoll' Function
------------------

     #include <string.h>

     String new s1;
     String new s2;
     Integer new result;

     result = strcoll (s1, s2);


File: ctalk.info,  Node: strspn,  Next: strerror,  Prev: strcoll,  Up: C library functions

'strspn' Function
-----------------


File: ctalk.info,  Node: strerror,  Next: strftime,  Prev: strspn,  Up: C library functions

'strerror' Function
-------------------


File: ctalk.info,  Node: strftime,  Next: strlen,  Prev: strerror,  Up: C library functions

'strftime' Function
-------------------


File: ctalk.info,  Node: strlen,  Next: strncat-strncpy,  Prev: strftime,  Up: C library functions

'strlen' Function
-----------------


File: ctalk.info,  Node: strncat-strncpy,  Next: strpbrk,  Prev: strlen,  Up: C library functions

'strncat,' 'strncmp,' and 'strncpy' Functions
---------------------------------------------

The 'strncat(3),' 'strncasecmp(3),' 'strncmp(3),' and 'strncpy(3)'
functions work in most statements.  When necessary, Ctalk uses
'cStrncat,' 'cStrncasecmp,' 'cStrncmp,' and 'cStrncpy' (class
'CFunction').  *Note CFunction::.


File: ctalk.info,  Node: strpbrk,  Next: strrchr,  Prev: strncat-strncpy,  Up: C library functions

'strpbrk' Function
------------------


File: ctalk.info,  Node: strrchr,  Next: strstr,  Prev: strpbrk,  Up: C library functions

'strrchr' Function
------------------

     #include <string.h>

     String new s1;
     Character new searchChar;
     String new charptr;

     searchChar = '/';
     s1 = "/home/user";

     charptr = strrchr (s1, searchChar);


File: ctalk.info,  Node: strstr,  Next: strtod,  Prev: strrchr,  Up: C library functions

'strstr' Function
-----------------


File: ctalk.info,  Node: strtod,  Next: strtok,  Prev: strstr,  Up: C library functions

'strtod' Function
-----------------


File: ctalk.info,  Node: strtok,  Next: strtoll,  Prev: strtod,  Up: C library functions

'strtok' Function
-----------------


File: ctalk.info,  Node: strtoll,  Next: strxfrm,  Prev: strtok,  Up: C library functions

'strtoll' Function
------------------


File: ctalk.info,  Node: strxfrm,  Next: system,  Prev: strtoll,  Up: C library functions

'strxfrm' Function
------------------


File: ctalk.info,  Node: system,  Next: tan,  Prev: strxfrm,  Up: C library functions

'system' Function
-----------------

     #include <stdlib.h>

     String new commandLine;

     commandLine = "ls -lR";

     system (commandLine);


File: ctalk.info,  Node: tan,  Next: tanh,  Prev: system,  Up: C library functions

'tan' Function
--------------


File: ctalk.info,  Node: tanh,  Next: tmpnam,  Prev: tan,  Up: C library functions

'tanh' Function
---------------


File: ctalk.info,  Node: tmpnam,  Next: tolower,  Prev: tanh,  Up: C library functions

'tmpnam' Function
-----------------


File: ctalk.info,  Node: tolower,  Next: toupper,  Prev: tmpnam,  Up: C library functions

'tolower' Function
------------------

The 'tolower' function may be implemented in a non-portable manner.  Use
the 'toLower' method instead.


File: ctalk.info,  Node: toupper,  Next: trunc,  Prev: tolower,  Up: C library functions

'toupper' Function
------------------

The 'toupper' function may be implemented in a non-portable manner.  Use
the 'toUpper' method instead.


File: ctalk.info,  Node: trunc,  Next: ungetc,  Prev: toupper,  Up: C library functions

'trunc' Function
----------------


File: ctalk.info,  Node: ungetc,  Next: vfprintf,  Prev: trunc,  Up: C library functions

'ungetc' Function
-----------------


File: ctalk.info,  Node: vfprintf,  Next: vfscanf,  Prev: ungetc,  Up: C library functions

'vfprintf' Function
-------------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'printf(3)' or 'writeStream' (class 'WriteFileStream')
instead.


File: ctalk.info,  Node: vfscanf,  Next: vprintf,  Prev: vfprintf,  Up: C library functions

'vfscanf' Function
------------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'scanf(3)' instead.  *Note Variable arguments::.


File: ctalk.info,  Node: vprintf,  Next: vscanf,  Prev: vfscanf,  Up: C library functions

'vprintf' Function
------------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'printf(3)' or 'writeStream' (class 'WriteFileStream')
instead.


File: ctalk.info,  Node: vscanf,  Next: vsnprintf,  Prev: vprintf,  Up: C library functions

'vscanf' Function
-----------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'scanf(3)' instead.  *Note Variable arguments::.


File: ctalk.info,  Node: vsnprintf,  Next: vsprintf,  Prev: vscanf,  Up: C library functions

'vsnprintf' Function
--------------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'sprintf(3)' instead.  *Note Variable arguments::.


File: ctalk.info,  Node: vsprintf,  Next: vsscanf,  Prev: vsnprintf,  Up: C library functions

'vsprintf' Function
-------------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'sprintf(3)' instead.  *Note Variable arguments::.


File: ctalk.info,  Node: vsscanf,  Prev: vsprintf,  Up: C library functions

'vsscanf' Function
------------------

This version of Ctalk does not support the 'va_list' data type.  You
should use 'sprintf(3)' instead.  *Note Variable arguments::.


File: ctalk.info,  Node: GNU tools,  Prev: C library functions,  Up: C

Using GNU Tools with Ctalk
--------------------------

If you want to build Ctalk programs using the GNU configuration tools;
i.e, the './configure,' 'make,' 'make install' sequence of commands, you
need to tell the build tools about Ctalk.

Doing this mostly involves telling the utility 'automake,' which helps
write 'Makefiles' for the 'make' program, how to build a Ctalk source
file into an executable.

The 'make' program allows Makefiles to define rules to build different
types of input files into programs, libraries, and other types of data
files.

In order to distinguish a Ctalk file, we give it the file extension
'.ca'.  This lets the build tools know that the Ctalk program isn't a
standard C input file.

Then, in 'Makefile.am' (consult the 'automake' manual if you're not
certain what this is), you can define a rule to build a '.ca' file into
an '.o' object file.


     SUFFIXES=.ca .o

     .ca.o:
     	$(top_builddir)/src/ctalk -I $(top_builddir)/classes $< \
     	  -o `basename $ .o`.i ; \
     	$(CC) -c $(AM_CFLAGS) $(AM_CPPFLAGS) $(DEFS) -o $ `basename $< .ca`.i


Then, add another line to link the object file into a program.


     methods$(EXEEXT) : methods.o
     	$(CC) methods.o $(AM_LDFLAGS) $(LDFLAGS) $(LIBS) -o methods$(EXEEXT)


Note that this example comes from the 'methods' program in the Ctalk
distribution, where, "methods," is the canonical name of the output
file, as defined in the 'bin_PROGRAMS' macro.  That allows 'make' to
install the program normally when you type, 'make install.'

If you're using Ctalk for another package, you'll almost certainly want
to change the paths to something that uses an already-installed Ctalk.
In that case, 'Makefile.am' might contain lines like these.


     SUFFIXES=.ca .o

     .ca.o:
     	/usr/local/bin/ctalk -I /usr/local/include/classes $< \
     	  -o `basename $ .o`.i ; \
     	$(CC) -c $(AM_CFLAGS) $(AM_CPPFLAGS) $(DEFS) -o $ `basename $< .ca`.i


Cleaning Up Extra Files
.......................

Note that the 'basename' command in these examples handles the
translation of the 'make' targets into an intermediate Ctalk file.

This way 'make' doesn't need to worry about any intermediate files,
except that the 'Makefile' should clean them up.

So to define rules to clean up the extra files after the build, include
'make' targets like these in 'Makefile.am.'


     clean-local:
     	rm -f *.i

     distclean-local:
     	rm -f *.i



Running Ctalk Utilities in an Emacs Window
..........................................

The 'doc/' subdirectory of the Ctalk source code distribution contains
the Emacs Lisp programs 'classes.el', 'methods-brief.el', and
'methods-full.el'.  They define simple Emacs Lisp functions that let you
capture the output of the Ctalk utilities in an Emacs window.

The documentation file, 'ctalktools.info' contains descriptions of these
functions, and the files also contain instructions to install and use
them.


File: ctalk.info,  Node: Copying,  Next: GNU Free Documentation License,  Prev: C,  Up: Top

Copying and Distributing Ctalk
==============================

Ctalk is free software.  You can copy, distribute, and modify Ctalk
under the terms of the GNU General Public License, Version 3 (see,
'COPYING', in the Ctalk distribution).  You can also distribute
executable programs which link to the 'ctalk' run time libraries under
the terms of the GNU Lesser General Public License, Version 3
('COPYING.LIB' in the Ctalk distribution).


File: ctalk.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Copying,  Up: Top

GNU Free Documentation License
==============================


                             Version 1.1, March 2000
          Copyright (C) 2000  Free Software Foundation, Inc.
          59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

          Everyone is permitted to copy and distribute verbatim copies
          of this license document, but changing it is not allowed.



       0. PREAMBLE

          The purpose of this License is to make a manual, textbook, or other
          written document "free" in the sense of freedom: to assure everyone
          the effective freedom to copy and redistribute it, with or without
          modifying it, either commercially or noncommercially.  Secondarily,
          this License preserves for the author and publisher a way to get
          credit for their work, while not being considered responsible for
          modifications made by others.

          This License is a kind of "copyleft", which means that derivative
          works of the document must themselves be free in the same sense.
          It complements the GNU General Public License, which is a copyleft
          license designed for free software.

          We have designed this License in order to use it for manuals for
          free software, because free software needs free documentation: a
          free program should come with manuals providing the same freedoms
          that the software does.  But this License is not limited to
          software manuals; it can be used for any textual work, regardless
          of subject matter or whether it is published as a printed book.
          We recommend this License principally for works whose purpose is
          instruction or reference.


       1. APPLICABILITY AND DEFINITIONS

          This License applies to any manual or other work that contains a
          notice placed by the copyright holder saying it can be distributed
          under the terms of this License.  The "Document", below, refers to
          any such manual or work.  Any member of the public is a licensee,
          and is addressed as "you."

          A "Modified Version" of the Document means any work containing the
          Document or a portion of it, either copied verbatim, or with
          modifications and/or translated into another language.

          A "Secondary Section" is a named appendix or a front-matter
          section of the Document that deals exclusively with the
          relationship of the publishers or authors of the Document to the
          Document's overall subject (or to related matters) and contains
          nothing that could fall directly within that overall subject.
          (For example, if the Document is in part a textbook of
          mathematics, a Secondary Section may not explain any mathematics.)
          The relationship could be a matter of historical connection with
          the subject or with related matters, or of legal, commercial,
          philosophical, ethical or political position regarding them.

          The "Invariant Sections" are certain Secondary Sections whose
          titles are designated, as being those of Invariant Sections, in
          the notice that says that the Document is released under this
          License.

          The "Cover Texts" are certain short passages of text that are
          listed, as Front-Cover Texts or Back-Cover Texts, in the notice
          that says that the Document is released under this License.

          A "Transparent" copy of the Document means a machine-readable copy,
          represented in a format whose specification is available to the
          general public, whose contents can be viewed and edited directly
          and straightforwardly with generic text editors or (for images
          composed of pixels) generic paint programs or (for drawings) some
          widely available drawing editor, and that is suitable for input to
          text formatters or for automatic translation to a variety of
          formats suitable for input to text formatters.  A copy made in an
          otherwise Transparent file format whose markup has been designed
          to thwart or discourage subsequent modification by readers is not
          Transparent.  A copy that is not "Transparent" is called "Opaque."

          Examples of suitable formats for Transparent copies include plain
          ASCII without markup, Texinfo input format, LaTeX input format,
          SGML or XML using a publicly available DTD, and
          standard-conforming simple HTML designed for human modification.
          Opaque formats include PostScript, PDF, proprietary formats that
          can be read and edited only by proprietary word processors, SGML
          or XML for which the DTD and/or processing tools are not generally
          available, and the machine-generated HTML produced by some word
          processors for output purposes only.

          The "Title Page" means, for a printed book, the title page itself,
          plus such following pages as are needed to hold, legibly, the
          material this License requires to appear in the title page.  For
          works in formats which do not have any title page as such, "Title
          Page" means the text near the most prominent appearance of the
          work's title, preceding the beginning of the body of the text.


       2. VERBATIM COPYING

          You may copy and distribute the Document in any medium, either
          commercially or noncommercially, provided that this License, the
          copyright notices, and the license notice saying this License
          applies to the Document are reproduced in all copies, and that you
          add no other conditions whatsoever to those of this License.  You
          may not use technical measures to obstruct or control the reading
          or further copying of the copies you make or distribute.  However,
          you may accept compensation in exchange for copies.  If you
          distribute a large enough number of copies you must also follow
          the conditions in section 3.

          You may also lend copies, under the same conditions stated above,
          and you may publicly display copies.


       3. COPYING IN QUANTITY

          If you publish printed copies of the Document numbering more than
          100, and the Document's license notice requires Cover Texts, you
          must enclose the copies in covers that carry, clearly and legibly,
          all these Cover Texts: Front-Cover Texts on the front cover, and
          Back-Cover Texts on the back cover.  Both covers must also clearly
          and legibly identify you as the publisher of these copies.  The
          front cover must present the full title with all words of the
          title equally prominent and visible.  You may add other material
          on the covers in addition.  Copying with changes limited to the
          covers, as long as they preserve the title of the Document and
          satisfy these conditions, can be treated as verbatim copying in
          other respects.

          If the required texts for either cover are too voluminous to fit
          legibly, you should put the first ones listed (as many as fit
          reasonably) on the actual cover, and continue the rest onto
          adjacent pages.

          If you publish or distribute Opaque copies of the Document
          numbering more than 100, you must either include a
          machine-readable Transparent copy along with each Opaque copy, or
          state in or with each Opaque copy a publicly-accessible
          computer-network location containing a complete Transparent copy
          of the Document, free of added material, which the general
          network-using public has access to download anonymously at no
          charge using public-standard network protocols.  If you use the
          latter option, you must take reasonably prudent steps, when you
          begin distribution of Opaque copies in quantity, to ensure that
          this Transparent copy will remain thus accessible at the stated
          location until at least one year after the last time you
          distribute an Opaque copy (directly or through your agents or
          retailers) of that edition to the public.

          It is requested, but not required, that you contact the authors of
          the Document well before redistributing any large number of
          copies, to give them a chance to provide you with an updated
          version of the Document.


       4. MODIFICATIONS

          You may copy and distribute a Modified Version of the Document
          under the conditions of sections 2 and 3 above, provided that you
          release the Modified Version under precisely this License, with
          the Modified Version filling the role of the Document, thus
          licensing distribution and modification of the Modified Version to
          whoever possesses a copy of it.  In addition, you must do these
          things in the Modified Version:

          A. Use in the Title Page (and on the covers, if any) a title
          distinct    from that of the Document, and from those of previous
          versions    (which should, if there were any, be listed in the
          History section    of the Document).  You may use the same title
          as a previous version    if the original publisher of that version
          gives permission.
          B. List on the Title Page, as authors, one or more persons or
          entities    responsible for authorship of the modifications in the
          Modified    Version, together with at least five of the principal
          authors of the    Document (all of its principal authors, if it
          has less than five).
          C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.
          D. Preserve all the copyright notices of the Document.
          E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.
          F. Include, immediately after the copyright notices, a license
          notice    giving the public permission to use the Modified Version
          under the    terms of this License, in the form shown in the
          Addendum below.
          G. Preserve in that license notice the full lists of Invariant
          Sections    and required Cover Texts given in the Document's
          license notice.
          H. Include an unaltered copy of this License.
          I. Preserve the section entitled "History", and its title, and add
          to    it an item stating at least the title, year, new authors, and
            publisher of the Modified Version as given on the Title Page.
          If    there is no section entitled "History" in the Document,
          create one    stating the title, year, authors, and publisher of
          the Document as    given on its Title Page, then add an item
          describing the Modified    Version as stated in the previous
          sentence.
          J. Preserve the network location, if any, given in the Document for
            public access to a Transparent copy of the Document, and
          likewise    the network locations given in the Document for
          previous versions    it was based on.  These may be placed in the
          "History" section.     You may omit a network location for a work
          that was published at    least four years before the Document
          itself, or if the original    publisher of the version it refers
          to gives permission.
          K. In any section entitled "Acknowledgements" or "Dedications",
          preserve the section's title, and preserve in the section all the
           substance and tone of each of the contributor acknowledgements
          and/or dedications given therein.
          L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section titles.
          M. Delete any section entitled "Endorsements."  Such a section
          may not be included in the Modified Version.
          N. Do not retitle any existing section as "Endorsements"    or to
          conflict in title with any Invariant Section.

          If the Modified Version includes new front-matter sections or
          appendices that qualify as Secondary Sections and contain no
          material copied from the Document, you may at your option
          designate some or all of these sections as invariant.  To do this,
          add their titles to the list of Invariant Sections in the Modified
          Version's license notice.  These titles must be distinct from any
          other section titles.

          You may add a section entitled "Endorsements", provided it contains
          nothing but endorsements of your Modified Version by various
          parties-for example, statements of peer review or that the text has
          been approved by an organization as the authoritative definition
          of a standard.

          You may add a passage of up to five words as a Front-Cover Text,
          and a passage of up to 25 words as a Back-Cover Text, to the end
          of the list of Cover Texts in the Modified Version.  Only one
          passage of Front-Cover Text and one of Back-Cover Text may be
          added by (or through arrangements made by) any one entity.  If the
          Document already includes a cover text for the same cover,
          previously added by you or by arrangement made by the same entity
          you are acting on behalf of, you may not add another; but you may
          replace the old one, on explicit permission from the previous
          publisher that added the old one.

          The author(s) and publisher(s) of the Document do not by this
          License give permission to use their names for publicity for or to
          assert or imply endorsement of any Modified Version.


       5. COMBINING DOCUMENTS

          You may combine the Document with other documents released under
          this License, under the terms defined in section 4 above for
          modified versions, provided that you include in the combination
          all of the Invariant Sections of all of the original documents,
          unmodified, and list them all as Invariant Sections of your
          combined work in its license notice.

          The combined work need only contain one copy of this License, and
          multiple identical Invariant Sections may be replaced with a single
          copy.  If there are multiple Invariant Sections with the same name
          but different contents, make the title of each such section unique
          by adding at the end of it, in parentheses, the name of the
          original author or publisher of that section if known, or else a
          unique number.  Make the same adjustment to the section titles in
          the list of Invariant Sections in the license notice of the
          combined work.

          In the combination, you must combine any sections entitled
          "History" in the various original documents, forming one section
          entitled "History"; likewise combine any sections entitled
          "Acknowledgements", and any sections entitled "Dedications."  You
          must delete all sections entitled "Endorsements."


       6. COLLECTIONS OF DOCUMENTS

          You may make a collection consisting of the Document and other
          documents released under this License, and replace the individual
          copies of this License in the various documents with a single copy
          that is included in the collection, provided that you follow the
          rules of this License for verbatim copying of each of the
          documents in all other respects.

          You may extract a single document from such a collection, and
          distribute it individually under this License, provided you insert
          a copy of this License into the extracted document, and follow
          this License in all other respects regarding verbatim copying of
          that document.


       7. AGGREGATION WITH INDEPENDENT WORKS

          A compilation of the Document or its derivatives with other
          separate and independent documents or works, in or on a volume of
          a storage or distribution medium, does not as a whole count as a
          Modified Version of the Document, provided no compilation
          copyright is claimed for the compilation.  Such a compilation is
          called an "aggregate", and this License does not apply to the
          other self-contained works thus compiled with the Document, on
          account of their being thus compiled, if they are not themselves
          derivative works of the Document.

          If the Cover Text requirement of section 3 is applicable to these
          copies of the Document, then if the Document is less than one
          quarter of the entire aggregate, the Document's Cover Texts may be
          placed on covers that surround only the Document within the
          aggregate.  Otherwise they must appear on covers around the whole
          aggregate.


       8. TRANSLATION

          Translation is considered a kind of modification, so you may
          distribute translations of the Document under the terms of section
          4.  Replacing Invariant Sections with translations requires special
          permission from their copyright holders, but you may include
          translations of some or all Invariant Sections in addition to the
          original versions of these Invariant Sections.  You may include a
          translation of this License provided that you also include the
          original English version of this License.  In case of a
          disagreement between the translation and the original English
          version of this License, the original English version will prevail.


       9. TERMINATION

          You may not copy, modify, sublicense, or distribute the Document
          except as expressly provided for under this License.  Any other
          attempt to copy, modify, sublicense or distribute the Document is
          void, and will automatically terminate your rights under this
          License.  However, parties who have received copies, or rights,
          from you under this License will not have their licenses
          terminated so long as such parties remain in full compliance.


      10. FUTURE REVISIONS OF THIS LICENSE

          The Free Software Foundation may publish new, revised versions of
          the GNU Free Documentation License from time to time.  Such new
          versions will be similar in spirit to the present version, but may
          differ in detail to address new problems or concerns.  See
          http://www.gnu.org/copyleft/.

          Each version of the License is given a distinguishing version
          number.  If the Document specifies that a particular numbered
          version of this License "or any later version" applies to it, you
          have the option of following the terms and conditions either of
          that specified version or of any later version that has been
          published (not as a draft) by the Free Software Foundation.  If
          the Document does not specify a version number of this License,
          you may choose any version ever published (not as a draft) by the
          Free Software Foundation.


     ADDENDUM: How to use this License for your documents

        To use this License in a document you have written, include a copy of
     the License in the document and put the following copyright and license
     notices just after the title page:

          Copyright (C)  YEAR  YOUR NAME.
          Permission is granted to copy, distribute and/or modify this document
          under the terms of the GNU Free Documentation License, Version 1.1
          or any later version published by the Free Software Foundation;
          with the Invariant Sections being LIST THEIR TITLES, with the
          Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
          A copy of the license is included in the section entitled "GNU
          Free Documentation License."

        If you have no Invariant Sections, write "with no Invariant Sections"
     instead of saying which ones are invariant.  If you have no Front-Cover
     Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
     LIST"; likewise for Back-Cover Texts.

        If your document contains nontrivial examples of program code, we
     recommend releasing these examples in parallel under your choice of
     free software license, such as the GNU General Public License, to
     permit their use in free software.



File: ctalk.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Index
-----

 [index ]
* Menu:

* ! instance method (Character class):   Character.          (line   73)
* ! instance method (Magnitude class):   Magnitude.          (line   12)
* ! instance method (Object class):      Object.             (line   45)
* ! operator:                            Prefixes.           (line    6)
* ! operator <1>:                        Control structures. (line    6)
* != instance method (Boolean class):    Boolean.            (line   33)
* != instance method (Character class):  Character.          (line   77)
* != instance method (Integer class):    Integer.            (line   18)
* != instance method (LongInteger class): LongInteger.       (line   19)
* != instance method (Object class):     Object.             (line   48)
* != instance method (String class):     String.             (line   73)
* != instance method (String class) <1>: String.             (line   77)
* !~ instance method (String class):     String.             (line   37)
* !~ instance method (String class) <1>: String.             (line   68)
* #pragma GCC dependency:                C statements.       (line   22)
* #pragma GCC pack:                      C statements.       (line   33)
* #pragma GCC poison:                    C statements.       (line   25)
* #pragma GCC system header:             C statements.       (line   29)
* #pragma implementation:                C statements.       (line   18)
* #pragma interface:                     C statements.       (line   18)
* #pragma STDC CX_LIMITED_RANGE:         C statements.       (line   33)
* #pragma STDC FENV_ACCESS:              C statements.       (line   33)
* #pragma STDC FP_CONTRACT:              C statements.       (line   33)
* $ metacharacter:                       String.             (line  551)
* % instance method (Integer class):     Integer.            (line   27)
* % instance method (LongInteger class): LongInteger.        (line   45)
* %= instance method (Integer class):    Integer.            (line   31)
* %= instance method (LongInteger class): LongInteger.       (line   49)
* & instance method (Character class):   Character.          (line   80)
* & instance method (Integer class):     Integer.            (line   22)
* & instance method (LongInteger class): LongInteger.        (line   53)
* & instance method (Object class):      Object.             (line   53)
* & instance method (Object class) <1>:  Integer.            (line   22)
* & instance method (Object class) <2>:  LongInteger.        (line   53)
* & operator:                            Prefixes.           (line    6)
* && instance method (Boolean class):    Boolean.            (line   37)
* && instance method (Character class):  Character.          (line   83)
* && instance method (Float class):      Float.              (line   19)
* && instance method (Integer class):    Integer.            (line   35)
* && instance method (LongInteger class): LongInteger.       (line   58)
* &= instance method (Integer class):    Integer.            (line   38)
* &= instance method (LongInteger class): LongInteger.       (line   62)
* &= instance method (Object class):     LongInteger.        (line   62)
* ( metacharacter:                       String.             (line  597)
* ) metacharacter:                       String.             (line  597)
* * instance method (Character class):   Character.          (line   86)
* * instance method (Collection class):  Collection.         (line   26)
* * instance method (Float class):       Float.              (line   42)
* * instance method (Integer class):     Integer.            (line   63)
* * instance method (LongInteger class): LongInteger.        (line   66)
* * instance method (Magnitude class):   Magnitude.          (line   16)
* * instance method (String class):      String.             (line   51)
* * instance method (Symbol class):      Symbol.             (line   55)
* * metacharacter:                       String.             (line  555)
* * operator:                            Prefixes.           (line    6)
* *= instance method (Character class):  Character.          (line   90)
* *= instance method (Float class):      Float.              (line   45)
* *= instance method (Integer class):    Integer.            (line   66)
* + instance method (Character class):   Character.          (line   93)
* + instance method (Collection class):  Collection.         (line   32)
* + instance method (Float class):       Float.              (line   26)
* + instance method (Integer class):     Integer.            (line   42)
* + instance method (Key class):         Key.                (line   54)
* + instance method (LongInteger class): LongInteger.        (line   28)
* + instance method (String class):      String.             (line   81)
* + instance method (Vector class):      Vector.             (line   51)
* + metacharacter:                       String.             (line  558)
* + method (Integer class):              Self and super.     (line    9)
* ++ instance method (Character class):  Character.          (line   97)
* ++ instance method (Integer class):    Integer.            (line   45)
* ++ instance method (Key class):        Key.                (line   61)
* ++ instance method (LongInteger class): LongInteger.       (line   31)
* ++ instance method (String class):     String.             (line   87)
* ++ operator:                           Prefixes.           (line    6)
* += instance method (AssociativeArray class): AssociativeArray.
                                                             (line   86)
* += instance method (Character class):  Character.          (line  100)
* += instance method (Float class):      Float.              (line   29)
* += instance method (Integer class):    Integer.            (line   48)
* += instance method (List class):       List.               (line   12)
* += instance method (sortedList class): SortedList.         (line    9)
* += instance method (String class):     String.             (line   96)
* += instance method (Vector class):     Vector.             (line   55)
* - instance method (Character class):   Character.          (line  104)
* - instance method (Float class):       Float.              (line   33)
* - instance method (Integer class):     Integer.            (line   51)
* - instance method (Integer class) <1>: Integer.            (line   54)
* - instance method (Key class):         Key.                (line   86)
* - instance method (LongInteger class): LongInteger.        (line   35)
* - instance method (LongInteger class) <1>: LongInteger.    (line   38)
* - instance method (Magnitude class):   Magnitude.          (line   22)
* - instance method (String class):      String.             (line  103)
* -- instance method (Character class):  Character.          (line  108)
* -- instance method (Integer class):    Integer.            (line   57)
* -- instance method (Key class):        Key.                (line  119)
* -- instance method (LongInteger class): LongInteger.       (line   41)
* -- instance method (String class):     String.             (line  123)
* -- operator:                           Prefixes.           (line    6)
* -= instance method (Character class):  Character.          (line  111)
* -= instance method (Float class):      Float.              (line   38)
* -= instance method (Integer class):    Integer.            (line   60)
* -> instance method (Object class):     Object.             (line   57)
* -> instance method (Object class) <1>: Attributes.         (line   61)
* . metacharacter:                       String.             (line  548)
* / instance method (Character class):   Character.          (line  114)
* / instance method (Float class):       Float.              (line   49)
* / instance method (Integer class):     Integer.            (line   69)
* / instance method (LongInteger class): LongInteger.        (line   69)
* /= instance method (Character class):  Character.          (line  118)
* /= instance method (Float class):      Float.              (line   52)
* /= instance method (Integer class):    Integer.            (line   72)
* < instance method (Character class):   Character.          (line  121)
* < instance method (Float class):       Float.              (line   56)
* < instance method (Integer class):     Integer.            (line   75)
* < instance method (LongInteger class): LongInteger.        (line   72)
* << instance method (Character class):  Character.          (line  125)
* << instance method (Integer class):    Integer.            (line   79)
* << instance method (LongInteger class): LongInteger.       (line   80)
* <= instance method (Character class):  Character.          (line  129)
* <= instance method (Float class):      Float.              (line   60)
* <= instance method (Integer class):    Integer.            (line   83)
* <= instance method (LongInteger class): LongInteger.       (line   76)
* = instance method (Array class):       Array.              (line   43)
* = instance method (AssociativeArray class): AssociativeArray.
                                                             (line  109)
* = instance method (Boolean class):     Boolean.            (line   41)
* = instance method (Character class):   Character.          (line  133)
* = instance method (FileStream class):  FileStream.         (line   42)
* = instance method (Float class):       Float.              (line   23)
* = instance method (Integer class):     Integer.            (line   87)
* = instance method (Key class):         Key.                (line  127)
* = instance method (List class):        List.               (line   27)
* = instance method (List class) <1>:    Variable method arguments.
                                                             (line   24)
* = instance method (LongInteger class): LongInteger.        (line   22)
* = instance method (Object class):      Object.             (line  183)
* = instance method (SortedList class):  SortedList.         (line   24)
* = instance method (String class):      String.             (line   56)
* = instance method (Symbol class):      Symbol.             (line   58)
* == instance method (Boolean class):    Boolean.            (line   46)
* == instance method (Character class):  Character.          (line  148)
* == instance method (Integer class):    Integer.            (line   95)
* == instance method (LongInteger class): LongInteger.       (line   25)
* == instance method (Object class):     Object.             (line  187)
* == instance method (String class):     String.             (line   59)
* =~ instance method (String class):     String.             (line   37)
* =~ instance method (String class) <1>: String.             (line   63)
* > instance method (Character class):   Character.          (line  136)
* > instance method (Float class):       Float.              (line   64)
* > instance method (Integer class):     Integer.            (line   99)
* > instance method (LongInteger class): LongInteger.        (line   84)
* >= instance method (Character class):  Character.          (line  144)
* >= instance method (Float class):      Float.              (line   68)
* >= instance method (Integer class):    Integer.            (line  103)
* >= instance method (LongInteger class): LongInteger.       (line   88)
* >> instance method (Character class):  Character.          (line  140)
* >> instance method (Integer class):    Integer.            (line  107)
* >> instance method (LongInteger class): LongInteger.       (line   92)
* ? metacharacter:                       String.             (line  563)
* \ metacharacter:                       String.             (line  567)
* ^ instance method (Character class):   Character.          (line  151)
* ^ instance method (Integer class):     Integer.            (line  111)
* ^ instance method (Integer class) <1>: Integer.            (line  137)
* ^ instance method (LongInteger class): LongInteger.        (line   96)
* ^ metacharacter:                       String.             (line  549)
* ^= instance method (Integer class):    Integer.            (line  115)
* ^= instance method (LongInteger class): LongInteger.       (line   99)
* _error function:                       Ctalk library.      (line 2792)
* _store_int () function:                Ctalk library.      (line 2908)
* _warning function:                     Ctalk library.      (line 2852)
* __argvFileName function:               Ctalk library.      (line   16)
* __argvName function:                   Ctalk library.      (line   12)
* __arg_trace function:                  Ctalk library.      (line   19)
* __ctalkAddBasicNewTag () function:     Attributes.         (line   53)
* __ctalkAddClassVariable function:      Ctalk library.      (line   22)
* __ctalkAddInstanceVariable function:   Ctalk library.      (line   25)
* __ctalkAliasObject function:           Ctalk library.      (line   29)
* __ctalkAliasReceiver () function:      Ctalk library.      (line 1626)
* __ctalkAliasReceiver function:         Ctalk library.      (line   38)
* __ctalkANSIClearPaneLine function:     Ctalk library.      (line   60)
* __ctalkANSITerminalPaneMapWindow function: Ctalk library.  (line   63)
* __ctalkANSITerminalPaneMapWindow() C function: Pane.       (line   32)
* __ctalkANSITerminalPanePutchar function: Ctalk library.    (line   73)
* __ctalkANSITerminalPaneRefresh function: Ctalk library.    (line   77)
* __ctalkANSITerminalPaneUnmapWindow function: Ctalk library.
                                                             (line   70)
* __ctalkANSITerminalPaneUnMapWindow function: Ctalk library.
                                                             (line   81)
* __ctalkANSITerminalPaneUnMapWindow() C function: Pane.     (line   32)
* __ctalkARB () function:                Ctalk library.      (line   86)
* __ctalkArgBlkReturnVal () function:    Ctalk library.      (line   92)
* __ctalkArgBlkSetCallerReturn () function: Ctalk library.   (line   96)
* __ctalkArrayElementToCChar () function: Ctalk library.     (line  106)
* __ctalkArrayElementToCCharPtr () function: Ctalk library.  (line  105)
* __ctalkArrayElementToCDouble () function: Ctalk library.   (line  107)
* __ctalkArrayElementToCInt () function: Ctalk library.      (line  108)
* __ctalkArrayElementToCLongLongInt () function: Ctalk library.
                                                             (line  109)
* __ctalkArrayElementToCPtr () function: Ctalk library.      (line  110)
* __ctalkBackgroundMethodObjectMessage () function: Ctalk library.
                                                             (line  114)
* __ctalkBackgroundMethodObjectMessage2Args () function: Ctalk library.
                                                             (line  137)
* __ctalkCallerPrintOnSelf (char *FMT_ARG): Translating.     (line   58)
* __ctalkCallingFnObjectBecome:          Ctalk library.      (line  148)
* __ctalkCallingInstanceVarBecome:       Ctalk library.      (line  152)
* __ctalkCallingMethodObjectBecome:      Ctalk library.      (line  156)
* __ctalkCallingReceiverBecome:          Ctalk library.      (line  160)
* __ctalkCallMethodFn function:          Ctalk library.      (line  145)
* __ctalkCBoolToObj function:            Translating.        (line   64)
* __ctalkCBoolToObj function <1>:        Ctalk library.      (line  165)
* __ctalkCCharPtrToObj function:         Translating.        (line   68)
* __ctalkCCharPtrToObj function <1>:     Ctalk library.      (line  169)
* __ctalkCDoubleToObj function:          Translating.        (line   93)
* __ctalkCDoubleToObj function <1>:      Ctalk library.      (line  196)
* __ctalkCFUNCReturnClass function:      Ctalk library.      (line  214)
* __ctalkCharRadixToChar function:       Ctalk library.      (line  199)
* __ctalkCharRadixToCharASCII function:  Ctalk library.      (line  206)
* __ctalkCIntToObj function:             Translating.        (line   96)
* __ctalkCIntToObj function <1>:         Ctalk library.      (line  218)
* __ctalkClassLibraryPath function:      Translating.        (line   71)
* __ctalkClassMethodInitReturnClass function: Ctalk library. (line  224)
* __ctalkClassMethodParam function:      Ctalk library.      (line  227)
* __ctalkClassObject function:           Ctalk library.      (line  232)
* __ctalkClassSearchPath function:       Translating.        (line   90)
* __ctalkClassVariableObject () function: Ctalk library.     (line  235)
* __ctalkCLongLongToObj function:        Translating.        (line   99)
* __ctalkCLongLongToObj function <1>:    Ctalk library.      (line  221)
* __ctalkCloseGLXPane () function:       Ctalk library.      (line  267)
* __ctalkCloseX11Pane () function:       Ctalk library.      (line  271)
* __ctalkConsoleReadLine function:       Ctalk library.      (line  172)
* __ctalkCopyObject function:            Ctalk library.      (line  280)
* __ctalkCopyPaneStreams function:       Ctalk library.      (line  274)
* __ctalkCopyVariable function:          Ctalk library.      (line  277)
* __ctalkCreateArg function:             Ctalk library.      (line  183)
* __ctalkCreateArgA function:            Ctalk library.      (line  190)
* __ctalkCreateArgEntry function:        Ctalk library.      (line  289)
* __ctalkCreateArgEntryInit function:    Ctalk library.      (line  293)
* __ctalkCreateGLXMainWindow function:   Ctalk library.      (line  315)
* __ctalkCreateObject function:          Scoping.            (line   54)
* __ctalkCreateObject function <1>:      Ctalk library.      (line  300)
* __ctalkCreateObjectInit () function:   Templates.          (line  167)
* __ctalkCreateObjectInit function:      Scoping.            (line   54)
* __ctalkCreateObjectInit function <1>:  Ctalk library.      (line  304)
* __ctalkCreateWinBuffer function:       Ctalk library.      (line  312)
* __ctalkCreateWinBuffer() C function:   Pane.               (line   32)
* __ctalkCreateWinBuffer() C function <1>: Pane.             (line   42)
* __ctalkCreateX11MainWindow (OBJECT *X11PANE_OBJECT): Ctalk library.
                                                             (line  327)
* __ctalkCreateX11MainWindow function:   Ctalk library.      (line  327)
* __ctalkCreateX11MainWindowTitle (OBJECT *X11PANE_OBJECT,: Ctalk library.
                                                             (line  351)
* __ctalkCreateX11MainWindowTitle function: Ctalk library.   (line  351)
* __ctalkCreateX11SubWindow (OBJECT *SUBPANE_OBJECT, OBJECT *PARENTPANE_OBJECT): Ctalk library.
                                                             (line  356)
* __ctalkCreateX11SubWindow function:    Ctalk library.      (line  356)
* __ctalkCriticalExceptionInternal function: Ctalk library.  (line  378)
* __ctalkCriticalSysErrExceptionInternal function: Ctalk library.
                                                             (line  388)
* __ctalkCSymbolToObj function:          Translating.        (line  102)
* __ctalkCVARReturnClass function:       Ctalk library.      (line  393)
* __ctalkDecimalIntegerToASCII:          Translating.        (line    6)
* __ctalkDecimalIntegerToASCII function: Ctalk library.      (line  404)
* __ctalkDefaultSignalHandler () C function: SignalHandler.  (line   42)
* __ctalkDefaultSignalHandler function:  Ctalk library.      (line  419)
* __ctalkDefineClassMethod function:     Ctalk library.      (line  422)
* __ctalkDefineClassVariable function:   Ctalk library.      (line  427)
* __ctalkDefinedClassMethodObject function: Ctalk library.   (line  442)
* __ctalkDefinedInstanceMethodObject function: Ctalk library.
                                                             (line  447)
* __ctalkDefineInstanceMethod function:  Ctalk library.      (line  432)
* __ctalkDefineInstanceVariable function: Ctalk library.     (line  437)
* __ctalkDefineTemplateMethod function:  Ctalk library.      (line  452)
* __ctalkDeleteArgEntry function:        Ctalk library.      (line  297)
* __ctalkDeleteLastExceptionInternal function: Ctalk library.
                                                             (line  456)
* __ctalkDeleteObject function:          free.               (line    9)
* __ctalkDeleteObject function.:         Ctalk library.      (line  460)
* __ctalkDeleteObjectInternal (OBJECT *OBJ): Ctalk library.  (line  507)
* __ctalkDeleteObjectList function:      Ctalk library.      (line  512)
* __ctalkDeleteWinBuffer function:       Ctalk library.      (line  515)
* __ctalkDocDir function:                Ctalk library.      (line  519)
* __ctalkDoubleToASCII function:         Ctalk library.      (line  524)
* __ctalkErrorExit function:             Ctalk library.      (line  582)
* __ctalkEvalExpr function:              Ctalk library.      (line  586)
* __ctalkEvalExprU function:             Ctalk library.      (line  589)
* __ctalkExceptionInternal function:     Ctalk library.      (line  594)
* __ctalkExceptionNotifyInternal function: Ctalk library.    (line  627)
* __ctalkExec () function:               Ctalk library.      (line 1809)
* __ctalkFilePtrFromStr function:        Ctalk library.      (line  632)
* __ctalkFindClassMethodByFn function:   Ctalk library.      (line  648)
* __ctalkFindClassMethodByName function: Ctalk library.      (line  656)
* __ctalkFindClassVariable function:     Ctalk library.      (line  609)
* __ctalkFindInstanceMethodByFn function: Ctalk library.     (line  664)
* __ctalkFindInstanceMethodByName function: Ctalk library.   (line  672)
* __ctalkFindPrefixMethodByName function: Ctalk library.     (line  622)
* __ctalkFloatToASCII function:          Ctalk library.      (line  524)
* __ctalkFree function:                  Ctalk library.      (line  238)
* __ctalkGenericPtrFromStr function:     Ctalk library.      (line  718)
* __ctalkGetCallingFnObject function:    Ctalk library.      (line  726)
* __ctalkGetCallingMethodObject function: Ctalk library.     (line  732)
* __ctalkGetCArg () function:            Ctalk library.      (line  738)
* __ctalkGetClass function:              Ctalk library.      (line  771)
* __ctalkGetClassMethodByFn function:    Ctalk library.      (line  774)
* __ctalkGetClassMethodByName function:  Ctalk library.      (line  780)
* __ctalkGetClassVariable () function:   Ctalk library.      (line  792)
* __ctalkGetExceptionTrace () function:  Ctalk library.      (line  797)
* __ctalkGetExprParserAt function:       Ctalk library.      (line  785)
* __ctalkGetExprParserPtr function:      Ctalk library.      (line  789)
* __ctalkGetInstanceMethodByFn () function: Ctalk library.   (line  741)
* __ctalkGetInstanceMethodByName () function: Ctalk library. (line  746)
* __ctalkGetInstanceVariable () function: Ctalk library.     (line  801)
* __ctalkGetInstanceVariableByName () function: Ctalk library.
                                                             (line  806)
* __ctalkGetPrefixMethodByName () function: Ctalk library.   (line  812)
* __ctalkGetReceiverPtr () function:     Ctalk library.      (line  751)
* __ctalkGetRS function:                 Ctalk library.      (line  755)
* __ctalkGetRunTimeException () function: Ctalk library.     (line  760)
* __ctalkGetTemplateCallerCVAR function: Ctalk library.      (line  764)
* __ctalkGetTypeDef () function:         Ctalk library.      (line  818)
* __ctalkGetX11KeySym () function:       Ctalk library.      (line  821)
* __ctalkGLEW20 () function:             Ctalk library.      (line  842)
* __ctalkGlobalObjectBecome () function: Ctalk library.      (line  848)
* __ctalkGlobFiles () function:          Ctalk library.      (line  851)
* __ctalkGLXAlphaFT () function:         Ctalk library.      (line  901)
* __ctalkGLXDrawText () function:        Ctalk library.      (line  906)
* __ctalkGLXExtensionsString () function: Ctalk library.     (line  919)
* __ctalkGLXExtensionSupported () function: Ctalk library.   (line  922)
* __ctalkGLXFrameRate () function:       Ctalk library.      (line  926)
* __ctalkGLXFreeFTFont () function:      Ctalk library.      (line  931)
* __ctalkGLXFreeXFont () function:       Ctalk library.      (line  935)
* __ctalkGLXFullScreen () function:      Ctalk library.      (line  941)
* __ctalkGLXFullScreen () function <1>:  Ctalk library.      (line  992)
* __ctalkGLXNamedColorFT () function:    Ctalk library.      (line  944)
* __ctalkGLXPixelHeightFT () function:   Ctalk library.      (line  948)
* __ctalkGLXRefreshRate () function:     Ctalk library.      (line  952)
* __ctalkGLXSwapBuffers () function:     Ctalk library.      (line  958)
* __ctalkGLXSwapControl () function:     Ctalk library.      (line  962)
* __ctalkGLXTextWidth () function:       Ctalk library.      (line  969)
* __ctalkGLXUseFTFont () function:       Ctalk library.      (line  975)
* __ctalkGLXUseXFont () function:        Ctalk library.      (line  980)
* __ctalkGLXWindowPos2i () function:     Ctalk library.      (line  996)
* __ctalkGLXWinXOrg () function:         Ctalk library.      (line 1008)
* __ctalkGLXWinXSize () function:        Ctalk library.      (line 1008)
* __ctalkGLXWinYOrg () function:         Ctalk library.      (line 1008)
* __ctalkGLXWinYSize () function:        Ctalk library.      (line 1008)
* __ctalkGUIPaneClearRectangle () function: Ctalk library.   (line 1023)
* __ctalkGUIPaneClearWindow () function: Ctalk library.      (line 1027)
* __ctalkGUIPaneDrawCircleBasic () function: Ctalk library.  (line 1015)
* __ctalkGUIPaneDrawLine () function:    Ctalk library.      (line 1030)
* __ctalkGUIPaneDrawLineBasic () function: Ctalk library.    (line 1034)
* __ctalkGUIPaneDrawPoint () function:   Ctalk library.      (line 1042)
* __ctalkGUIPaneDrawRectangle () function: Ctalk library.    (line 1046)
* __ctalkGUIPaneDrawRoundedRectangle () function: Ctalk library.
                                                             (line 1050)
* __ctalkGUIPanePutStr () function:      Ctalk library.      (line 1055)
* __ctalkGUIPaneRefresh () function:     Ctalk library.      (line 1062)
* __ctalkGUISetBackground () function:   Ctalk library.      (line 1067)
* __ctalkGXLDrawTextFT () function:      Ctalk library.      (line  914)
* __ctalkHandleRunTimeException () function: Ctalk library.  (line 1122)
* __ctalkHandleRunTimeExceptionInternal () function: Ctalk library.
                                                             (line 1127)
* __ctalkHaveFTFaceBasic () function:    Ctalk library.      (line 1133)
* __ctalkHexIntegerToASCII () function:  Ctalk library.      (line 1139)
* __ctalkIconXPM () function:            Ctalk library.      (line 1149)
* __ctalkIgnoreSignal () C function:     SignalHandler.      (line   42)
* __ctalkIgnoreSignal () function:       Ctalk library.      (line 1160)
* __ctalkIncKeyRef () function:          Ctalk library.      (line 1163)
* __ctalkIncStringRef () C function:     String.             (line   87)
* __ctalkIncStringRef () C function <1>: String.             (line  103)
* __ctalkIncStringRef () C function <2>: String.             (line  123)
* __ctalkIncStringRef () function:       Ctalk library.      (line 1163)
* __ctalkInitFTLib () function:          Ctalk library.      (line 1258)
* __ctalkInitGLEW () function:           Ctalk library.      (line 1202)
* __ctalkInlineMethod () function:       Ctalk library.      (line 1206)
* __ctalkInstallHandler () C function:   SignalHandler.      (line   42)
* __ctalkInstallHandler () function:     Ctalk library.      (line 1224)
* __ctalkInstallPrefix () function:      Ctalk library.      (line 1231)
* __ctalkInstanceMethodInitReturnClass () function: Ctalk library.
                                                             (line 1247)
* __ctalkInstanceMethodParam () function: Ctalk library.     (line 1264)
* __ctalkInstanceVarIsCallersReceiver () function: Ctalk library.
                                                             (line 1254)
* __ctalkInstanceVarsFromClassObject () function: Ctalk library.
                                                             (line 1251)
* __ctalkIntFromCharConstant () function: Ctalk library.     (line 1269)
* __ctalkIntRadixToDecimalASCII () function: Ctalk library.  (line 1220)
* __ctalkIsCallersReceiver () function:  Ctalk library.      (line 1295)
* __ctalkIsClassMethod () function:      Ctalk library.      (line 1303)
* __ctalkIsClassVariableOf () function:  Ctalk library.      (line 1291)
* __ctalkIsDir () function:              Ctalk library.      (line 1299)
* __ctalkIsInstanceMethod () function:   Ctalk library.      (line 1302)
* __ctalkIsInstanceVariableOf () function: Ctalk library.    (line 1307)
* __ctalkIsObject () function:           Ctalk library.      (line 1311)
* __ctalkIsSubClassOf () function:       Ctalk library.      (line 1314)
* __ctalkLastMatchLength () function:    Ctalk library.      (line 1318)
* __ctalkLibcFnWithMethodVarArgs () function: Ctalk library. (line 1322)
* __ctalkLocalTime function:             Ctalk library.      (line  258)
* __ctalkLogMessage () function:         Ctalk library.      (line 1336)
* __ctalkLongDoubleToASCII function:     Ctalk library.      (line  524)
* __ctalkLongLongToDecimalASCII function: Ctalk library.     (line  407)
* __ctalkLongLongToHexASCII function:    Ctalk library.      (line  407)
* __ctalkLongToDecimalASCII function:    Ctalk library.      (line  407)
* __ctalkLongToHexASCII function:        Ctalk library.      (line  407)
* __ctalkMapGLXWindow () function:       Ctalk library.      (line 1359)
* __ctalkMapX11Window () function:       Ctalk library.      (line 1366)
* __ctalkMatchAt () function:            Ctalk library.      (line 1340)
* __ctalkMatchIndexAt () function:       Ctalk library.      (line 1340)
* __ctalkMatchPrintToks () function:     Ctalk library.      (line 1354)
* __ctalkMatchText () function:          Ctalk library.      (line 1349)
* __ctalkMethodObjectMessage () function: Ctalk library.     (line 1371)
* __ctalkMethodObjectMessage2Args () function: Ctalk library.
                                                             (line 1380)
* __ctalkMethodPoolMax () function:      Ctalk library.      (line 1393)
* __ctalkMethodReturnClass () function:  Ctalk library.      (line 1412)
* __ctalkNArgs () function:              Ctalk library.      (line 1416)
* __ctalkNewFTFace () function:          Ctalk library.      (line 1424)
* __ctalkNewSignalEventInternal () function: Ctalk library.  (line 1429)
* __ctalkNMatches () function:           Ctalk library.      (line 1420)
* __ctalkNonLocalArgBlkReturn () function: Ctalk library.    (line 1434)
* __ctalkObjectAttrAnd () function:      Ctalk library.      (line 1692)
* __ctalkObjectAttrOr () function:       Ctalk library.      (line 1692)
* __ctalkObjectPrintOn () function:      Ctalk library.      (line 1931)
* __ctalkObjValPtr () function:          Ctalk library.      (line 1439)
* __ctalkOpenX11InputClient () function: Ctalk library.      (line 1937)
* __ctalkPaneResource () function:       Ctalk library.      (line 1442)
* __ctalkPeekExceptionTrace () function: Ctalk library.      (line 1447)
* __ctalkPeekRunTimeException () function: Ctalk library.    (line 1451)
* __ctalkPendingException () function:   Ctalk library.      (line 1454)
* __ctalkPrintExceptionTrace function:   Ctalk library.      (line 1458)
* __ctalkPrintObject () function:        Ctalk library.      (line 1462)
* __ctalkPrintObject function:           C statements.       (line  266)
* __ctalkPrintObjectByName () function:  Ctalk library.      (line 1466)
* __ctalkProcessWait () function:        Ctalk library.      (line 1469)
* __ctalkRaiseX11Window () function:     Ctalk library.      (line 1489)
* __ctalkReceiverReceiverBecome () function: Ctalk library.  (line 1492)
* __ctalkReferenceObject () function:    Ctalk library.      (line 1496)
* __ctalkRegisterArgBlkReturn () function: Ctalk library.    (line 1501)
* __ctalkRegisterBoolReturn () function: Boolean.            (line   14)
* __ctalkRegisterBoolReturn () function <1>: Ctalk library.  (line 1564)
* __ctalkRegisterCharPtrReturn () function: Ctalk library.   (line 1570)
* __ctalkRegisterCharReturn () function: Ctalk library.      (line 1574)
* __ctalkRegisterCTypedef () function:   Ctalk library.      (line 1577)
* __ctalkRegisterExtraObject () function: Ctalk library.     (line 1582)
* __ctalkRegisterExtraObject function:   Return values.      (line   72)
* __ctalkRegisterFloatReturn () function: Ctalk library.     (line 1590)
* __ctalkRegisterIntReturn () function:  Ctalk library.      (line 1596)
* __ctalkRegisterLongLongIntReturn () function: Ctalk library.
                                                             (line 1600)
* __ctalkRegisterUserFunctionName () function: Ctalk library.
                                                             (line 1604)
* __ctalkRegisterUserObject () function: Ctalk library.      (line 1610)
* __ctalkRegisterUserObject function:    Return values.      (line   51)
* __ctalkReplaceVarEntry () function:    Ctalk library.      (line 1626)
* __ctalkRtGetMethod () function:        Ctalk library.      (line 1631)
* __ctalkRtGetMethodFn () function:      Ctalk library.      (line 1648)
* __ctalkRtMethodClass () function:      Ctalk library.      (line 1652)
* __ctalkRtMethodClassObject () function: Ctalk library.     (line 1656)
* __ctalkRtReceiver () function:         Ctalk library.      (line 1635)
* __ctalkRtReceiverObject () function:   Ctalk library.      (line 1640)
* __ctalkRtSaveSourceFileName () function: Ctalk library.    (line 1644)
* __ctalkSaveCVARArrayResource () function: Ctalk library.   (line  680)
* __ctalkSaveCVARResource () function:   Ctalk library.      (line  684)
* __ctalkSaveOBJECTMemberResource () function: Ctalk library.
                                                             (line  687)
* __ctalkSearchBuffer () function:       Ctalk library.      (line 1659)
* __ctalkSelectXFontFace () function:    Ctalk library.      (line 1663)
* __ctalkSelfPrintOn () function:        Ctalk library.      (line 1683)
* __ctalkSetExceptionTrace () function:  Ctalk library.      (line 1688)
* __ctalkSetMethodPoolMax () function:   Ctalk library.      (line 1393)
* __ctalkSetObjectAttr () function:      Ctalk library.      (line 1692)
* __ctalkSetObjectAttr () function <1>:  Attributes.         (line   11)
* __ctalkSetObjectName () function:      Ctalk library.      (line 1741)
* __ctalkSetObjectScope () function:     Ctalk library.      (line 1744)
* __ctalkSetObjectScope function:        Scoping.            (line   54)
* __ctalkSetObjectValue () function:     Ctalk library.      (line 1759)
* __ctalkSetObjectValueAddr () function: Ctalk library.      (line 1764)
* __ctalkSetObjectValueBuf () function:  Ctalk library.      (line 1771)
* __ctalkSetObjectValueVar () function:  Ctalk library.      (line 1777)
* __ctalkSetObjPtr () function:          Ctalk library.      (line 1781)
* __ctalkSetRS () function:              Ctalk library.      (line 1784)
* __ctalkSignalHandlerBasic () function: Ctalk library.      (line 1789)
* __ctalkSleep () function:              Ctalk library.      (line  690)
* __ctalkSort () function:               Ctalk library.      (line  695)
* __ctalkSortByName () function:         Ctalk library.      (line  695)
* __ctalkSpawn () function:              Ctalk library.      (line 1809)
* __ctalkSplitText () function:          Ctalk library.      (line 1848)
* __ctalkStringifyName () function:      Ctalk library.      (line 1843)
* __ctalkStrToPtr () function:           Ctalk library.      (line  713)
* __ctalkStrToPtr () function <1>:       Ctalk library.      (line 1855)
* __ctalkStrToPtr function:              Ctalk library.      (line  718)
* __ctalkSymbolReferenceByName () function: Ctalk library.   (line 1871)
* __ctalkSysErrExceptionInternal () function: Ctalk library. (line 1859)
* __ctalkSystemSignalName () function:   Ctalk library.      (line 1866)
* __ctalkSystemSignalNumber () C function: SignalHandler.    (line   42)
* __ctalkSystemSignalNumber () function: Ctalk library.      (line 1879)
* __ctalkTemplateCallerCVARCleanup () function: Ctalk library.
                                                             (line 1885)
* __ctalkTerminalHeight () function:     Ctalk library.      (line 1896)
* __ctalkTerminalWidth () function:      Ctalk library.      (line 1897)
* __ctalkToCArrayElement () function:    Ctalk library.      (line 1902)
* __ctalkToCArrayElement function:       Translating.        (line   20)
* __ctalkToCCharPtr () function:         Ctalk library.      (line 1907)
* __ctalkToCCharPtr function:            Translating.        (line   25)
* __ctalkToCDouble () function:          Ctalk library.      (line 1911)
* __ctalkToCIntArrayElement () function: Ctalk library.      (line 1914)
* __ctalkToCIntArrayElement function:    Translating.        (line   29)
* __ctalkToCInteger () function:         Ctalk library.      (line 1918)
* __ctalkToCInteger function:            Translating.        (line   32)
* __ctalkToCLongInteger function:        Translating.        (line   36)
* __ctalkTrapException () function:      Ctalk library.      (line 1923)
* __ctalkTrapExceptionInternal () function: Ctalk library.   (line 1927)
* __ctalkUNIXSocketOpenReader () function: Ctalk library.    (line 1953)
* __ctalkUNIXSocketOpenWriter () function: Ctalk library.    (line 1961)
* __ctalkUNIXSocketRead () function:     Ctalk library.      (line 1969)
* __ctalkUNIXSocketShutdown () function: Ctalk library.      (line 1975)
* __ctalkUNIXSocketWrite () function:    Ctalk library.      (line 1984)
* __ctalkUTCTime () function:            Ctalk library.      (line 1990)
* __ctalkWarning () function:            Ctalk library.      (line 1998)
* __ctalkWrapText () function:           Ctalk library.      (line 2003)
* __ctalkX11ClearRectangleBasic () function: Ctalk library.  (line 2024)
* __ctalkX11CloseClient () function:     Ctalk library.      (line 2012)
* __ctalkX11CloseParentPane () function: Ctalk library.      (line 2016)
* __ctalkX11Colormap () function:        Ctalk library.      (line 2028)
* __ctalkX11CopyPixmapBasic () function: Ctalk library.      (line 2034)
* __ctalkX11CreateGC () function:        Ctalk library.      (line 2045)
* __ctalkX11CreatePaneBuffer () function: Ctalk library.     (line 2060)
* __ctalkX11CreatePixmap () function:    Ctalk library.      (line 2057)
* __ctalkX11DeletePixmap () function:    Ctalk library.      (line 2067)
* __ctalkX11Display () function:         Ctalk library.      (line 2070)
* __ctalkX11DisplayHeight () function:   Ctalk library.      (line 2074)
* __ctalkX11DisplayWidth () function:    Ctalk library.      (line 2077)
* __ctalkX11FontCursor () function:      Ctalk library.      (line 2080)
* __ctalkX11FreeGC () function:          Ctalk library.      (line 2085)
* __ctalkX11FreePaneBuffer () function:  Ctalk library.      (line 2091)
* __ctalkX11FreeSizeHints () function:   Ctalk library.      (line 2097)
* __ctalkX11GetSizeHints () function:    Ctalk library.      (line 2100)
* __ctalkX11InputClient () function:     Ctalk library.      (line 2105)
* __ctalkX11MakeEvent () function:       Ctalk library.      (line 2110)
* __ctalkX11MoveWindow () function:      Ctalk library.      (line 2116)
* __ctalkX11OpenInputClient () function: Ctalk library.      (line 2119)
* __ctalkX11PaneClearRectangle () function: Ctalk library.   (line 2190)
* __ctalkX11PaneClearWindow () function: Ctalk library.      (line 2220)
* __ctalkX11PaneDrawCircleBasic () function: Ctalk library.  (line 2135)
* __ctalkX11PaneDrawLine () function:    Ctalk library.      (line 2196)
* __ctalkX11PaneDrawLineBasic () function: Ctalk library.    (line 1034)
* __ctalkX11PaneDrawLineBasic () function <1>: Ctalk library.
                                                             (line 2203)
* __ctalkX11PaneDrawPoint () function:   Ctalk library.      (line 2208)
* __ctalkX11PaneDrawPointBasic () function: Ctalk library.   (line 2215)
* __ctalkX11PaneDrawRectangle () function: Ctalk library.    (line 2225)
* __ctalkX11PaneDrawRectangleBasic () function: Ctalk library.
                                                             (line 2143)
* __ctalkX11PanePutStr () function:      Ctalk library.      (line 2153)
* __ctalkX11PanePutStrBasic () function: Ctalk library.      (line 2231)
* __ctalkX11PaneRefresh () function:     Ctalk library.      (line 2237)
* __ctalkX11ParseGeometry () function:   Ctalk library.      (line 2126)
* __ctalkX11QueryFont () function:       Ctalk library.      (line 2242)
* __ctalkX11ResizePaneBuffer () function: Ctalk library.     (line 2175)
* __ctalkX11ResizePixmap () function:    Ctalk library.      (line 2180)
* __ctalkX11ResizeWindow () function:    Ctalk library.      (line 2185)
* __ctalkX11SetBackground () function:   Ctalk library.      (line 2247)
* __ctalkX11SetBackgroundBasic () function: Ctalk library.   (line 2253)
* __ctalkX11SetForegroundBasic () function: Ctalk library.   (line 2257)
* __ctalkX11SetResource () function:     Ctalk library.      (line 2261)
* __ctalkX11SetSizeHints () function:    Ctalk library.      (line 2165)
* __ctalkX11SetWMNameProp () function:   Ctalk library.      (line 2265)
* __ctalkX11SubWindowGeometry () function: Ctalk library.    (line 1073)
* __ctalkX11TextFromData () function:    Ctalk library.      (line 1106)
* __ctalkX11TextWidth () function:       Ctalk library.      (line 1109)
* __ctalkX11UseCursor () function:       Ctalk library.      (line 2270)
* __ctalkX11UseFontBasic () function:    Ctalk library.      (line 1663)
* __ctalkX11UseFontBasic () function <1>: Ctalk library.     (line 2278)
* __ctalkX11UseXRender () function:      Ctalk library.      (line 2274)
* __ctalkX11UsingXRender () function:    Ctalk library.      (line 2285)
* __ctalkX11WxHGeometry () function:     Ctalk library.      (line 1115)
* __ctalkX11XPMFromData () function:     Ctalk library.      (line 2293)
* __ctalkX11XPMInfo () function:         Ctalk library.      (line 2298)
* __ctalkXftAlpha () function:           Ctalk library.      (line 2368)
* __ctalkXftAscent () function:          Ctalk library.      (line 2344)
* __ctalkXftBlue () function:            Ctalk library.      (line 2368)
* __ctalkXftDescent () function:         Ctalk library.      (line 2357)
* __ctalkXftDescStr () function:         Ctalk library.      (line 2348)
* __ctalkXftFgAlpha () function:         Ctalk library.      (line 2361)
* __ctalkXftFgBlue () function:          Ctalk library.      (line 2361)
* __ctalkXftFgGreen () function:         Ctalk library.      (line 2361)
* __ctalkXftFgRed () function:           Ctalk library.      (line 2361)
* __ctalkXftFontPathFirst () function:   Ctalk library.      (line 2375)
* __ctalkXftFontPathNext () function:    Ctalk library.      (line 2380)
* __ctalkXftGetStringDimensions () function: Ctalk library.  (line 2384)
* __ctalkXftGreen () function:           Ctalk library.      (line 2368)
* __ctalkXftHeight () function:          Ctalk library.      (line 2393)
* __ctalkXftInitialized () function:     Ctalk library.      (line 2410)
* __ctalkXftInitLib () function:         Ctalk library.      (line 2397)
* __ctalkXftIsMonospace () function:     Ctalk library.      (line 2414)
* __ctalkXftListFontsEnd () function:    Ctalk library.      (line 2430)
* __ctalkXftListFontsFirst () function:  Ctalk library.      (line 2418)
* __ctalkXftListFontsNext () function:   Ctalk library.      (line 2426)
* __ctalkXftMajorVersion () function:    Ctalk library.      (line 2433)
* __ctalkXftMaxAdvance () function:      Ctalk library.      (line 2439)
* __ctalkXftMinorVersion () function:    Ctalk library.      (line 2443)
* __ctalkXftQualifyFontName () function: Ctalk library.      (line 2450)
* __ctalkXftRed () function:             Ctalk library.      (line 2368)
* __ctalkXftRequestedDPI () function:    Ctalk library.      (line 2453)
* __ctalkXftRequestedFamily () function: Ctalk library.      (line 2453)
* __ctalkXftRequestedPointSize () function: Ctalk library.   (line 2453)
* __ctalkXftRequestedSlant () function:  Ctalk library.      (line 2453)
* __ctalkXftRequestedWeigth () function: Ctalk library.      (line 2453)
* __ctalkXftRevision () function:        Ctalk library.      (line 2462)
* __ctalkXftSelectedFamily () function:  Ctalk library.      (line 2493)
* __ctalkXftSelectedFontDescriptor () function: Ctalk library.
                                                             (line 2506)
* __ctalkXftSelectedFontDescriptor () function <1>: Ctalk library.
                                                             (line 2548)
* __ctalkXftSelectedFontPath () function: Ctalk library.     (line 2510)
* __ctalkXftSelectedPointSize () function: Ctalk library.    (line 2497)
* __ctalkXftSelectedSlant () function:   Ctalk library.      (line 2500)
* __ctalkXftSelectedWeight () function:  Ctalk library.      (line 2503)
* __ctalkXftSelectFont () function:      Ctalk library.      (line 2514)
* __ctalkXftSelectFontFromFontConfig () function: Ctalk library.
                                                             (line 2468)
* __ctalkXftSelectFontFromXLFD () function: Ctalk library.   (line 2522)
* __ctalkXftSetForeground () function:   Ctalk library.      (line 2540)
* __ctalkXftSetForgroundFromNamedColor () function: Ctalk library.
                                                             (line 2544)
* __ctalkXftShowFontLoad () function:    Ctalk library.      (line 2473)
* __ctalkXftVerbosity () function:       Ctalk library.      (line 2551)
* __ctalkXftVersion () function:         Ctalk library.      (line 2564)
* __ctalkXPMToGLTexture () function:     Ctalk library.      (line 2302)
* __ctalkXPMToGLXTexture () function:    Ctalk library.      (line 2302)
* __ctalk_arg () function:               Ctalk library.      (line 2569)
* __ctalk_arg_cleanup () function:       Ctalk library.      (line 2572)
* __ctalk_arg_internal () function:      Ctalk library.      (line 2578)
* __ctalk_arg_pop () function:           Ctalk library.      (line 2593)
* __ctalk_arg_pop_deref () function:     Ctalk library.      (line 2593)
* __ctalk_arg_value_internal () function: Ctalk library.     (line 2583)
* __ctalk_class_initialize () function:  Ctalk library.      (line 2599)
* __ctalk_define_class () function:      Ctalk library.      (line 2603)
* __ctalk_dictionary_add () function:    Ctalk library.      (line 2607)
* __ctalk_exitFn () function:            Ctalk library.      (line 2611)
* __ctalk_get_object () function:        Ctalk library.      (line 2625)
* __ctalk_get_object_return () function: Ctalk library.      (line 2625)
* __ctalk_init () function:              Ctalk library.      (line 2636)
* __ctalk_initFn () function:            Ctalk library.      (line 2617)
* __ctalk_initLocalObjects () function:  Ctalk library.      (line 2621)
* __ctalk_method () function:            Ctalk library.      (line 2640)
* __ctalk_new_object () function:        Ctalk library.      (line 2647)
* __ctalk_primitive_method () function:  Ctalk library.      (line 2650)
* __ctalk_process_exitFn () function:    Ctalk library.      (line 2656)
* __ctalk_receiver_pop () function:      Ctalk library.      (line 2661)
* __ctalk_receiver_push () function:     Ctalk library.      (line 2665)
* __ctalk_register_c_method_arg () function: Ctalk library.  (line 2676)
* __ctalk_self_internal () function:     Ctalk library.      (line 2689)
* __ctalk_self_internal_value () function: Ctalk library.    (line 2692)
* __ctalk_set_global () function:        Ctalk library.      (line 2698)
* __ctalk_set_local () function:         Ctalk library.      (line 2703)
* __ctalk_set_local_by_name () function: Ctalk library.      (line 2703)
* __ctalk_to_c_char () function:         Ctalk library.      (line 2712)
* __ctalk_to_c_char_ptr () function:     Ctalk library.      (line 2716)
* __ctalk_to_c_char_ptr function:        Translating.        (line   40)
* __ctalk_to_c_double () function:       Ctalk library.      (line 2721)
* __ctalk_to_c_double function:          Translating.        (line   45)
* __ctalk_to_c_int () function:          Ctalk library.      (line 2726)
* __ctalk_to_c_int function:             Translating.        (line   48)
* __ctalk_to_c_longlong () function:     Ctalk library.      (line 2733)
* __ctalk_to_c_longlong function:        Translating.        (line   51)
* __ctalk_to_c_ptr () function:          Ctalk library.      (line 2739)
* __ctalk_to_c_ptr_u () function:        Ctalk library.      (line 2743)
* __c_arg__ attribute:                   Method functions.   (line   18)
* __c_arg__ attribute <1>:               Method keywords.    (line    6)
* __edittext_delete_char () function:    Ctalk library.      (line 2750)
* __edittext_delete_selection () function: Ctalk library.    (line 2750)
* __edittext_get_clipboard () function:  Ctalk library.      (line 2750)
* __edittext_index_from_pointer () function: Ctalk library.  (line 2750)
* __edittext_index_from_pointer () function <1>: Ctalk library.
                                                             (line 2750)
* __edittext_insert_at_point () function: Ctalk library.     (line 2750)
* __edittext_insert_str_at_click () function: Ctalk library. (line 2750)
* __edittext_insert_str_at_point () function: Ctalk library. (line 2750)
* __edittext_line_end () function:       Ctalk library.      (line 2750)
* __edittext_line_start () function:     Ctalk library.      (line 2750)
* __edittext_next_char () function:      Ctalk library.      (line 2750)
* __edittext_next_line () function:      Ctalk library.      (line 2750)
* __edittext_next_page () function:      Ctalk library.      (line 2750)
* __edittext_point_to_click () function: Ctalk library.      (line 2750)
* __edittext_prev_char () function:      Ctalk library.      (line 2750)
* __edittext_prev_line () function:      Ctalk library.      (line 2750)
* __edittext_prev_page () function:      Ctalk library.      (line 2750)
* __edittext_recenter () function:       Ctalk library.      (line 2750)
* __edittext_rol_col_from_mark () function: Ctalk library.   (line 2750)
* __edittext_scroll_down () function:    Ctalk library.      (line 2750)
* __edittext_scroll_up () function:      Ctalk library.      (line 2750)
* __edittext_set_clipboard_owner () function: Ctalk library. (line 2750)
* __edittext_set_selection_owner () function: Ctalk library. (line 2750)
* __edittext_text_end () function:       Ctalk library.      (line 2750)
* __edittext_text_start () function:     Ctalk library.      (line 2750)
* __edittext_xk_keysym () function:      Ctalk library.      (line 2750)
* __entrytext_get_primary_selection () function: Ctalk library.
                                                             (line 2781)
* __entrytext_send_selection () function: Ctalk library.     (line 2781)
* __entrytext_set_selection_owner () function: Ctalk library.
                                                             (line 2781)
* __entrytext_update_selection () function: Ctalk library.   (line 2781)
* __handleAppExit instance method (Application class): Application.
                                                             (line   39)
* __handleSigAbrt instance method (Application class): Application.
                                                             (line   52)
* __inspector_trace () function:         Ctalk library.      (line 2795)
* __inspect_get_global () function:      Ctalk library.      (line 2795)
* __inspect_get_receiver () function:    Ctalk library.      (line 2795)
* __inspect_globals () function:         Ctalk library.      (line 2795)
* __inspect_locals () function:          Ctalk library.      (line 2795)
* __inspect_long_help () function:       Ctalk library.      (line 2795)
* __inspect_short_help () function:      Ctalk library.      (line 2795)
* __LIST_HEAD macro:                     C Macros.           (line  111)
* __objRefCntDec function:               Ctalk library.      (line 2862)
* __objRefCntDec function.:              Ctalk library.      (line  460)
* __objRefCntInc function:               Ctalk library.      (line 2855)
* __objRefCntSet function:               Ctalk library.      (line 2870)
* __objRefCntZero function:              Ctalk library.      (line 2884)
* __objRefCntZero function <1>:          free.               (line    9)
* __objRefCntZero function.:             Ctalk library.      (line  460)
* __receiver_trace () function:          Ctalk library.      (line 2795)
* __refObj () function:                  Ctalk library.      (line 2901)
* __rt_init_library_paths () function:   Ctalk library.      (line 2812)
* __warning_trace () function:           Ctalk library.      (line 2819)
* __xalloc () function:                  Ctalk library.      (line 2823)
* __xfree () function:                   Ctalk library.      (line 2828)
* __xfree function:                      Ctalk library.      (line  238)
* __xrealloc () function:                Ctalk library.      (line 2846)
* | instance method (Character class):   Character.          (line  225)
* | instance method (Integer class):     Integer.            (line  126)
* | instance method (LongInteger class): LongInteger.        (line  110)
* | metacharacter:                       String.             (line  651)
* |= instance method (Integer class):    Integer.            (line  129)
* |= instance method (LongInteger class): LongInteger.       (line  113)
* || instance method (Boolean class):    Boolean.            (line   50)
* || instance method (Character class):  Character.          (line  228)
* || instance method (Float class):      Float.              (line   75)
* || instance method (Integer class):    Integer.            (line  133)
* || instance method (LongInteger class): LongInteger.       (line  117)
* ~ instance method (Character class):   Character.          (line  154)
* ~ instance method (Integer class):     Integer.            (line  143)
* ~ instance method (LongInteger class): LongInteger.        (line  121)
* ~ operator:                            Prefixes.           (line    6)
* abs(3) C function:                     CFunction.          (line   19)
* abs(3) C function <1>:                 abs.                (line    6)
* acceptSock instance method (TCPIPNetworkStreamReader class): TCPIPNetworkStreamReader.
                                                             (line   22)
* acceptSock instance method (TCPIPV6NetworkStreamReader class): TCPIPV6NetworkStreamReader.
                                                             (line   17)
* acos(3) C function:                    CFunction.          (line   22)
* acos(3) C function <1>:                acos.               (line    6)
* acosh(3) C function:                   CFunction.          (line   25)
* acosh(3) C function <1>:               acosh-asinh-atanh.  (line    6)
* add instance method (X11ListPane class): X11ListPane.      (line  295)
* addBuffer instance method (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   78)
* addChild instance method (TreeNode class): TreeNode.       (line   38)
* addInstanceVariable instance method (Object class): Object.
                                                             (line  195)
* addressOf instance method (Object class): Object.          (line  198)
* addrInfo instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line   78)
* addrInfo instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line   74)
* addText instance method (X11TextPane class): X11TextPane.  (line  147)
* alpha instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  336)
* alpha instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  160)
* alpha instance variable (Pen class):   Pen.                (line   17)
* animationHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  166)
* ANSIButtonPane class:                  ANSIButtonPane.     (line    6)
* ANSIButtonPane class <1>:              ANSIMessageBoxPane. (line    6)
* ANSILabelPane class:                   ANSILabelPane.      (line    6)
* ANSIListBoxPane class:                 ANSIListBoxPane.    (line    6)
* ANSIListBoxPane class <1>:             ANSIScrollingListBoxPane.
                                                             (line    6)
* ANSIProgressBarPane class:             ANSIProgressBarPane.
                                                             (line    6)
* ANSIScrollingListBoxPane class:        ANSIScrollingListBoxPane.
                                                             (line    6)
* ANSIScrollPane class:                  ANSIScrollPane.     (line    6)
* ANSITerminalPane class:                ANSITerminalPane.   (line    6)
* ANSITerminalStream class:              ANSITerminalStream. (line    6)
* ANSITextBoxPane class:                 ANSITextBoxPane.    (line    6)
* ANSITextEntryPane class:               ANSITextEntryPane.  (line    6)
* ANSIWidgetPane class:                  ANSIWidgetPane.     (line    6)
* ANSIYesNoBoxPane class:                ANSIYesNoBoxPane.   (line    6)
* append instance method (AssociativeArray class): AssociativeArray.
                                                             (line   85)
* append instance method (List class):   List.               (line   45)
* append instance method (SortedList class): SortedList.     (line   42)
* appendLine instance method (ANSILabelPane class): ANSILabelPane.
                                                             (line   57)
* appendLine instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   70)
* appendLine instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  118)
* appendLine instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   59)
* Application class:                     Application.        (line    6)
* ARG macro:                             C Macros.           (line   16)
* ARG macro <1>:                         Templates.          (line  161)
* ARG() () function (macro):             Ctalk library.      (line 1890)
* argFrameTop instance variable (Method class): Method.      (line   80)
* Arguments, command line:               Application.        (line   19)
* Arguments, command line <1>:           Application.        (line  189)
* Array class:                           Array.              (line    6)
* Array class <1>:                       Cautions.           (line   25)
* arrow instance method (X11Cursor class): X11Cursor.        (line   38)
* arrowCursor instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  111)
* asAddrString instance method (Symbol class): Symbol.       (line   66)
* ascent instance variable (X11Font class): X11Font.         (line   21)
* ascent instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  142)
* asCharacter instance method (Magnitude class): Magnitude.  (line   26)
* asCharacter instance method (Magnitude class) <1>: String. (line  205)
* asctime(3) C function:                 CFunction.          (line   28)
* asctime(3) C function <1>:             asctime.            (line    6)
* asDecimalString instance method (Integer class): Integer.  (line  140)
* asExpandedPath instance method (String class): String.     (line  153)
* asFloat instance method (Magnitude class): Magnitude.      (line   29)
* asFloat instance method (Object class): Object.            (line  202)
* asHexString instance method (Integer class): Integer.      (line  140)
* asin(3) C function:                    CFunction.          (line   32)
* asin(3) C function <1>:                asin.               (line    6)
* asinh(3) C function:                   CFunction.          (line   35)
* asinh(3) C function <1>:               acosh-asinh-atanh.  (line    6)
* asInteger instance method (Float class): Float.            (line   72)
* asInteger instance method (Magnitude class): Magnitude.    (line   35)
* asInteger instance method (String class): String.          (line  157)
* asList instance method (String class): String.             (line  160)
* asLongInteger instance method (Magnitude class): Magnitude.
                                                             (line   38)
* AssociativeArray class:                AssociativeArray.   (line    6)
* asString instance method (Array class): Array.             (line   47)
* asString instance method (Array class) <1>: String.        (line   34)
* asString instance method (Integer class): Integer.         (line  140)
* asString instance method (List class): String.             (line   34)
* asString instance method (Object class): Object.           (line  205)
* asString instance method (Symbol class): Symbol.           (line   70)
* asString instance method (Vector class): Vector.           (line   58)
* asSymbol instance method (Object class): Object.           (line  208)
* at instance method (Array class):      Array.              (line   54)
* at instance method (AssociativeArray class): AssociativeArray.
                                                             (line   82)
* at instance method (Collection class): Collection.         (line   54)
* at instance method (String class):     String.             (line  164)
* at method (Array class):               Ctalk library.      (line  283)
* atanh(3) C function:                   acosh-asinh-atanh.  (line    6)
* atexit(3) C function:                  atexit.             (line    6)
* atof(3) C function:                    CFunction.          (line   38)
* atof(3) C function <1>:                atof.               (line    6)
* atoi(3) C function:                    CFunction.          (line   41)
* atoi(3) C function <1>:                atoi.               (line    6)
* atol(3) C function:                    CFunction.          (line   44)
* atol(3) C function <1>:                atol.               (line    6)
* atoll(3) C function:                   CFunction.          (line   47)
* atoll(3) C function <1>:               atoll.              (line    6)
* atPut instance method (Array class):   Array.              (line   57)
* atPut instance method (AssociativeArray class): AssociativeArray.
                                                             (line  105)
* atPut instance method (Collection class): Collection.      (line   57)
* atPut instance method (String class):  String.             (line  169)
* atPut method (AssociativeArray class): Ctalk library.      (line  283)
* attach method (Pane class):            Pane.               (line   54)
* attachTo instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  458)
* attachTo instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  181)
* attachTo instance method (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  202)
* attachTo instance method (X11ListPane class): X11ListPane. (line  305)
* attachTo instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  234)
* attachTo instance method (X11Pane class): X11Pane.         (line  197)
* attachTo instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  265)
* attachTo instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  182)
* attachTo instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  177)
* attachTo instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  265)
* attachTo instance method (X11TextPane class): X11TextPane. (line  152)
* attachTo instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  285)
* attributes instance variable (SignalHandler class): SignalHandler.
                                                             (line   51)
* Attributes, object:                    Attributes.         (line    6)
* autoconf:                              GNU tools.          (line    6)
* automake:                              GNU tools.          (line    6)
* background instance method (X11Bitmap class): X11Bitmap.   (line   54)
* background instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  225)
* background instance method (X11Pane class): X11Pane.       (line  201)
* background instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  188)
* background instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  184)
* background instance method (X11TextPane class): X11TextPane.
                                                             (line  159)
* Background method processes:           Object.             (line  512)
* background resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  126)
* backgroundColor instance variable (X11Bitmap class): X11Bitmap.
                                                             (line   13)
* backgroundColor instance variable (X11Pane class): X11Pane.
                                                             (line   31)
* backgroundColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  300)
* backgroundColor resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  145)
* backgroundColor resource (X11LabelPane class): X11LabelPane.
                                                             (line  147)
* backgroundColor resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  134)
* backgroundColor resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  164)
* backgroundMethodObjectMessage instance method (Object class): Object.
                                                             (line  213)
* backgroundMethodObjectMessage instance method (Object class) <1>: Ctalk library.
                                                             (line  114)
* baselineY instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  188)
* basicNew instance method (Object class): Object.           (line  244)
* basicNew instance method (Vector class): Vector.           (line   65)
* basicObject instance method (Symbol class): Symbol.        (line   76)
* become instance method (Object class): Object.             (line  286)
* bevel instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  115)
* bevel resource (X11CheckBoxPane class): X11CheckBoxPane.   (line  149)
* bevelEdges instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  410)
* bevelWidth instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  414)
* biosKey method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   42)
* bitComp instance method (Character class): Character.      (line  157)
* bitComp instance method (Integer class): Integer.          (line  119)
* bitComp instance method (LongInteger class): LongInteger.  (line  103)
* Bitmap class:                          Bitmap.             (line    5)
* blinkOnOff instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  112)
* blue instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  165)
* boldOnOff instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  117)
* Boolean class:                         Boolean.            (line    6)
* boolFalse class variable (Boolean class): Boolean.         (line   23)
* boolFalse class variable (Boolean class) <1>: Ctalk library.
                                                             (line 1564)
* boolTrue class variable (Boolean class): Boolean.          (line   23)
* boolTrue class variable (Boolean class) <1>: Ctalk library.
                                                             (line 1564)
* BOOLVAL macro () function:             Ctalk library.      (line 2914)
* border instance variable (ANSITerminalPane class): ANSITerminalPane.
                                                             (line   96)
* border instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  204)
* borderColor instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  418)
* borderColor instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  208)
* borderColor resource (X11ButtonPane class): X11ButtonPane. (line  321)
* borderColor resource (X11LabelPane class): X11LabelPane.   (line  153)
* borderColor resource (X11ListPane class): X11ListPane.     (line  175)
* borderColor resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  138)
* borderHighlightWidth instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  426)
* borderLess instance variable (ANSILabelPane class): ANSILabelPane.
                                                             (line   39)
* borderMargin instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  422)
* borderWidth instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  426)
* borderWidth instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  212)
* borderWidth instance variable (X11Pane class): X11Pane.    (line   46)
* borderWidth resource (X11ButtonPane class): X11ButtonPane. (line  325)
* borderWidth resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  153)
* borderWidth resource (X11LabelPane class): X11LabelPane.   (line  157)
* borderWidth resource (X11ListPane class): X11ListPane.     (line  179)
* borderWidth resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  141)
* bottom instance variable (Rectangle class): Rectangle.     (line   73)
* bufLength instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  117)
* button instance variable (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  189)
* button instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  121)
* button instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  192)
* button1 instance variable (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   49)
* button2 instance variable (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   50)
* buttonClick instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  354)
* buttonPressHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  170)
* buttonState instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  174)
* buttonState instance variable (X11ListPane class): X11ListPane.
                                                             (line  222)
* buttonText instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  372)
* buttonText instance variable (ANSIButtonPane class): ANSIButtonPane.
                                                             (line   14)
* buttonText resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  132)
* C expressions:                         C statements.       (line   44)
* C library compatibility:               C library functions.
                                                             (line   20)
* C library functions:                   C library functions.
                                                             (line    6)
* cAbs method (CFunction class):         CFunction.          (line   19)
* cAcos method (CFunction class):        CFunction.          (line   22)
* cAcosh method (CFunction class):       CFunction.          (line   25)
* calcThumb instance method (X11ListPane class): X11ListPane.
                                                             (line  314)
* calculateSpaceAppend instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  271)
* CalendarTime Class:                    CalendarTime.       (line    6)
* Callback methods:                      Method.             (line  124)
* calloc(3) C function:                  calloc.             (line    6)
* callStackTrace instance method (Object class): Object.     (line  289)
* callStackTrace instance method (String class): String.     (line  223)
* canFocus instance variable (X11LabelPane class): X11PaneDispatcher.
                                                             (line  169)
* cAPIFunctionSearch instance method (LibrarySearch class): LibrarySearch.
                                                             (line   24)
* cAscTime method (CFunction class):     CFunction.          (line   28)
* cAsin method (CFunction class):        CFunction.          (line   32)
* cAsinh method (CFunction class):       CFunction.          (line   35)
* cAtof method (CFunction class):        CFunction.          (line   38)
* cAtoi method (CFunction class):        CFunction.          (line   41)
* cAtol method (CFunction class):        CFunction.          (line   44)
* cAtoll method (CFunction class):       CFunction.          (line   47)
* cbrt(3) C function:                    CFunction.          (line   50)
* cbrt(3) C function <1>:                cbrt.               (line    6)
* cCbrt method (CFunction class):        CFunction.          (line   50)
* cCeil method (CFunction class):        CFunction.          (line   53)
* cChdir method (CFunction class):       CFunction.          (line   56)
* cClearErr method (CFunction class):    CFunction.          (line   60)
* cClock method (CFunction class):       CFunction.          (line   64)
* cCopySign method (CFunction class):    CFunction.          (line   67)
* cCos method (CFunction class):         CFunction.          (line   70)
* cCosh method (CFunction class):        CFunction.          (line   73)
* cCTime method (CFunction class):       CFunction.          (line   76)
* cDiffTime method (CFunction class):    CFunction.          (line   83)
* ceil(3) C function:                    CFunction.          (line   53)
* ceil(3) C function <1>:                ceil.               (line    6)
* center instance variable (Circle class): Circle.           (line  115)
* center instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  196)
* cErf method (CFunction class):         CFunction.          (line   86)
* cErfc method (CFunction class):        CFunction.          (line   89)
* cExp method (CFunction class):         CFunction.          (line   92)
* cExpm1 method (CFunction class):       CFunction.          (line   95)
* cFabs method (CFunction class):        CFunction.          (line   98)
* CFunction class:                       CFunction.          (line    6)
* CFunction class <1>:                   Templates.          (line   47)
* cGetchar method (CFunction class):     CFunction.          (line  105)
* cGetCwd method (CFunction class):      CFunction.          (line  108)
* cGetEnv method (CFunction class):      CFunction.          (line  111)
* cGetPID method (CFunction class):      CFunction.          (line  114)
* cGetStr method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   47)
* char * C data type:                    C statements.       (line  150)
* char ** C data type:                   C statements.       (line  135)
* char C data type:                      C statements.       (line  138)
* Character class:                       Character.          (line    6)
* Character classes:                     String.             (line  605)
* Character constants:                   Character.          (line   12)
* charCellAt instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  275)
* charIndex instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  280)
* charPos instance method (String class): String.            (line  226)
* charPosR instance method (String class): String.           (line  232)
* chars instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  204)
* charsRead instance variable (UNIXNetworkStreamReader class): UNIXNetworkStreamReader.
                                                             (line   95)
* charsWritten instance variable (UNIXNetworkStreamWriter class): UNIXNetworkStreamWriter.
                                                             (line   17)
* CHAR_CONSTANT_VALUE macro:             Character.          (line   48)
* chDir instance method (DirectoryStream class): DirectoryStream.
                                                             (line   87)
* chDir instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  387)
* chdir(3) C function:                   CFunction.          (line   56)
* chdir(3) C function <1>:               chdir.              (line    6)
* childRefresh instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  121)
* children instance variable (Pane class): Pane.             (line   16)
* children instance variable (TreeNode class): TreeNode.     (line   21)
* chomp instance method (String class):  String.             (line  238)
* Circle class:                          Circle.             (line    6)
* Class documentation:                   Documentation.      (line    6)
* Class initialization:                  Class initialization.
                                                             (line    6)
* class instance method (Object class):  Object.             (line  292)
* Class library search path:             Application.        (line   58)
* Class library search path <1>:         Translating.        (line   71)
* Class variable documentation:          Documentation.      (line    6)
* Class variable documentation <1>:      Documentation.      (line  166)
* classdoc utility program:              Documentation.      (line  159)
* Classes:                               Classes.            (line    6)
* classInit method (ReadFileStream class): ReadFileStream.   (line   68)
* CLASSLIBDIRS environment variable:     Application.        (line   58)
* CLASSLIBDIRS environment variable <1>: Translating.        (line   71)
* ClassLibraryTree class:                ClassLibraryTree.   (line    6)
* classMethod keyword:                   Method keywords.    (line   10)
* className instance method (Object class): Object.          (line  308)
* CLASSNAME macro:                       C Macros.           (line   22)
* classObject instance method (Object class): Object.        (line  311)
* classSearchPath instance method (Application class): Application.
                                                             (line   58)
* classVariable keyword:                 Method keywords.    (line   13)
* cleanup instance method (ANSILabelPane class): ANSILabelPane.
                                                             (line   67)
* cleanup instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   74)
* cleanup instance method (ANSIMessageBoxPane class): ANSIMessageBoxPane.
                                                             (line   37)
* cleanup instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  121)
* cleanup instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   78)
* cleanup instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   64)
* cleanup instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   60)
* clear instance method (Rectangle class): Rectangle.        (line   89)
* clear instance method (X11Bitmap class): X11Bitmap.        (line   60)
* clear instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  231)
* clear instance method (X11TextPane class): X11TextPane.    (line  163)
* clear method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  142)
* clear method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   51)
* clearClick instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  480)
* clearClick instance method (X11ButtonPane class) <1>: X11FileSelectDialog.
                                                             (line  376)
* clearerr(3) C function:                CFunction.          (line   60)
* clearFocus instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  327)
* clearLine instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   68)
* clearRectangle instance method (X11Bitmap class): X11Bitmap.
                                                             (line   62)
* clearRectangle instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  234)
* clearRectangle instance method (X11Pane class): X11Pane.   (line  210)
* clearSelection instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  189)
* clearSelection instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  284)
* clearWindow instance method (X11Pane class): X11Pane.      (line  214)
* clickColor resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  157)
* clicked instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  431)
* clicked instance variable (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  194)
* clientFD instance variable (X11TerminalStream class): X11TerminalStream.
                                                             (line  102)
* clipX instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  200)
* cLlrint method (CFunction class):      CFunction.          (line  121)
* cLlrintf method (CFunction class):     CFunction.          (line  122)
* cLlrintl method (CFunction class):     CFunction.          (line  123)
* clock(3) C function:                   CFunction.          (line   64)
* clock(3) C function <1>:               clock.              (line    6)
* closeSock instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line   87)
* closeSock instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line   83)
* closeSocket instance method (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   44)
* closeStream instance method (FileStream class): FileStream.
                                                             (line   46)
* closeStream method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  145)
* cLrint method (CFunction class):       CFunction.          (line  118)
* cLrintf method (CFunction class):      CFunction.          (line  119)
* cLrintl method (CFunction class):      CFunction.          (line  120)
* cmdLineArgc instance variable (Application class): Application.
                                                             (line   14)
* cmdLineArgs instance variable (Application class): Application.
                                                             (line   19)
* Collection class:                      Collection.         (line    6)
* colormap instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  197)
* colorName instance variable (Pen class): Pen.              (line   23)
* Command line arguments:                Application.        (line   19)
* Command line arguments <1>:            Application.        (line  189)
* Command line options:                  Invoking.           (line   41)
* cone instance method (GLUTApplication class): GLUTApplication.
                                                             (line  117)
* consoleReadLine instance method (String class): String.    (line  243)
* Constants, character:                  Character.          (line   12)
* container instance variable (X11Pane class): X11Pane.      (line   50)
* contains instance method (String class): String.           (line  277)
* contains instance method (Vector class): Vector.           (line   99)
* content instance variable (TreeNode class): TreeNode.      (line   23)
* copy (X11Bitmap SRCBITMAP, Integer SRCX, Integer SRCY, Integer SRCWIDTH, Integer SRCHEIGHT, Integer DESTX, Integer DESTY): X11Bitmap.
                                                             (line   65)
* copy instance method (Object class):   Object.             (line  318)
* copy instance method (Object class) <1>: Ctalk library.    (line 1626)
* copy instance method (X11Bitmap class): X11Bitmap.         (line   65)
* copy instance method (X11CanvasPane class): X11CanvasPane. (line  239)
* copy instance method (X11CanvasPane class) <1>: Ctalk library.
                                                             (line 2041)
* Copying:                               Copying.            (line    6)
* copysign(3) C function:                CFunction.          (line   67)
* copysign(3) C function <1>:            copysign.           (line    6)
* cos(3) C function:                     CFunction.          (line   70)
* cos(3) C function <1>:                 cos.                (line    6)
* cosh(3) C function:                    CFunction.          (line   73)
* cosh(3) C function <1>:                cosh.               (line    6)
* CPLUSPLUS_HEADER_X exception:          Exception.          (line  118)
* cPutStr method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   55)
* cRand method (CFunction class):        CFunction.          (line  151)
* create instance method (X11Bitmap class): X11Bitmap.       (line   70)
* createMainWindow instance method (GLUTApplication class): GLUTApplication.
                                                             (line  113)
* createSocketBasic instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line   93)
* createSocketBasic instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line   90)
* cStrcasecmp method (CFunction class):  CFunction.          (line  129)
* cStrcat method (CFunction class):      CFunction.          (line  128)
* cStrcat method (CFunction class) <1>:  strcat-strcpy.      (line    6)
* cStrcmp method (CFunction class):      CFunction.          (line  133)
* cStrcmp method (CFunction class) <1>:  strcat-strcpy.      (line    6)
* cStrcmp method (CFunction class) <2>:  strcat-strcpy.      (line    6)
* cStrcpy method (CFunction class):      strcat-strcpy.      (line    6)
* cStrlen method (CFunction class):      CFunction.          (line  136)
* cStrncasecmp method (CFunction class): CFunction.          (line  142)
* cStrncasecmp method (CFunction class) <1>: strncat-strncpy.
                                                             (line    6)
* cStrncat method (CFunction class):     CFunction.          (line  139)
* cStrncat method (CFunction class) <1>: strncat-strncpy.    (line    6)
* cStrncmp method (CFunction class):     CFunction.          (line  145)
* cStrncmp method (CFunction class) <1>: strncat-strncpy.    (line    6)
* cStrncpy method (CFunction class):     CFunction.          (line  148)
* cStrncpy method (CFunction class) <1>: strncat-strncpy.    (line    6)
* ctalk command:                         Invoking.           (line   14)
* Ctalk language features:               C.                  (line    6)
* ctalkdefs.h include file:              C Macros.           (line    6)
* CTALK_DIRECTORY_MODE macro:            DirectoryStream.    (line   74)
* ctcc command:                          Invoking.           (line   28)
* ctdb command:                          Invoking.           (line   32)
* ctdb command <1>:                      C statements.       (line  277)
* ctedit.ca demonstration program:       X11TextEditorPane.  (line   86)
* cTime instance method (CTime class):   CTime.              (line   26)
* cTime instance method (CTime class) <1>: ctime.            (line   14)
* ctime(3) C function:                   CFunction.          (line   76)
* ctime(3) C function <1>:               ctime.              (line    6)
* cTimeString instance method (CalendarTime class): CalendarTime.
                                                             (line   96)
* ctpp preprocessor:                     Invoking.           (line   11)
* ctpp preprocessor <1>:                 Preprocessor.       (line    6)
* cube instance method (GLUTApplication class): GLUTApplication.
                                                             (line  122)
* currentDescParamStr instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  170)
* cursor instance variable (Pane class): Pane.               (line   19)
* cursor instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  210)
* cursorAdvanceHint resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  145)
* cursorPos instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  125)
* cursorPos instance method (X11TextPane class): X11TextPane.
                                                             (line  156)
* cursorPos method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  149)
* cursorX instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  215)
* cusorPosY method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   58)
* Cutting text:                          X11TextEditorPane.  (line   51)
* darkShadowColor resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  171)
* dayName instance method (CalendarTime class): CalendarTime.
                                                             (line  109)
* Debugging:                             C statements.       (line  207)
* decReferenceCount instance method (Object class): Object.  (line  324)
* defaultCursor instance method (X11Pane class): X11Pane.    (line  220)
* defaultFormat instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  193)
* defaultHandler instance method (SignalHandler class): SignalHandler.
                                                             (line   69)
* DEFAULT_TCPIP_PORT:                    TCPIPV6NetworkStreamWriter.
                                                             (line   16)
* defineAnimationFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  126)
* defineButtonBoxFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  127)
* definedClassMethod instance method (Method class): Method. (line  111)
* definedClassMethod instance method (Object class): Method. (line  101)
* defineDialsFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  128)
* definedInstanceMethod instance method (Method class): Method.
                                                             (line  113)
* definedInstanceMethod instance method (Object class): Method.
                                                             (line  101)
* defineDisplayFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  129)
* defineEntryFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  130)
* defineIdleFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  131)
* defineKeyboardFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  132)
* defineMenuStateFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  133)
* defineMenuStatusFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  134)
* defineMotionFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  135)
* defineMouseFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  136)
* defineOverlayDisplayFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  137)
* definePassiveMotionFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  138)
* defineRegion instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  341)
* defineReshapeFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  161)
* defineSpaceballMotionFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  139)
* defineSpaceballRotateFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  140)
* defineSpecialFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  141)
* defineTabletButtonFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  142)
* defineTabletMotionFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  143)
* defineTimerFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  145)
* defineVisiblityFn instance method (GLUTApplication class): GLUTApplication.
                                                             (line  144)
* delete instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  129)
* delete instance method (Collection class): Collection.     (line   60)
* delete instance method (Object class): Object.             (line  327)
* delete instance method (X11Bitmap class): X11Bitmap.       (line   73)
* deleteAndClose instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  343)
* deleteAndClose instance method (X11Pane class): X11Pane.   (line  224)
* deleteAt instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  288)
* deleteFile instance method (FileStream class): FileStream. (line   55)
* deleteForward instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  294)
* deleteLastException instance method (Exception class): Exception.
                                                             (line  153)
* deletePaneBuffer method (Pane class):  Pane.               (line   60)
* depth instance variable (X11Bitmap class): X11Bitmap.      (line   19)
* depth instance variable (X11Pane class): X11Pane.          (line   55)
* deref instance method (Symbol class):  Symbol.             (line   96)
* deref instance method (Symbol class) <1>: Prefixes.        (line   44)
* descent instance variable (X11Font class): X11Font.        (line   21)
* descent instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  145)
* detach instance method (Key class):    Key.                (line  150)
* Dialog icon:                           X11Bitmap.          (line  156)
* Dialog icon <1>:                       Ctalk library.      (line 1149)
* difftime(3) C function:                CFunction.          (line   83)
* difftime(3) C function <1>:            difftime.           (line    6)
* dimension instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   82)
* dimension instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   81)
* dimension instance method (Rectangle class): X11ScrollBarPane.
                                                             (line   15)
* dimensions instance method (Rectangle class): Rectangle.   (line  105)
* directCopy instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  398)
* Directory mode:                        DirectoryStream.    (line   71)
* directoryList instance method (DirectoryStream class): DirectoryStream.
                                                             (line   90)
* DirectoryStream class:                 DirectoryStream.    (line    6)
* dirPattern instance variable (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  328)
* disableExceptionTrace instance method (Object class): Object.
                                                             (line  334)
* dismissButton instance variable (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   33)
* display instance method (ANSILabelPane class): ANSILabelPane.
                                                             (line   70)
* display instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   85)
* display instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   85)
* DisplayFont class:                     DisplayFont.        (line    5)
* displayHeight instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  347)
* displayHeight instance variable (X11Pane class): X11Pane.  (line  227)
* displayPtr instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  201)
* displayPtr instance variable (X11Bitmap class): X11Bitmap. (line   22)
* displayPtr instance variable (X11Pane class): X11Pane.     (line   61)
* displayText instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  199)
* displayText instance method (X11TextPane class): X11TextPane.
                                                             (line  166)
* displayWidth instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  347)
* displayWidth instance variable (X11Pane class): X11Pane.   (line  230)
* do statements:                         Control structures. (line    6)
* docDir instance method (Object class): Object.             (line  337)
* Documentation, methods and classes:    Documentation.      (line    6)
* Documentation, methods, classes and variables: Documentation.
                                                             (line    6)
* dodecahedron instance method (GLUTApplication class): GLUTApplication.
                                                             (line  181)
* dom instance variable (CalendarTime class): CalendarTime.  (line   38)
* dotFiles instance variable (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  333)
* dots instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  160)
* dots instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  219)
* double C data type:                    C statements.       (line  141)
* dow instance variable (CalendarTime class): CalendarTime.  (line   38)
* doy instance variable (CalendarTime class): CalendarTime.  (line   38)
* dpi instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  133)
* dragging instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  119)
* dragStart instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  146)
* draw instance method (Circle class):   Circle.             (line  125)
* draw instance method (Line class):     Line.               (line   62)
* draw instance method (Point class):    Point.              (line   30)
* draw instance method (Rectangle class): Rectangle.         (line   95)
* draw instance method (X11ButtonPane class): X11ButtonPane. (line  484)
* draw instance method (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  229)
* draw instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  393)
* draw instance method (X11LabelPane class): X11LabelPane.   (line  302)
* draw instance method (X11ListBox class): X11ListBox.       (line  245)
* draw instance method (X11ListPane class): X11ListPane.     (line  325)
* draw instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  241)
* draw instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  177)
* draw instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  298)
* draw instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  292)
* drawButtonLayout instance method (X11LabelPane class): X11LabelPane.
                                                             (line  302)
* drawCircle instance method (X11Bitmap class): X11Bitmap.   (line   76)
* drawCircle instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  348)
* drawCursor instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  306)
* drawFilledRectangle instance method (X11Bitmap class): X11Bitmap.
                                                             (line   83)
* drawFilledRectangle instance method (X11Bitmap class) <1>: X11Bitmap.
                                                             (line  102)
* drawFilledRectangle instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  375)
* drawFmtText instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  352)
* drawFmtTextFT instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  356)
* drawFmtTextW instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  362)
* drawItemList instance method (X11ListPane class): X11ListPane.
                                                             (line  330)
* drawLine instance method (X11Bitmap class): X11Bitmap.     (line   88)
* drawLine instance method (X11Bitmap class) <1>: Line.      (line   67)
* drawLine instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  362)
* drawPoint instance method (X11Bitmap class): X11Bitmap.    (line   97)
* drawPoint instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  358)
* drawRectangle instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  388)
* drawRoundedRectangle instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  383)
* drawRoundedRectangle instance method (X11CanvasPane class) <1>: X11CanvasPane.
                                                             (line  393)
* drawSelection instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  309)
* drawText instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  367)
* drawTextFT instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  378)
* drawTextW instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  390)
* drawThumb instance method (X11ListPane class): X11ListPane.
                                                             (line  334)
* drawThumb instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  192)
* drawWithPen instance method (Line class): Line.            (line   71)
* drawWithPen instance method (Point class): Point.          (line   38)
* drawWithPen instance method (Rectangle class): Rectangle.  (line  100)
* dump instance method (Object class):   Object.             (line  342)
* dump instance method (Object class) <1>: C statements.     (line  266)
* Editing, text:                         Ctalk library.      (line 2750)
* Emacs, GNU:                            GNU tools.          (line    6)
* enableExceptionTrace instance method (Object class): Object.
                                                             (line  347)
* end instance variable (Line class):    Line.               (line   54)
* entryContents instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  164)
* entryIcon instance method (X11Bitmap class): X11Bitmap.    (line  113)
* entryIconEye instance method (X11Bitmap class): X11Bitmap. (line  113)
* entryIconEyeSlashed instance method (X11Bitmap class): X11Bitmap.
                                                             (line  113)
* entryLength instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  397)
* entryPane instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  169)
* entryPane instance variable (X11TextEntryBox class): X11FileSelectDialog.
                                                             (line  322)
* entryText instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  313)
* envVarExists instance method (String class): String.       (line  285)
* eraseThumb instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  192)
* erf(3) C function:                     CFunction.          (line   86)
* erf(3) C function <1>:                 erf.                (line    6)
* erfc(3) C function:                    CFunction.          (line   89)
* erfc(3) C function <1>:                erfc.               (line    6)
* errno:                                 SystemErrnoException.
                                                             (line   19)
* errno <1>:                             Ctalk library.      (line  632)
* errno build-in variable:               SystemErrnoException.
                                                             (line    6)
* errno macro:                           Errors.             (line   58)
* errno macro <1>:                       Ctalk library.      (line  388)
* errorColumn instance variable (Method class): Method.      (line   77)
* errorLine instance variable (Method class): Method.        (line   74)
* Errors:                                Errors.             (line    6)
* errors instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  180)
* Escape sequences, character:           Character.          (line   12)
* eval keyword:                          Method keywords.    (line   40)
* Event class:                           Event.              (line    6)
* eventClass instanceVariable (InputEvent class): InputEvent.
                                                             (line    9)
* eventData instanceVariable (InputEvent class): InputEvent. (line   14)
* eventMask instance variable (X11TerminalStream class): X11TerminalStream.
                                                             (line  105)
* Events, X Window System:               X11TerminalStream.  (line   64)
* Events, X Window System <1>:           InputEvent.         (line   24)
* Example program, text editor:          X11TextEditorPane.  (line  246)
* Exception class:                       Exception.          (line    6)
* exceptionHandler instance method (Exception class): Exception.
                                                             (line  163)
* Exceptions:                            Errors.             (line    6)
* execC instance method (Application class): Application.    (line   68)
* exists instance method (FileStream class): FileStream.     (line   60)
* exitHandler instance variable (Application class): Application.
                                                             (line   24)
* exp(3) C function:                     CFunction.          (line   92)
* exp(3) C function <1>:                 exp.                (line    6)
* expm1(3) C function:                   CFunction.          (line   95)
* expm1(3) C function <1>:               expm1.              (line    6)
* exposeHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  206)
* Expr class:                            Expr.               (line    6)
* extensions instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  415)
* Externs and C variables:               Externs.            (line   63)
* fabs(3) C function:                    CFunction.          (line   98)
* fabs(3) C function <1>:                fabs.               (line    6)
* fabsf(3) C function:                   CFunction.          (line   98)
* fabsl(3) C function:                   CFunction.          (line   98)
* faceBold instance method (X11Bitmap class): X11Bitmap.     (line  138)
* faceBold instance method (X11Pane class): X11Pane.         (line  233)
* faceBold instance method (X11TextPane class): X11TextPane. (line  170)
* faceBoldItalic instance method (X11Bitmap class): X11Bitmap.
                                                             (line  138)
* faceBoldItalic instance method (X11Pane class): X11Pane.   (line  233)
* faceBoldItalic instance method (X11TextPane class): X11TextPane.
                                                             (line  170)
* faceItalic instance method (X11Bitmap class): X11Bitmap.   (line  138)
* faceItalic instance method (X11Pane class): X11Pane.       (line  233)
* faceItalic instance method (X11TextPane class): X11TextPane.
                                                             (line  170)
* faceRegular instance method (X11Bitmap class): X11Bitmap.  (line  138)
* faceRegular instance method (X11Pane class): X11Pane.      (line  233)
* faceRegular instance method (X11TextPane class): X11TextPane.
                                                             (line  170)
* FALSE_ASSERTION_X exception:           Exception.          (line  118)
* family instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  120)
* fclose(3) C function:                  fclose.             (line    6)
* fegetround(3) C function:              fegetround.         (line    6)
* feholdexcept(3) C function:            feholdexcept.       (line    6)
* feof(3) C function:                    feof.               (line    6)
* ferror(3) C function:                  ferror.             (line    6)
* fesetround(3) C function:              fesetround.         (line    6)
* fetestexcepts(3) C function:           fetestexcept.       (line    6)
* fflush(3) C function:                  fflush.             (line    6)
* fgAlpha instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  122)
* fgBlue instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  122)
* fgetc(3) C function:                   fgetc.              (line    6)
* fgetpos(3) C function:                 fgetpos.            (line    6)
* fgets(3) C function:                   fgets.              (line    6)
* fgGreen instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  122)
* fgRed instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  122)
* FILEEOF macro:                         C Macros.           (line   52)
* fileMode instance variable (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  429)
* FileStream class:                      FileStream.         (line    6)
* FILE_ALREADY_OPEN_X exception:         Exception.          (line  118)
* FILE_IS_DIRECTORY_X exception:         Exception.          (line  118)
* fill instance method (Rectangle class): Rectangle.         (line  110)
* fill instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  246)
* fill instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  297)
* fillRadius resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  161)
* fillWithPen instance method (Rectangle class): Rectangle.  (line  114)
* float C data type:                     C statements.       (line  141)
* Float class:                           Float.              (line    6)
* floor(3) C function:                   floor.              (line    6)
* fmod(3) C function:                    fmod.               (line    6)
* FMT_0XHEX macro:                       C Macros.           (line   55)
* focusHighlightOnOff instance method (void): ANSIButtonPane.
                                                             (line   32)
* Font configuration:                    X11FreeTypeFont.    (line   13)
* font instance method (X11Bitmap class): X11Bitmap.         (line  147)
* font instance method (X11LabelPane class): X11LabelPane.   (line  351)
* font instance method (X11Pane class):  X11Pane.            (line  104)
* font instance method (X11Pane class) <1>: X11Pane.         (line  243)
* font instance method (X11TextPane class): X11TextPane.     (line  179)
* font resource (X11ListPane class):     X11ListPane.        (line  183)
* font resource (X11TextEntryPane class): X11TextEntryPane.  (line  151)
* Font specification, determining:       String.             (line  311)
* fontDesc instance variable (X11Font class): X11Font.       (line   27)
* fontDescStr instance variable (X11Pane class): X11Pane.    (line   91)
* fontId instance variable (X11Font class): X11Font.         (line   32)
* Fonts, selecting:                      X11TextEditorPane.  (line   86)
* fonts.conf:                            X11FreeTypeFont.    (line   13)
* fontVar instance variable (X11Pane class): X11FreeTypeFont.
                                                             (line   26)
* fontVar instance variable (X11Pane class) <1>: X11Pane.    (line   87)
* fontVar instance variable (X11Pane class) <2>: X11TextEditorPane.
                                                             (line   86)
* fontVar instancevariable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line   92)
* fopen(3) C function:                   fopen.              (line    6)
* for statements:                        Control structures. (line    6)
* foreground instance method (X11Bitmap class): X11Bitmap.   (line  150)
* foreground instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  405)
* foreground instance method (X11Pane class): X11Pane.       (line  253)
* foreground instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  184)
* foreground instance method (X11TextPane class): X11TextPane.
                                                             (line  217)
* foregroundColor instance variable (X11Pane class): X11Pane.
                                                             (line   96)
* foregroundColor instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  132)
* foregroundColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  331)
* foregroundColor resource (X11LabelPane class): X11LabelPane.
                                                             (line  160)
* foregroundColor resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  136)
* foregroundColor resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  170)
* format instance method (TreeNode class): TreeNode.         (line   41)
* formatClassVariable instance method (ObjectInspector class): ObjectInspector.
                                                             (line   33)
* formatInstanceVariable instance method (ObjectInspector class): ObjectInspector.
                                                             (line   39)
* formatObject instance method (Object class): C statements. (line  266)
* formatObject instance method (ObjectInspector class): ObjectInspector.
                                                             (line   44)
* fprintf(3) C function:                 fprintf.            (line    6)
* fputc(3) C function:                   fputc.              (line    6)
* fputc(3) C function <1>:               fputs.              (line    6)
* frame instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  123)
* framePen instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  131)
* frameRadius resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  161)
* frameRate instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  419)
* frameWidth instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  197)
* frameWidthVar instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  127)
* fread(3) C function:                   fread.              (line    6)
* free(3) C function:                    free.               (line    6)
* freeFTFont instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  424)
* FreeType configuration:                X11FreeTypeFont.    (line   13)
* freeXFont instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  427)
* freopen(3) C function:                 freopen.            (line    6)
* frexp(3) C function:                   frexp.              (line    6)
* fscanf(3) C function:                  Variable arguments. (line    6)
* fscanf(3) C function <1>:              fscanf.             (line    6)
* fseek(3) C function:                   fseek.              (line    5)
* fsetpos(3) C function:                 fsetpos.            (line    6)
* fstat(3) C function:                   fstat.              (line    6)
* ftell(3) C function:                   ftell.              (line    6)
* ftFont instance method (X11Pane class): X11Pane.           (line  258)
* ftFont resource (X11ButtonPane class): X11ButtonPane.      (line  335)
* ftFont resource (X11LabelPane class):  X11LabelPane.       (line  140)
* ftFontVar instance variable (X11Pane class): X11FreeTypeFont.
                                                             (line   26)
* ftFontVar instance variable (X11Pane class) <1>: X11TextEditorPane.
                                                             (line   86)
* ftFontVar instancevariable (X11TextEditorPane class): X11Pane.
                                                             (line  100)
* ftFontVar instancevariable (X11TextEditorPane class) <1>: X11TextEditorPane.
                                                             (line   96)
* fullScreen instance method (GLUTApplication class): GLUTApplication.
                                                             (line  185)
* Function arguments:                    C statements.       (line  101)
* Function parameters:                   C statements.       (line   93)
* fwrite(3) C function:                  fwrite.             (line    6)
* gdb command:                           Invoking.           (line   32)
* gdb command <1>:                       C statements.       (line  277)
* geometry resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  140)
* geometry resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  174)
* Geometry, subpanes:                    X11CanvasPane.      (line  181)
* Geometry, windows:                     X11PaneDispatcher.  (line   11)
* Geometry, windows <1>:                 Ctalk library.      (line 1073)
* Geometry, X window:                    Application.        (line  194)
* geomFlags instance variable (Application class): Application.
                                                             (line   28)
* getc(3) C function:                    getc.               (line    6)
* getCh method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  153)
* getCh method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   63)
* getchar(3) C function:                 CFunction.          (line  105)
* getchar(3) C function <1>:             getchar.            (line    6)
* getCwd instance method (DirectoryStream class): DirectoryStream.
                                                             (line   96)
* getcwd(3) C function:                  CFunction.          (line  108)
* getcwd(3) C function <1>:              getcwd.             (line    6)
* getEnv instance method (String class): String.             (line  289)
* getenv(3) C function:                  CFunction.          (line  111)
* getenv(3) C function <1>:              getenv.             (line    6)
* getExpandedDir instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  401)
* getFocusWidgetText instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   63)
* getFontInfo instance method (X11Font class): X11Font.      (line   63)
* getKeyObject instance method (Key class): Key.             (line  133)
* getPID instance method (Application class): Application.   (line   96)
* getPID method (SignalEvent class):     SignalEvent.        (line   56)
* getpid(3) C function:                  CFunction.          (line  114)
* getpid(3) C function C Function:       getpid.             (line    5)
* getReferenceCount instance method (Object class): Object.  (line  350)
* getRS instance method (String class):  String.             (line  296)
* getShiftState method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   68)
* getUTCTime instance method (CTime class): CalendarTime.    (line   12)
* getValue instance method (Collection class): Collection.   (line   65)
* getValue instance method (Symbol class): Symbol.           (line  100)
* GLEW library:                          Ctalk library.      (line   86)
* GLEW library <1>:                      Ctalk library.      (line  842)
* GLEW library <2>:                      Ctalk library.      (line 1202)
* globPattern instance method (DirectoryStream class): DirectoryStream.
                                                             (line   99)
* GLUT callbacks, defining:              GLUTApplication.    (line  126)
* GLUT library API functions:            Ctalk library.      (line  860)
* GLUTApplication class:                 GLUTApplication.    (line    6)
* GLX example program:                   GLXCanvasPane.      (line  803)
* GLXCanvasPane class:                   GLXCanvasPane.      (line    6)
* glXChooseVisual(3):                    GLXCanvasPane.      (line   72)
* glXChooseVisual(3) <1>:                GLXCanvasPane.      (line  289)
* glxContextPtr instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  213)
* glxinfo(3):                            GLXCanvasPane.      (line   87)
* gmTime instance method (CalendarTime class): CalendarTime. (line  113)
* gmTime instance method (CTime class):  CTime.              (line   34)
* gmtime(3) C function C Function:       gmtime-localtime.   (line    6)
* gmtOff instance variable (CalendarTime class): CalendarTime.
                                                             (line   73)
* GNU autoconf:                          GNU tools.          (line    6)
* GNU automake:                          GNU tools.          (line    6)
* GNU Emacs:                             GNU tools.          (line    6)
* GNU Free Documentation License:        GNU Free Documentation License.
                                                             (line    6)
* GNU General Public License:            Copying.            (line    6)
* GNU Lesser General Public License:     Copying.            (line    6)
* gotoChar instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  205)
* gotoXY instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  133)
* gotoXY instance method (X11TextPane class): X11TextPane.   (line  221)
* gotoXY method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  159)
* gotoXY method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   73)
* grabCursor instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  135)
* grabMove instance method (X11Cursor class): X11Cursor.     (line   42)
* grayed instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  216)
* grayedColor instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  222)
* grayedColor resource (X11LabelPane class): X11LabelPane.   (line  164)
* green instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  190)
* handle instance method (Exception class): Exception.       (line  157)
* handle method (Exception class):       Errors.             (line   19)
* handleDestroy instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  180)
* handleEnterNotify instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  184)
* handleFocusIn instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  189)
* handleFocusOut instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  189)
* handleInput instance method (ANSIButtonPane class): ANSIButtonPane.
                                                             (line   35)
* handleInput instance method (ANSILabelPane class): ANSILabelPane.
                                                             (line   74)
* handleInput instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   78)
* handleInput instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   88)
* handleInput instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  125)
* handleInput instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   89)
* handleInput instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   71)
* handleInput instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   67)
* handleInput method (ANSITextEntryPane class): ANSIWidgetPane.
                                                             (line   15)
* handleInput method (ANSITextEntryPane class) <1>: ANSITextEntryPane.
                                                             (line   69)
* handleInput method (ANSIWidgetPane class): ANSIWidgetPane. (line   15)
* handleInput method (ANSIWidgetPane class) <1>: ANSIWidgetPane.
                                                             (line   85)
* handleKbdInput instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  195)
* handleLeaveNotify instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  184)
* handleMap instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  199)
* handleMove instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  203)
* handlePointerInput instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  207)
* handlePointerMotion instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  211)
* handler instance variable (SignalHandler class): SignalHandler.
                                                             (line   62)
* handleResize instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  215)
* handlerMethod instance variable (Exception class): Exception.
                                                             (line  146)
* handleSelectionClear instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  219)
* handleSelectionRequest instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  223)
* handleSubPaneEvent instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  296)
* handleWMFocusChage instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  229)
* hasExtension instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  459)
* hasFocus:                              X11PaneDispatcher.  (line  235)
* hasFocus instance variable (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   46)
* hasMeta instance method (DirectoryStream class): DirectoryStream.
                                                             (line  108)
* hasPointerContext instance method (Object class): Object.  (line  353)
* haveClick instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  505)
* haveDST instance method (CTime class): CTime.              (line   38)
* haveDst instance variable (CalendarTime class): CalendarTime.
                                                             (line   73)
* haveMultiLine instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  226)
* haveXft instance variable (X11Pane class): X11Pane.        (line   74)
* head instance method (Collection class): Collection.       (line   79)
* Header files:                          Preprocessor.       (line    6)
* height instance variable (X11Bitmap class): X11Bitmap.     (line   29)
* height instance variable (X11Font class): X11Font.         (line   36)
* height instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  148)
* height resource (X11CheckBoxPane class): X11CheckBoxPane.  (line  177)
* highlight instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  240)
* highlightBorderColor instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  231)
* highlightBorderColor instance variable (X11LabelPane class) <1>: X11LabelPane.
                                                             (line  235)
* highlightBorderColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  383)
* highlightBorderColor resource (X11LabelPane class): X11LabelPane.
                                                             (line  168)
* highlightBorderWidth instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  239)
* highlightBorderWidth resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  387)
* highlightBorderWidth resource (X11LabelPane class): X11LabelPane.
                                                             (line  172)
* highlightForegroundColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  353)
* highlightForegroundColor resource (X11LabelPane class): X11LabelPane.
                                                             (line  176)
* highlightHPen instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  435)
* highlightHPenColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  395)
* highlightTextBold resource (X11LabelPane class): X11LabelPane.
                                                             (line  182)
* highlightTextColor instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  243)
* highlightTextColor resource (X11LabelPane class): X11LabelPane.
                                                             (line  187)
* highlightVPen instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  435)
* highlightVPenColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  395)
* hostToAddress instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line  100)
* hours instance variable (CalendarTime class): CalendarTime.
                                                             (line   38)
* hover instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  441)
* hover instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  228)
* hoverBorderWidth resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  161)
* hPad resource (X11TextEntryPane class): X11TextEntryPane.  (line  166)
* Icon IDs:                              X11MessageBoxPane.  (line  145)
* Icon IDs <1>:                          X11YesNoBoxPane.    (line  179)
* icon instance method (X11Bitmap class): X11Bitmap.         (line  156)
* Icon, dialog:                          X11Bitmap.          (line  156)
* Icon, dialog <1>:                      Ctalk library.      (line 1149)
* iconCaution instance method (X11Bitmap class): X11Bitmap.  (line  156)
* iconID resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  145)
* iconID resource (X11MessageBoxPane class) <1>: X11YesNoBoxPane.
                                                             (line  179)
* iconInfo instance method (X11Bitmap class): X11Bitmap.     (line  156)
* iconStop instance method (X11Bitmap class): X11Bitmap.     (line  156)
* icosahedron instance method (GLUTApplication class): GLUTApplication.
                                                             (line  190)
* Identifiers for variables (tags):      Ctalk library.      (line 1626)
* idleHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  218)
* if statements:                         Control structures. (line    6)
* ignoreSignal instance method (SignalHandler class): SignalHandler.
                                                             (line   74)
* iInit instance variable (X11ListPane class): X11ListPane.  (line  247)
* imported instance variable (Method class): Method.         (line   86)
* Include files:                         Preprocessor.       (line    6)
* incReferenceCount instance method (Object class): Object.  (line  367)
* index(3) C function:                   index-function.     (line    6)
* init instance method (AssociativeArray class): AssociativeArray.
                                                             (line  108)
* init instance method (ClassLibraryTree class): ClassLibraryTree.
                                                             (line   72)
* init instance method (List class):     List.               (line   49)
* init instance method (SortedList class): SortedList.       (line   46)
* initFontLib instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  195)
* initFontLib instance method (X11FreeTypeFont class) <1>: X11Pane.
                                                             (line  233)
* initFontLib instance method (X11FreeTypeFont class) <2>: X11TextPane.
                                                             (line   47)
* initGlut instance method (GLUTApplication class): GLUTApplication.
                                                             (line  194)
* initialize instance method (ANSITerminaPane class): ANSITerminalPane.
                                                             (line  137)
* initialize instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  433)
* initialize instance method (X11Pane class): X11Pane.       (line  289)
* initialize instance method (X11Pane class) <1>: X11Pane.   (line  296)
* initialize instance method (X11Pane class) <2>: X11Pane.   (line  310)
* initialize instance method (X11Pane class) <3>: X11Pane.   (line  325)
* initialized instance variable (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  199)
* initialized instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  238)
* initialized instance variable (X11YesNoBoxPane class) <1>: X11FileSelectDialog.
                                                             (line  415)
* initWidgets instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  415)
* initWidgets instance method (X11ListBox class): X11ListBox.
                                                             (line  249)
* initWidgets instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  250)
* initWidgets instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  181)
* initWidgets instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  301)
* initWindow instance method (GLUTApplication class): GLUTApplication.
                                                             (line  202)
* Inpectors:                             C statements.       (line  210)
* inputBuffer instance variable (ANSITextEntryPane class): ANSITextEntryPane.
                                                             (line   60)
* InputEvent class:                      InputEvent.         (line    6)
* inputHandle instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  103)
* inputLength instance variable (ANSITextEntryPane class): ANSITextEntryPane.
                                                             (line   63)
* inputPending method (TerminalStream class): TerminalStream.
                                                             (line   26)
* inputPID instance variable (X11TerminalStream class): X11TerminalStream.
                                                             (line  101)
* inputQueue instance variable (TerminalStream class): TerminalStream.
                                                             (line   16)
* inputQueueMax instance variable (TerminalStream class): TerminalStream.
                                                             (line   17)
* inputStream instance variable (X11Pane class): X11Pane.    (line  126)
* inputWidth instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  316)
* inputWidth method (ANSITextEntryPane class): ANSITextEntryPane.
                                                             (line   73)
* insertAt instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  322)
* inspect instance method (Object class): Object.            (line  370)
* inspect instance method (Object class) <1>: C statements.  (line  210)
* inspect instance method (Object class) <2>: C statements.  (line  277)
* inspect instance method (ObjectInspector class): ObjectInspector.
                                                             (line   49)
* inspect instance method (ObjectInspector class) <1>: Ctalk library.
                                                             (line 2795)
* inspect_get_local () function:         Ctalk library.      (line 2795)
* installAbortHandlerBasic instance method (Application class): Application.
                                                             (line   99)
* installCallBackFns instance method (GLUTApplication class): GLUTApplication.
                                                             (line  207)
* installExitHandler instance method (Application class): Application.
                                                             (line  107)
* installExitHandlerBasic instance method (Application class): Application.
                                                             (line  111)
* installHandler instance method (Exception class): Exception.
                                                             (line  168)
* installHandler instance method (SignalHandler class): SignalHandler.
                                                             (line   77)
* installPrefix instance method (Application class): Application.
                                                             (line  119)
* Instance variable documentation:       Documentation.      (line    6)
* Instance variable documentation <1>:   Documentation.      (line  166)
* instanceMethod instance method (Object class): Object.     (line  422)
* instanceMethod keyword:                Method keywords.    (line   47)
* instanceVariable keyword:              Method keywords.    (line   50)
* int C data type:                       C statements.       (line  144)
* Integer class:                         Integer.            (line    6)
* integerAt instance method (Collection class): Collection.  (line   68)
* INTVAL macro:                          Scoping.            (line   97)
* INTVAL macro () function:              Ctalk library.      (line 2920)
* INVALID_OPERAND_X exception:           Exception.          (line  118)
* INVALID_RECEIVER_X exception:          Exception.          (line  118)
* INVALID_VARIABLE_DECLARATION_X exception: Exception.       (line  118)
* invert instance method (Character class): Character.       (line  160)
* invert instance method (Character class) <1>: Prefixes.    (line   44)
* invert instance method (Integer class): Integer.           (line  122)
* invert instance method (Integer class) <1>: Prefixes.      (line   44)
* invert instance method (LongInteger class): LongInteger.   (line  106)
* invert instance method (LongInteger class) <1>: Prefixes.  (line   44)
* Invoking ctalk:                        Invoking.           (line    6)
* is instance method (Object class):     Object.             (line  379)
* isAlNum instance method (Character class): Character.      (line  168)
* isAlNum method (Character class):      isalnum-isxdigit.   (line    6)
* isalnum(3) C function:                 isalnum-isxdigit.   (line    6)
* isAlpha instance method (Character class): Character.      (line  172)
* isAlpha method (Character class):      isalnum-isxdigit.   (line    6)
* isalpha(3) C function:                 isalnum-isxdigit.   (line    6)
* isAM instance method (CTime class):    CTime.              (line   42)
* isASCII instance method (Character class): Character.      (line  164)
* isASCII method (Character class):      isalnum-isxdigit.   (line    6)
* isascii(3) C function:                 isalnum-isxdigit.   (line    6)
* isATty method (TerminalStream class):  TerminalStream.     (line   29)
* isBlank instance method (Character class): Character.      (line  176)
* isBlank method (Character class):      isalnum-isxdigit.   (line    6)
* isblank(3) C function:                 isalnum-isxdigit.   (line    6)
* isClassMethod instance method (Object class): Object.      (line  402)
* isClassObject instance method (Object class): Object.      (line  408)
* isClicked instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  510)
* isCntrl instance method (Character class): Character.      (line  180)
* isCntrl method (Character class):      isalnum-isxdigit.   (line    6)
* iscntrl(3) C function:                 isalnum-isxdigit.   (line    6)
* isDigit instance method (Character class): Character.      (line  184)
* isDigit method (Character class):      isalnum-isxdigit.   (line    6)
* isdigit(3) C function:                 isalnum-isxdigit.   (line    6)
* isDir instance method (FileStream class): FileStream.      (line   63)
* isDir method (FileStream class):       Errors.             (line   48)
* isdst instance variable (CalendarTime class): CalendarTime.
                                                             (line   66)
* isEmtpy instance method (Collection class): Collection.    (line   75)
* isGraph instance method (Character class): Character.      (line  188)
* isGraph method (Character class):      isalnum-isxdigit.   (line    6)
* isgraph(3) C function:                 isalnum-isxdigit.   (line    6)
* isInitialized instance variable (Method class): Method.    (line  101)
* isInputPane instance variable (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   52)
* isInstanceMethod instance method (Object class): Object.   (line  412)
* isInstanceVariable instance method (Object class): Object. (line  418)
* isLower instance method (Character class): Character.      (line  192)
* isLower method (Character class):      isalnum-isxdigit.   (line    6)
* islower(3) C function:                 isalnum-isxdigit.   (line    6)
* isMonospace instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  205)
* isNull instance method (Object class): Object.             (line  427)
* isNullValue instance method (Object class): Object.        (line  431)
* isoTimeString instance method (CalendarTime class): CalendarTime.
                                                             (line  120)
* isPrint instance method (Character class): Character.      (line  196)
* isPrint method (Character class):      isalnum-isxdigit.   (line    6)
* isprint(3) C function:                 isalnum-isxdigit.   (line    6)
* isPunct instance method (Character class): Character.      (line  200)
* isPunct method (Character class):      isalnum-isxdigit.   (line    6)
* ispunct(3) C function:                 isalnum-isxdigit.   (line    6)
* isSpace instance method (Character class): Character.      (line  204)
* isSpace method (Character class):      isalnum-isxdigit.   (line    6)
* isspace(3) C function:                 isalnum-isxdigit.   (line    6)
* isSubClassOf instance method (Object class): Object.       (line  436)
* isTopLevel instance method (X11Pane class): X11Pane.       (line  330)
* isUpper instance method (Character class): Character.      (line  209)
* isUpper method (Character class):      isalnum-isxdigit.   (line    6)
* isupper(3) C function:                 isalnum-isxdigit.   (line    6)
* isXDigit instance method (Character class): Character.     (line  213)
* isXDigit method (Character class):     isalnum-isxdigit.   (line    6)
* isxdigit(3) C function:                isalnum-isxdigit.   (line    6)
* isXLFD instance method (String class): String.             (line  311)
* IS_OBJECT macro:                       C Macros.           (line   74)
* IS_VALUE_INSTANCE_VAR macro:           C Macros.           (line   78)
* is_zero_q function:                    Ctalk library.      (line 2931)
* ItemBox class:                         X11FileSelectDialog.
                                                             (line  429)
* items instance variable (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   42)
* items instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   76)
* items instance variable (X11ListBox class): X11ListBox.    (line  220)
* items instance variable (X11ListPane class): X11ListPane.  (line  233)
* justify instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  247)
* Key class:                             Key.                (line    6)
* keyAt instance method (AssociativeArray class): AssociativeArray.
                                                             (line  122)
* keyExists instance method (Collection class): Collection.  (line   83)
* keyPressHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  222)
* keyScrollIncrement resource (X11ListPane class): X11ListPane.
                                                             (line  187)
* keyState instance variable (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  221)
* label instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  446)
* label instance variable (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  205)
* label instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  244)
* label instance variable (X11YesNoBoxPane class) <1>: X11FileSelectDialog.
                                                             (line  322)
* labs(3) C function:                    labs.               (line    6)
* lastY instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  139)
* lbutton instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  227)
* lbutton instance variable (X11YesNoBoxPane class) <1>: X11FileSelectDialog.
                                                             (line  322)
* leading instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  268)
* leading instancevariable (X11TextPane class): X11TextPane. (line   65)
* left instance variable (Rectangle class): Rectangle.       (line   73)
* leftButtonText resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  196)
* length instance method (String class): String.             (line  317)
* length instance variable (Vector class): Vector.           (line   44)
* levelMargin instance variable (TreeNode class): TreeNode.  (line   25)
* levelMarginLength instance variable (TreeNode class): TreeNode.
                                                             (line   29)
* libIsInitialized instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  209)
* Library functions:                     Ctalk library.      (line    6)
* libraryPath instance method (Object class): Object.        (line  440)
* LibrarySearch class:                   LibrarySearch.      (line    6)
* lightShadowColor resource (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  171)
* Line class:                            Line.               (line    6)
* lineHeight instance variable (X11TextPane class): X11TextPane.
                                                             (line   74)
* lineWidth instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  138)
* List class:                            List.               (line    6)
* List selections:                       X11ListBox.         (line  167)
* listFont resource (X11ListBox class):  X11ListBox.         (line  212)
* listFonts instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  213)
* listPane instance variable (X11ListBox class): X11ListBox. (line  234)
* listPane instance variable (X11ListBox class) <1>: X11FileSelectDialog.
                                                             (line  322)
* listROPx resource (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  303)
* listRWPx resource (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  303)
* llabs(3) C function:                   llabs.              (line    6)
* llrint(3) C function:                  CFunction.          (line  121)
* llrint(3) C function <1>:              llrint.             (line    6)
* llrintf(3) C function:                 CFunction.          (line  122)
* llrintf(3) C function <1>:             llrint.             (line    6)
* llrintl(3) C function:                 CFunction.          (line  123)
* llrintl(3) C function <1>:             llrint.             (line    6)
* llround(3) C function:                 llround.            (line    6)
* LLVAL macro:                           Scoping.            (line   97)
* LLVAL macro () function:               Ctalk library.      (line 2935)
* loadNotify instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  218)
* localCVARs instance variable (Method class): Method.       (line   99)
* localObjects instance variable (Method class): Method.     (line   94)
* localTime instance method (CalendarTime class): CalendarTime.
                                                             (line  130)
* localTime instance method (CTime class): CTime.            (line   46)
* localtime(3) C function C Function:    gmtime-localtime.   (line    5)
* log(3) C function:                     log.                (line    6)
* log10(3) C function:                   log10.              (line    6)
* log1p(3) C function:                   log1p.              (line    6)
* long int C data type:                  C statements.       (line  144)
* long long int C data type:             C statements.       (line  147)
* LongInteger Class:                     LongInteger.        (line    6)
* lrint(3) C function:                   CFunction.          (line  118)
* lrint(3) C function <1>:               llrint.             (line    6)
* lrint(3) C function <2>:               lrint.              (line    6)
* lrintf(3) C function:                  CFunction.          (line  119)
* lrintf(3) C function <1>:              llrint.             (line    6)
* lrintl(3) C function:                  CFunction.          (line  120)
* lrintl(3) C function <1>:              llrint.             (line    6)
* lround(3) C function:                  lround.             (line    6)
* Macro definitions:                     C Macros.           (line    6)
* Magnitude class:                       Magnitude.          (line    6)
* mainWindow instance method (X11Pane class): X11Pane.       (line  333)
* mainWindowPtr instance variable (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  228)
* mainWindowPtr instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  260)
* makeItem instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  420)
* makeSibling instance method (TreeNode class): TreeNode.    (line   47)
* makeSocketPath instance method (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   49)
* malloc(3) C function:                  malloc.             (line    6)
* map instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  141)
* map instance method (Array class):     Array.              (line   60)
* map instance method (AssociativeArray class): AssociativeArray.
                                                             (line  125)
* map instance method (GLXCanvasPane class): GLXCanvasPane.  (line  463)
* map instance method (List class):      List.               (line   52)
* map instance method (String class):    String.             (line  321)
* map instance method (TreeNode class):  TreeNode.           (line   50)
* map instance method (X11Pane class):   X11Pane.            (line  340)
* map method (ANSIWidgetPane class):     ANSIWidgetPane.     (line   91)
* mapClassVariables instance method (Object class): Object.  (line  443)
* mapClassVariables instance method (Object class) <1>: ObjectInspector.
                                                             (line   14)
* mapInstanceVariables instance method (Object class): Object.
                                                             (line  450)
* mapInstanceVariables instance method (Object class) <1>: ObjectInspector.
                                                             (line   14)
* mapKeys instance method (Collection class): Collection.    (line   87)
* mapped instance variable (Pane class): Pane.               (line   23)
* mapRev instance method (List class):   List.               (line  123)
* mapSubWidget instance method (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   95)
* margin instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  274)
* margin instance variable (X11ListPane class): X11ListPane. (line  251)
* margin instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  143)
* margin resource (X11CheckBoxPane class): X11CheckBoxPane.  (line  187)
* margin resource (X11ListPane class):   X11ListPane.        (line  191)
* match instance method (String class):  String.             (line  360)
* matchAt instance method (String class): String.            (line  365)
* matchAt instance method (String class) <1>: String.        (line  669)
* matchCase instance method (String class): String.          (line  370)
* matchIndexAt instance method (String class): String.       (line  375)
* matchIndexAt instance method (String class) <1>: String.   (line  669)
* matchLength instance method (String class): String.        (line  380)
* matchRegex instance method (String class): String.         (line   37)
* matchRegex instance method (String class) <1>: String.     (line  384)
* matchRegex instance method (String class) <2>: String.     (line  506)
* maxAdvance instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  152)
* maxLBearing instance variable (X11Font class): X11Font.    (line   40)
* maxRBearing instance variable (X11Font class): X11Font.    (line   44)
* maxWidth instance variable (X11Font class): X11Font.       (line   49)
* MEMADDR macro:                         C Macros.           (line   82)
* membervars instance method (Application class): Application.
                                                             (line  134)
* memchr(3) C function:                  memchr.             (line    6)
* memcmp(3) C function:                  memcmp.             (line    6)
* memcpy(3) C function:                  memcpy.             (line    6)
* memmove(3) C function:                 memmove.            (line    6)
* memset(3) C function:                  memset.             (line    6)
* messageColor resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  163)
* messageColor resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  201)
* messageFont resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  168)
* messageFont resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  206)
* messageText:                           ANSIMessageBoxPane. (line   29)
* messageText instance variable:         ANSIYesNoBoxPane.   (line   52)
* messageText resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  173)
* messageText resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  211)
* Metacharacters:                        String.             (line  545)
* Method API:                            Method API.         (line    6)
* Method API <1>:                        Translating.        (line    6)
* Method class:                          Method.             (line    6)
* Method declarations:                   Methods.            (line   63)
* Method documentation:                  Documentation.      (line    6)
* Method keywords.:                      Method keywords.    (line    6)
* Method overloading:                    Overloading.        (line    3)
* Method parameters:                     Methods.            (line   83)
* Method prototypes:                     Externs.            (line    6)
* methodArgs instance variable (Method class): Method.       (line   92)
* methodDocString instance method (Application class): Application.
                                                             (line  147)
* methodFn instance variable (Method class): Method.         (line   59)
* methodName instance variable (Method class): Method.       (line   51)
* methodObjectMessage instance method (Method class): Object.
                                                             (line  483)
* methodObjectMessage instance method (Object class): Object.
                                                             (line  456)
* methodObjectMessage instance method (Object class) <1>: Method.
                                                             (line  116)
* methodParameters instance variable (Method class): Method. (line   63)
* methodPoolMax instance method (Method class): Object.      (line  462)
* methodPrototypes instance method (Application class): Application.
                                                             (line  151)
* methodPrototypes instance method (Application class) <1>: Documentation.
                                                             (line  101)
* methodReturnBoolean macro:             Return values.      (line   99)
* methodReturnFalse macro:               Return values.      (line  104)
* methodReturnInteger macro:             Return values.      (line  108)
* methodReturnLongInteger macro:         Return values.      (line  112)
* methodReturnNULL macro:                Return values.      (line  117)
* methodReturnObject macro:              Return values.      (line  121)
* methodReturnObjectName macro:          Return values.      (line  125)
* methodReturnSelf macro:                Return values.      (line  130)
* methodReturnString macro:              Return values.      (line  134)
* methodReturnTrue macro:                Return values.      (line  139)
* Methods:                               Methods.            (line    6)
* Methods <1>:                           Methods.            (line   63)
* methods instance method (Object class): Object.            (line  599)
* methods instance method (Object class) <1>: Documentation. (line   69)
* methodSearch instance method (LibrarySearch class): LibrarySearch.
                                                             (line   28)
* methodSelector instance variable (Method class): Method.   (line   52)
* methodSource instance method (Application class): Application.
                                                             (line  156)
* methodSource instance method (Application class) <1>: Documentation.
                                                             (line   69)
* methodSource instance variable (Method class): Method.     (line   61)
* METHOD_USED_BEFORE_DEFINE_X exception: Exception.          (line  118)
* minutes instance variable (CalendarTime class): CalendarTime.
                                                             (line   38)
* MISMATCHED_PAREN_X exception:          Exception.          (line  118)
* mkDir instance method (DirectoryStream class): DirectoryStream.
                                                             (line  112)
* mkdir(3) C function:                   mkdir.              (line    6)
* modal instance variable (X11Bitmap class): X11Bitmap.      (line   32)
* modal instance variable (X11Pane class): X11Pane.          (line   79)
* modalWin instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  244)
* modf(3) C function:                    modf.               (line    6)
* monName instance method (CalendarTime class): CalendarTime.
                                                             (line  138)
* month instance variable (CalendarTime class): CalendarTime.
                                                             (line   38)
* mouseOver instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  147)
* moveCursor instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  150)
* multiText instance method (X11LabelPane class): X11LabelPane.
                                                             (line  363)
* name instance method (Object class):   Object.             (line  605)
* name instance method (Symbol class):   Symbol.             (line  119)
* namedColorFT instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  471)
* namedX11Color instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  236)
* nArgs instance variable (Method class): Method.            (line   71)
* nearbyint(3) C function:               nearbyint.          (line    6)
* NetworkStream class:                   NetworkStream.      (line    6)
* new instance method (ANSIButtonPane class): ANSIButtonPane.
                                                             (line   48)
* new instance method (ANSILabelPane class): ANSILabelPane.  (line   80)
* new instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   83)
* new instance method (ANSIMessageBoxPane class): ANSIMessageBoxPane.
                                                             (line   41)
* new instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   92)
* new instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  163)
* new instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   95)
* new instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  147)
* new instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   76)
* new instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   70)
* new instance method (List class):      List.               (line  129)
* new instance method (Object class):    Object.             (line  608)
* new instance method (ReadFileStream class): ReadFileStream.
                                                             (line   24)
* new instance method (SignalHandler class): SignalHandler.  (line   81)
* new instance method (X11ButtonPane class): X11ButtonPane.  (line  514)
* new instance method (X11CanvasPane class): X11CanvasPane.  (line  409)
* new instance method (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  236)
* new instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  425)
* new instance method (X11LabelPane class): X11LabelPane.    (line  328)
* new instance method (X11ListBox class): X11ListBox.        (line  253)
* new instance method (X11ListPane class): X11ListPane.      (line  338)
* new instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  256)
* new instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  305)
* new instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  201)
* new instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  210)
* new instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  188)
* new instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  326)
* new instance method (X11TextPane class): X11TextPane.      (line  228)
* new instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  307)
* new method (ANSITerminalStream class): ANSITerminalStream. (line  164)
* new method (ANSITextEntryPane class):  ANSITextEntryPane.  (line   77)
* new method (ANSIWidgetPane class):     ANSIWidgetPane.     (line  102)
* new method (Object class):             Self and super.     (line   22)
* new method (ReadFileStream class):     Self and super.     (line   22)
* new method (SignalEvent class):        SignalEvent.        (line   60)
* new method (WriteFileStream class):    WriteFileStream.    (line   60)
* nextEvent method (SignalEvent class):  SignalEvent.        (line   69)
* nextFocus instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   79)
* nextInputEvent method (TerminalStream class): TerminalStream.
                                                             (line   33)
* nIinputEvents instance variable (TerminalStream class): TerminalStream.
                                                             (line   19)
* nItemsSelected instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  444)
* nItemsSelected instance method (X11ListPane class): X11ListPane.
                                                             (line  343)
* nMatches instance method (String class): String.           (line  393)
* noBorder instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  131)
* noBorder instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   82)
* noMethodInit keyword:                  Method functions.   (line   25)
* noMethodInit keyword <1>:              Method keywords.    (line   77)
* noShadow instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  148)
* noShadow instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line  101)
* notifyLevel instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  244)
* NOT_A_TTY_X exception:                 Exception.          (line  118)
* nParams instance variable (Method class): Method.          (line   65)
* Null objects:                          Object.             (line   26)
* Object attributes:                     Attributes.         (line    6)
* Object class:                          Object.             (line    6)
* OBJECT typedef:                        OBJECT typedef.     (line    6)
* ObjectInspector class:                 ObjectInspector.    (line    6)
* ObjectInspector class <1>:             C statements.       (line  266)
* OBJECT_HAS_LOCAL_TAG attribute;:       Attributes.         (line   53)
* OBJECT_IS_DEREF_RESULT attribute;:     Object.             (line   83)
* OBJECT_IS_DEREF_RESULT attribute; <1>: Attributes.         (line   61)
* OBJECT_IS_GLOBAL_COPY attribute;:      Attributes.         (line   38)
* OBJECT_IS_I_RESULT attribute;:         Attributes.         (line   41)
* OBJECT_IS_MEMBER_OF_PARENT_COLLECTION attribute;: Attributes.
                                                             (line   48)
* OBJECT_IS_STRING_LITERAL attribute;:   Attributes.         (line   45)
* OBJREF macro:                          Ctalk library.      (line  283)
* OBJREF macro <1>:                      Ctalk library.      (line 2901)
* OBJREF macro <2>:                      Ctalk library.      (line 2997)
* OBJREF_T data type:                    Ctalk library.      (line 2901)
* obj_ref_range_chk () function:         Ctalk library.      (line 2896)
* obj_ref_str function:                  Ctalk library.      (line 2940)
* octahedron instance method (GLUTApplication class): GLUTApplication.
                                                             (line  211)
* okButton instance variable (ANSIMessageBoxPane class): ANSIMessageBoxPane.
                                                             (line   28)
* oldSelectedContent instance variable (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   46)
* oldSelectedContent instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   79)
* onAnimation instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  477)
* onButtonPress instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  485)
* onClick instance method (X11CheckBoxPane class): X11CheckBoxPane.
                                                             (line  244)
* onClick instance method (X11ListPane class): X11ListPane.  (line  347)
* onEnter instance method (X11ListPane class): X11ListPane.  (line  347)
* onExpose instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  525)
* onExpose instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  436)
* onExpose instance method (X11ListPane class): X11ListPane. (line  347)
* onIdle instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  551)
* onKey instance method (X11ListPane class): X11ListPane.    (line  347)
* onKeyPress instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  568)
* onLeave instance method (X11ListPane class): X11ListPane.  (line  347)
* onListClick instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  437)
* onMotion instance method (X11ListPane class): X11ListPane. (line  347)
* onPointerMotion instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  626)
* onResize instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  644)
* onResize instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  438)
* onResize instance method (X11ListPane class): X11ListPane. (line  347)
* onTimerTick instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  660)
* open instance method (UNIXNetworkStreamReader class): UNIXNetworkStreamReader.
                                                             (line  103)
* open instance method (UNIXNetworkStreamWriter class): UNIXNetworkStreamWriter.
                                                             (line   24)
* openEventStream instance method (X11Pane class): X11Pane.  (line  343)
* openInputClient method (X11TerminalStream class): X11TerminalStream.
                                                             (line  125)
* openInputQueue method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  174)
* openInputQueue method (ANSITerminalStream class) <1>: ANSIWidgetPane.
                                                             (line  102)
* openInputQueue method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   77)
* openOn instance method (ReadFileStream class): ReadFileStream.
                                                             (line   32)
* openOn instance method (TCPIPNetworkStreamReader class): TCPIPNetworkStreamReader.
                                                             (line   55)
* openOn instance method (TCPIPNetworkStreamWriter class): TCPIPNetworkStreamWriter.
                                                             (line   15)
* openOn instance method (TCPIPV6NetworkStreamReader class): TCPIPV6NetworkStreamReader.
                                                             (line   33)
* openOn instance method (TCPIPV6NetworkStreamWriter class): TCPIPV6NetworkStreamWriter.
                                                             (line    9)
* openOn instance method (UNIXNetworkStreamReader class): UNIXNetworkStreamReader.
                                                             (line  112)
* openOn instance method (UNIXNetworkStreamWriter class): UNIXNetworkStreamWriter.
                                                             (line   33)
* openOn method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  177)
* openOn method (WriteFileStream class): WriteFileStream.    (line   68)
* Optimization:                          C statements.       (line  316)
* origin instance variable (Pane class): Pane.               (line   27)
* outputBuffer instance variable (ANSIButtonPane class): ANSIButtonPane.
                                                             (line   17)
* outputHandle instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  109)
* Overloading methods:                   Overloading.        (line    3)
* Overloading parameters:                Overloading.        (line   32)
* pad resource (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  311)
* pad resource (X11MessageBoxPane class): X11MessageBoxPane. (line  177)
* pad resource (X11YesNoBoxPane class):  X11YesNoBoxPane.    (line  215)
* padding instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  278)
* padding instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  151)
* Pane class:                            Pane.               (line    6)
* paneBackingStore instance variable:    Ctalk library.      (line 2060)
* paneBackingStore instance variable (Pane class): Pane.     (line   32)
* paneBuffer instance variable:          Ctalk library.      (line 2060)
* paneBuffer instance variable (Pane class): Pane.           (line   42)
* paneID instance variable (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   56)
* paneStream instance variable (ANSITerminalPane class): ANSITerminalPane.
                                                             (line   83)
* paneWidthChars instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  232)
* Parameters, overloading:               Overloading.        (line   32)
* parent method (ANSIWidgetPane class):  ANSIWidgetPane.     (line  110)
* parentClip instance variable (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  105)
* parentDrawable instance variable (X11Bitmap class): X11Bitmap.
                                                             (line   37)
* parentOrigin instance variable (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  101)
* parentPane instance variable (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   60)
* parentPane method (X11TerminalStream class): X11TerminalStream.
                                                             (line  129)
* parseArgs instance method (Application class): Application.
                                                             (line  189)
* parseArgs instance method (Application class) <1>: GLUTApplication.
                                                             (line  194)
* parseX11Geometry:                      Application.        (line  194)
* parseX11Geometry instance method (Application class): Application.
                                                             (line  194)
* PARSE_ERROR_X exception:               Exception.          (line  118)
* Pasting text:                          X11TextEditorPane.  (line   51)
* pathEntry instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  448)
* Pattern matches, debugging:            String.             (line  943)
* Pattern strings:                       String.             (line  871)
* pctLabelMargin instance variable (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   55)
* peek instance method (Exception class): Exception.         (line  173)
* Pen Class:                             Pen.                (line    6)
* pen instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  154)
* pending instance method (Exception class): Exception.      (line  177)
* pending method (Exception class):      Errors.             (line   19)
* pending method (SignalEvent class):    SignalEvent.        (line   73)
* pendingEvents (SignalEvent class):     SignalEvent.        (line   37)
* percent instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   96)
* percent instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  205)
* percentInt instance variable (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   59)
* perror(3) C function:                  perror.             (line    6)
* pixelHeightFT instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  672)
* pixmapFromData instance method (X11Bitmap class): X11Bitmap.
                                                             (line  216)
* pixmapFromData instance method (X11CanvasPane class): X11Bitmap.
                                                             (line  216)
* pixmapFromData instance method (X11CanvasPane class) <1>: X11CanvasPane.
                                                             (line  421)
* Point Class:                           Point.              (line    6)
* point instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  151)
* point instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  239)
* pointerMotionHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  228)
* pointIsInThumb instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  222)
* pointSize instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  140)
* Pool size, method:                     Object.             (line  462)
* Pool size, method <1>:                 Ctalk library.      (line 1393)
* pop instance method (List class):      List.               (line  136)
* popItemRef instance method (List class): List.             (line  140)
* Port, TCPIP:                           TCPIPV6NetworkStreamWriter.
                                                             (line   16)
* pow(3) C function:                     pow.                (line    6)
* Pragmas:                               C statements.       (line    6)
* Preprocessor:                          Preprocessor.       (line    6)
* prevSelectedLine instance variable (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   51)
* prevSelectedLine instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   83)
* print instance method (TreeNode class): TreeNode.          (line   55)
* printExceptionTrace instance method (Exception class): Exception.
                                                             (line  189)
* printf(3) C function:                  printf.             (line    6)
* printf(3) C function <1>:              vfprintf.           (line    6)
* printMatchToks instance method (String class): String.     (line  397)
* printMatchToks instance method (String class) <1>: String. (line  943)
* printOn instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  154)
* printOn instance method (String class): String.            (line  403)
* printOn instance method (X11TextPane class): X11TextPane.  (line  235)
* printOn method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  180)
* printOn method (String class):         Variable arguments. (line   48)
* printOn method (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   80)
* printOn method (WriteFileStream class): WriteFileStream.   (line   73)
* printSelfBasic instance method (Object class): Object.     (line  616)
* processID (SignalHandler class):       SignalEvent.        (line   43)
* progress instance variable (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   66)
* promptString instance variable (ObjectInspector class): ObjectInspector.
                                                             (line   23)
* promptText instance variable (ANSITextEntryPane class): ANSITextEntryPane.
                                                             (line   56)
* Prototypes, methods:                   Externs.            (line    6)
* PTR_CONVERSION_X exception:            Exception.          (line  118)
* push instance method (List class):     List.               (line  143)
* pushAscending instance method (SortedList class): SortedList.
                                                             (line   49)
* pushDescending instance method (SortedList class): SortedList.
                                                             (line   49)
* pushItemRef instance method (List class): List.            (line  146)
* putChar instance method (X11TextPane class): X11TextPane.  (line  242)
* putCharXY instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  159)
* putStr instance method (X11Bitmap class): X11Bitmap.       (line  200)
* putStr instance method (X11TextPane class): X11TextPane.   (line  246)
* putStrXY instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  436)
* putStrXY instance method (X11Pane class): X11Pane.         (line  348)
* putTransformedStrXY instance method (X11Pane class): X11Pane.
                                                             (line  352)
* qualifyName instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  280)
* queued instance variable (Method class): Method.           (line   89)
* queueEvent method (SignalEvent class): SignalEvent.        (line   77)
* queueInput instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  121)
* queueInput instance variable (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   34)
* queueInput method (TerminalStream class): TerminalStream.  (line   36)
* queueInput method (X11TerminalStream class): X11TerminalStream.
                                                             (line  132)
* queueInputEvent method (TerminalStream class): TerminalStream.
                                                             (line   39)
* quickSearch instance method (String class): String.        (line  406)
* quickSearch instance method (String class) <1>: String.    (line  506)
* quiet instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  284)
* radius instance variable (Circle class): Circle.           (line  118)
* radius instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  450)
* radius instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  282)
* raise(3) C function:                   raise.              (line    6)
* raiseCriticalException instance method (Exception class): Exception.
                                                             (line  180)
* raiseCriticalException method (SysErrnoException class): Ctalk library.
                                                             (line  378)
* raiseException instance method (Exception class): Exception.
                                                             (line  192)
* raiseException method (SystemErrnoException class): SystemErrnoException.
                                                             (line   26)
* raiseException method (SystemErrnoException class) <1>: Errors.
                                                             (line   54)
* raiseSignal instance method (SignalHandler class): SignalHandler.
                                                             (line   85)
* raiseWindow instance method (X11Pane class): X11Pane.      (line  356)
* rand(3) C function:                    CFunction.          (line  151)
* rand(3) C function <1>:                rand.               (line    6)
* rawMode method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  183)
* rawModeFlag instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  124)
* rbutton instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  228)
* rbutton instance variable (X11YesNoBoxPane class) <1>: X11FileSelectDialog.
                                                             (line  322)
* rcvrClassObject instance variable (Method class): Method.  (line   57)
* rcvrFrameTop instance variable (Method class): Method.     (line   83)
* readAll instance method (ReadFileStream class): ReadFileStream.
                                                             (line   36)
* readAll instance method (ReadFileStream class) <1>: Documentation.
                                                             (line  126)
* readChar instance method (ReadFileStream class): ReadFileStream.
                                                             (line   39)
* readChar method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  186)
* ReadFileStream class:                  ReadFileStream.     (line    6)
* readFmt method (ReadFileStream class): Variable arguments. (line   48)
* readFmt method (String class):         Variable arguments. (line   48)
* readFormat instance method (ReadFileStream class): ReadFileStream.
                                                             (line   43)
* readFormat instance method (String class): String.         (line  415)
* readLine instance method (ReadFileStream class): ReadFileStream.
                                                             (line   47)
* readLine method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  189)
* readRec instance method (ReadFileStream class): ReadFileStream.
                                                             (line   52)
* readText instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line  122)
* readText instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line   99)
* readVec instance method (ReadFileStream class): ReadFileStream.
                                                             (line   56)
* readVec instance method (ReadFileStream class) <1>: Vector.
                                                             (line   10)
* readVec instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line  136)
* readVec instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line  109)
* realloc(3) C function:                 realloc.            (line    6)
* Record separator character:            String.             (line  296)
* Record separator character <1>:        String.             (line  422)
* Record separator character <2>:        String.             (line 1014)
* Rectangle class:                       Rectangle.          (line    6)
* red instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  289)
* reflow instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  332)
* refresh instance method (ANSILabelPane class): ANSILabelPane.
                                                             (line   84)
* refresh instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   87)
* refresh instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line  101)
* refresh instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  169)
* refresh instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line  100)
* refresh instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  164)
* refresh instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   84)
* refresh instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  428)
* refresh instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  455)
* refresh instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  259)
* refresh instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  337)
* refresh instance method (X11TextPane class): X11TextPane.  (line  249)
* refresh instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  310)
* refreshRate instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  677)
* refreshReframe instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  431)
* refreshSelection instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   94)
* refreshSelection instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  172)
* refreshSelectionFirst instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   90)
* refreshSelectionFirst instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  176)
* regions instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  158)
* Regular expression metacharacters:     String.             (line  545)
* remove(3) C function:                  remove.             (line    6)
* removeAt instance method (Collection class): Collection.   (line   93)
* removeSocket instance method (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   76)
* removeValue instance method (Symbol class): Symbol.        (line  122)
* rename(3) C function:                  rename.             (line    6)
* renameFile instance method (FileStream class): FileStream. (line   67)
* replaceAt instance method (Collection class): Collection.  (line   99)
* requestClose instance variable (X11TextPane class): X11TextPane.
                                                             (line  114)
* require keyword:                       Required classes.   (line    6)
* require keyword <1>:                   Method keywords.    (line   81)
* resetGraphics instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  170)
* resize instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   88)
* resize instance method (X11Bitmap class): X11Bitmap.       (line  228)
* resizeHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  232)
* resources instance variable (X11Pane class): X11Pane.      (line  130)
* Resources, X windows:                  X11Pane.            (line  361)
* restoreTerm method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  193)
* returnClass instance variable (Method class): Method.      (line   54)
* returnObjectClass:                     Return values.      (line    6)
* returnObjectClass keyword:             Method keywords.    (line   84)
* returnText instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  263)
* returnVal instance variable (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  268)
* reverseOnOff instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  174)
* RGBAColor instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  303)
* right instance variable (Rectangle class): Rectangle.      (line   73)
* rightButtonText resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  196)
* rightMargin instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  147)
* rindex(3) C function:                  rindex.             (line    6)
* rint(3) C function:                    rint.               (line    6)
* rmDir instance method (DirectoryStream class): DirectoryStream.
                                                             (line  115)
* rmdir(3) C function:                   rmdir.              (line    6)
* rotation instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  128)
* round(3) C function:                   round.              (line    6)
* run instance method (GLUTApplication class): GLUTApplication.
                                                             (line  219)
* run instance method (GLXCanvasPane class): GLXCanvasPane.  (line  682)
* run instance method (GLXCanvasPane class) <1>: Ctalk library.
                                                             (line  838)
* saveSelectedFont instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  294)
* scaleX instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  128)
* scaleY instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  128)
* scanf(3) C function:                   Variable arguments. (line    6)
* scanf(3) C function <1>:               scanf.              (line    6)
* scanf(3) C function <2>:               vfscanf.            (line    6)
* scanf(3) C function <3>:               vscanf.             (line    6)
* scanf(3) C function <4>:               vsscanf.            (line    6)
* Scope of objects:                      Scoping.            (line    6)
* Scope of objects <1>:                  Ctalk library.      (line 1744)
* screenColor (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   83)
* scrollArrow instance method (X11Cursor class): X11Cursor.  (line   45)
* scrollBar instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   87)
* scrollHeight instance variable (X11TextPane class): X11TextPane.
                                                             (line   83)
* scrollMargin instance variable (X11TextPane class): X11TextPane.
                                                             (line   92)
* scrollThumbSize instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  181)
* scrollThumbStart instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  186)
* scrollWidth instance variable (X11ListPane class): X11ListPane.
                                                             (line  262)
* scrollWidth instance variable (X11ListPane class) <1>: X11ListPane.
                                                             (line  268)
* search instance method (String class): String.             (line  418)
* search instance method (TreeNode class): TreeNode.         (line   60)
* Search path, classes:                  Application.        (line   58)
* Search path, classes <1>:              Translating.        (line   71)
* seconds instance variable (CalendarTime class): CalendarTime.
                                                             (line   38)
* seekTo instance method (FileStream class): FileStream.     (line   71)
* seekToBeginning instance method (FileStream class): FileStream.
                                                             (line   76)
* seekToEnd instance method (FileStream class): FileStream.  (line   81)
* selectColor resource (X11ListPane class): X11ListPane.     (line  197)
* selectedContent instance variable (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   56)
* selectedContent instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   91)
* selectedFont instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  298)
* selectedItemN instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  463)
* selectedItemN instance method (X11ListPane class): X11ListPane.
                                                             (line  358)
* selectedItems instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  459)
* selectedItems instance method (X11ListPane class): X11ListPane.
                                                             (line  367)
* selectedItemsN instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  467)
* selectedItemsN instance method (X11ListPane class): X11ListPane.
                                                             (line  371)
* selectedItemText instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  472)
* selectedItemText instance method (X11ListPane class): X11ListPane.
                                                             (line  376)
* selectedLine instance variable (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   60)
* selectedLine instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   95)
* selectedText instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   99)
* selectedText instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  191)
* selectExtentWith instance method (X11ListPane class): X11ListPane.
                                                             (line  385)
* selectFont instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  311)
* selectFont instance method (X11LabelPane class): X11LabelPane.
                                                             (line  333)
* selectFont instance method (X11ListPane class): X11ListPane.
                                                             (line  380)
* selectFontFromFontConfig instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  365)
* selectFontFromXLFD instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  348)
* selecting instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  159)
* selecting instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  245)
* Selecting text:                        X11TextEditorPane.  (line   51)
* selectionBackgroundColor instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  155)
* selectionColor resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  177)
* Selections, list:                      X11ListBox.         (line  167)
* selectionToText instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  341)
* selectNext instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line  102)
* selectNext instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  195)
* selectPrev instance method (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line  102)
* selectPrev instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  200)
* selectStyle instance variable (X11ListPane class): X11ListPane.
                                                             (line  256)
* selectStyle resource (X11ListPane class): X11ListPane.     (line  201)
* self keyword:                          Self and super.     (line    6)
* self keyword <1>:                      Return values.      (line  130)
* self keyword <2>:                      Method keywords.    (line   88)
* SELF_WITHOUT_RECEIVER_X exception:     Exception.          (line  118)
* sEnd instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  159)
* sEnd instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  250)
* setCallbackName instance method (Method class): Method.    (line  124)
* setContent instance method (TreeNode class): TreeNode.     (line   65)
* setGraphics method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  199)
* setMethodHandler instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  312)
* setName instance method (Key class):   Key.                (line  136)
* setReferenceCount instance method (Object class): Object.  (line  620)
* setResources instance method (X11Pane class): X11Pane.     (line  361)
* setRS instance method (String class):  String.             (line  422)
* setSigAbrt instance method (SignalHandler class): SignalHandler.
                                                             (line   89)
* setSigAbrt method (SignalHandler class): SignalHandler.    (line   13)
* setSigAlrm instance method (SignalHandler class): SignalHandler.
                                                             (line   92)
* setSigAlrm method (SignalHandler class): SignalHandler.    (line   13)
* setSigChld instance method (SignalHandler class): SignalHandler.
                                                             (line   95)
* setSigChld method (SignalHandler class): SignalHandler.    (line   13)
* setSigCont instance method (SignalHandler class): SignalHandler.
                                                             (line   98)
* setSigCont method (SignalHandler class): SignalHandler.    (line   13)
* setSigFpe instance method (SignalHandler class): SignalHandler.
                                                             (line  101)
* setSigFpe method (SignalHandler class): SignalHandler.     (line   13)
* setSigHup instance method (SignalHandler class): SignalHandler.
                                                             (line  104)
* setSigHup method (SignalHandler class): SignalHandler.     (line   13)
* setSigIll instance method (SignalHandler class): SignalHandler.
                                                             (line  107)
* setSigIll method (SignalHandler class): SignalHandler.     (line   13)
* setSigInt instance method (SignalHandler class): SignalHandler.
                                                             (line  110)
* setSigInt method (SignalHandler class): SignalHandler.     (line   13)
* setSigInt method (SignalHandler class) <1>: Method functions.
                                                             (line   44)
* setSigNo instance method (SignalHandler class): SignalHandler.
                                                             (line  113)
* setSigNo method (SignalHandler class): SignalHandler.      (line   36)
* setSigPipe instance method (SignalHandler class): SignalHandler.
                                                             (line  116)
* setSigPipe method (SignalHandler class): SignalHandler.    (line   13)
* setSigQuit instance method (SignalHandler class): SignalHandler.
                                                             (line  119)
* setSigQuit method (SignalHandler class): SignalHandler.    (line   13)
* setSigSegv instance method (SignalHandler class): SignalHandler.
                                                             (line  122)
* setSigSegv method (SignalHandler class): SignalHandler.    (line   13)
* setSigTerm instance method (SignalHandler class): SignalHandler.
                                                             (line  125)
* setSigTerm method (SignalHandler class): SignalHandler.    (line   13)
* setSigTstp instance method (SignalHandler class): SignalHandler.
                                                             (line  128)
* setSigTstp method (SignalHandler class): SignalHandler.    (line   13)
* setSigTtin instance method (SignalHandler class): SignalHandler.
                                                             (line  131)
* setSigTtin method (SignalHandler class): SignalHandler.    (line   13)
* setSigTtou instance method (SignalHandler class): SignalHandler.
                                                             (line  134)
* setSigTtou method (SignalHandler class): SignalHandler.    (line   13)
* setSigUsr1 instance method (SignalHandler class): SignalHandler.
                                                             (line  137)
* setSigUsr1 method (SignalHandler class): SignalHandler.    (line   13)
* setSigUsr2 instance method (SignalHandler class): SignalHandler.
                                                             (line  140)
* setSigUsr2 method (SignalHandler class): SignalHandler.    (line   13)
* setTty method (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  208)
* setValue instance method (AssociativeArray class): AssociativeArray.
                                                             (line  131)
* setWMTitle instance method (X11Pane class): X11Pane.       (line  374)
* Shaders, OpenGL:                       Ctalk library.      (line   86)
* Shaders, OpenGL <1>:                   Ctalk library.      (line  842)
* Shaders, OpenGL <2>:                   Ctalk library.      (line 1202)
* shadow instance variable (ANSITerminalPane class): ANSITerminalPane.
                                                             (line   91)
* shadowPen instance variable (X11ButtonPane class): X11ButtonPane.
                                                             (line  435)
* shadowPenColor resource (X11ButtonPane class): X11ButtonPane.
                                                             (line  395)
* shift instance method (List class):    List.               (line  150)
* shiftFocus instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  316)
* shiftState instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  237)
* shiftState instance variable (Win32TerminalStream class): Win32TerminalStream.
                                                             (line   35)
* shiftState instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  167)
* shiftState instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  255)
* show instance method (ANSIButtonPane class): ANSIButtonPane.
                                                             (line   54)
* show instance method (ANSILabelPane class): ANSILabelPane. (line   87)
* show instance method (ANSIMessageBoxPane class): ANSIMessageBoxPane.
                                                             (line   48)
* show instance method (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line  104)
* show instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  205)
* show instance method (ANSIScrollPane class): ANSIScrollPane.
                                                             (line  103)
* show instance method (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   91)
* show instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line  118)
* show instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  476)
* show instance method (X11ListBox class): X11ListBox.       (line  258)
* show instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  264)
* show instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  195)
* show instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  315)
* show method (ANSITextEntryPane class): ANSITextEntryPane.  (line   86)
* showManaged instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  269)
* showManaged instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  320)
* siblings instance variable (TreeNode class): TreeNode.     (line   30)
* SigHandler class:                      Method functions.   (line    6)
* SignalEvent class:                     SignalEvent.        (line    6)
* SignalHandler class:                   SignalHandler.      (line    6)
* signalProcessID method (SignalHandler class): SignalHandler.
                                                             (line  143)
* SIGNAL_EVENT_X exception:              Exception.          (line  118)
* sigName instance method (SignalHandler class): SignalHandler.
                                                             (line  146)
* sigNo (SignalHandler class):           SignalEvent.        (line   47)
* sigNum instance method (SignalHandler class): SignalHandler.
                                                             (line  150)
* sin(3) C function:                     sin.                (line    6)
* sinh(3) C function:                    sinh.               (line    6)
* size instance method (Array class):    Array.              (line   68)
* size instance method (Collection class): Collection.       (line  106)
* size instance method (FileStream class): FileStream.       (line   86)
* size instance variable (Pane class):   Pane.               (line   48)
* sizeof instance method (Object class): Object.             (line  629)
* sizeof instance method (Object class) <1>: Prefixes.       (line   23)
* sizeof operator:                       Prefixes.           (line    6)
* sizePane instance method (ANSILabelPane class): ANSILabelPane.
                                                             (line   92)
* slant instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  133)
* snprintf(3) C function:                snprintf.           (line    6)
* sock instance variable (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line   72)
* sock instance variable (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line   66)
* sock instance variable (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   30)
* socketBaseName instance variable (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   32)
* socketPath instance variable (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   36)
* socketPrefix class variable (UNIXNetworkStream class): UNIXNetworkStream.
                                                             (line   22)
* sockproc.c example program:            Object.             (line  512)
* sockRead instance method (UNIXNetworkStreamReader class): UNIXNetworkStreamReader.
                                                             (line  117)
* sockWrite instance method (UNIXNetworkStreamWriter class): UNIXNetworkStreamWriter.
                                                             (line   38)
* sortAscending instance method (List class): List.          (line  153)
* sortAscendingByName instance method (List class): List.    (line  153)
* sortDescending instance method (List class): List.         (line  153)
* sortDescendingByName instance method (List class): List.   (line  153)
* sortedDirectoryList instance method (DirectoryStream class): DirectoryStream.
                                                             (line  118)
* SortedList class:                      SortedList.         (line    6)
* spacingHint instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  259)
* spacingHint resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  172)
* spawnC instance method (Application class): Application.   (line  217)
* sphere instance method (GLUTApplication class): GLUTApplication.
                                                             (line  226)
* split instance method (String class):  String.             (line  428)
* sprintf(3) C function:                 sprintf.            (line    6)
* sprintf(3) C function <1>:             vsnprintf.          (line    6)
* sprintf(3) C function <2>:             vsprintf.           (line    6)
* sqrt(3) C function:                    sqrt.               (line    6)
* srand(3) C function:                   srand.              (line    6)
* sscanf(3) C function:                  Variable arguments. (line    6)
* sscanf(3) C function <1>:              sscanf.             (line    6)
* sStart instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  159)
* sStart instance variable (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  251)
* start instance variable (Line class):  Line.               (line   52)
* statFile instance method (FileStream class): FileStream.   (line   89)
* statStream instance method (FileStream class): FileStream. (line  100)
* stderr:                                WriteFileStream.    (line   53)
* stderr <1>:                            fscanf.             (line    8)
* stderr <2>:                            sscanf.             (line    8)
* stderrStream (WriteFileStream class):  WriteFileStream.    (line   53)
* stderrStream (WriteFileStream class) <1>: fscanf.          (line    8)
* stderrStream (WriteFileStream class) <2>: sscanf.          (line    8)
* stdin:                                 ReadFileStream.     (line   17)
* stdin <1>:                             fscanf.             (line    8)
* stdin <2>:                             sscanf.             (line    8)
* stdinStream (ReadFileStream class):    ReadFileStream.     (line   17)
* stdinStream (ReadFileStream class) <1>: fscanf.            (line    8)
* stdinStream (ReadFileStream class) <2>: sscanf.            (line    8)
* stdout:                                WriteFileStream.    (line   49)
* stdout <1>:                            fscanf.             (line    8)
* stdout <2>:                            sscanf.             (line    8)
* stdoutStream (WriteFileStream class):  WriteFileStream.    (line   49)
* stdoutStream (WriteFileStream class) <1>: fscanf.          (line    8)
* stdoutStream (WriteFileStream class) <2>: sscanf.          (line    8)
* strcasecmp(3) C function:              CFunction.          (line  129)
* strcasecmp(3) C function <1>:          strcat-strcpy.      (line    6)
* strcat(3) C function:                  CFunction.          (line  128)
* strcat(3) C function <1>:              strcat-strcpy.      (line    6)
* strchr(3) C function:                  strchr.             (line    6)
* strcmp(3) C function:                  CFunction.          (line  133)
* strcmp(3) C function <1>:              strcat-strcpy.      (line    6)
* strcoll(3) C function:                 strcoll.            (line    6)
* strcpy(3) C function:                  strcat-strcpy.      (line    6)
* Stream class:                          Stream.             (line    6)
* streamEof instance method (FileStream class): FileStream.  (line  110)
* strerror(3) C function:                strerror.           (line    5)
* strftime(3) C function:                strftime.           (line    5)
* String class:                          String.             (line    6)
* strlen(3) C function:                  CFunction.          (line  136)
* strlen(3) C function <1>:              strlen.             (line    5)
* strncasecmp(3) C function:             CFunction.          (line  142)
* strncasecmp(3) C function <1>:         strncat-strncpy.    (line    6)
* strncat(3) C function:                 CFunction.          (line  139)
* strncat(3) C function <1>:             strncat-strncpy.    (line    6)
* strncmp(3) C function:                 CFunction.          (line  145)
* strncmp(3) C function <1>:             strncat-strncpy.    (line    6)
* strncpy(3) C function:                 CFunction.          (line  148)
* strncpy(3) C function <1>:             strncat-strncpy.    (line    6)
* strpbrk(3) C function:                 strpbrk.            (line    5)
* strrchr(3) C function:                 strrchr.            (line    6)
* strspn(3) C function:                  strspn.             (line    5)
* strstr(3) C function:                  strstr.             (line    5)
* strtod(3) C function:                  strtod.             (line    5)
* strtok(3) C function:                  strtok.             (line    5)
* strtoll(3) C function:                 strtoll.            (line    5)
* strxfrm(3) C function:                 strxfrm.            (line    5)
* STR_0XHEX_TO_PTR macro:                C Macros.           (line   89)
* STR_IS_NULL macro:                     Object.             (line   26)
* STR_IS_NULL macro <1>:                 C Macros.           (line  115)
* str_is_zero_q function:                Ctalk library.      (line 2945)
* Subpane geometry:                      X11CanvasPane.      (line  181)
* subPaneButton instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  439)
* subPaneButton instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  280)
* subPaneButton instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  331)
* subPaneButtonPress instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  520)
* subPaneButtonPress instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  227)
* subPaneButtonPress instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* subPaneDestroy instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  455)
* subPaneDestroy instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  333)
* subPaneDestroy instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPaneDestroy instance method (X11TextPane class): X11TextPane.
                                                             (line  252)
* subPaneEnter instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  521)
* subPaneEnter instance method (X11LabelPane class): X11LabelPane.
                                                             (line  341)
* subPaneEnter instance method (X11ListBox class): X11ListBox.
                                                             (line  262)
* subPaneEnter instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  202)
* subPaneEnter instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* subPaneEnterNotify instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPaneExpose instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  519)
* subPaneExpose instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  459)
* subPaneExpose instance method (X11LabelPane class): X11LabelPane.
                                                             (line  337)
* subPaneExpose instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  288)
* subPaneExpose instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPaneExpose instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* subPaneExpose instance method (X11TextPane class): X11TextPane.
                                                             (line  257)
* subPaneExpose instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  339)
* subPaneFocusIn instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  526)
* subPaneFocusOut instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  526)
* subPaneGeometry instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  339)
* subPaneKbd instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* subPaneKbdInput instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  344)
* subPaneKbdInput instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  217)
* subPaneKbdInput instance method (X11TextPane class): X11TextPane.
                                                             (line  261)
* subPaneLeave instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  522)
* subPaneLeave instance method (X11LabelPane class): X11LabelPane.
                                                             (line  342)
* subPaneLeave instance method (X11ListBox class): X11ListBox.
                                                             (line  263)
* subPaneLeave instance method (X11TextEntryBox class): X11TextEntryBox.
                                                             (line  202)
* subPaneLeave instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* subPaneLeaveNotify instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPaneMotionNotify instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  232)
* subPaneMove instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  350)
* subPaneNotify instance method (X11Pane class): X11Pane.    (line  386)
* subPanePointerInput instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  463)
* subPanePointerInput instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  360)
* subPanePointerInput instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPanePointerMotion instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  359)
* subPanePointerMotion instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPanePointerMotion instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* subPaneResize instance method (X11ButtonPane class): X11ButtonPane.
                                                             (line  523)
* subPaneResize instance method (X11CanvasPane class): X11CanvasPane.
                                                             (line  470)
* subPaneResize instance method (X11LabelPane class): X11LabelPane.
                                                             (line  348)
* subPaneResize instance method (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  366)
* subPaneResize instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  226)
* subPaneResize instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  235)
* subPaneResize instance method (X11TextPane class): X11TextPane.
                                                             (line  265)
* subPaneSelectionClear instance method (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  240)
* subPaneSelectionClear instance method (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  345)
* substrcat function:                    Ctalk library.      (line 2950)
* substrcpy function:                    Ctalk library.      (line 2954)
* subString instance method (String class): String.          (line  440)
* SUCCESS_X exception:                   Exception.          (line  118)
* super keyword:                         Self and super.     (line    6)
* super keyword <1>:                     Method keywords.    (line  100)
* superclassName instance method (Object class): Object.     (line  634)
* SUPERCLASSNAME macro:                  C Macros.           (line  105)
* swapBuffers instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  692)
* Symbol class:                          Symbol.             (line    6)
* Symbol class <1>:                      C statements.       (line  122)
* symbolReference instance method (Symbol class): Symbol.    (line  126)
* SYMTOOBJ macro () function:            Ctalk library.      (line 2957)
* SYMVAL macro:                          Scoping.            (line   97)
* SYMVAL macro () function:              Ctalk library.      (line 2971)
* syncSwap instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  696)
* sysErrno (SystemErrnoException class): SystemErrnoException.
                                                             (line   19)
* sysErrnoStr instance method (String class): String.        (line  446)
* system(3) C function:                  system.             (line    6)
* SystemErrnoException class:            Exception.          (line    6)
* SystemErrnoException Class:            SystemErrnoException.
                                                             (line    6)
* tabFocus instance variable (X11PaneDispatcher class): X11PaneDispatcher.
                                                             (line  253)
* tail instance method (Collection class): Collection.       (line  110)
* tan(3) C function:                     tan.                (line    5)
* tanh(3) C function:                    tanh.               (line    5)
* targetPath instance variable (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  337)
* TCPIPNetworkStream class:              TCPIPNetworkStream. (line    6)
* TCPIPNetworkStreamReader class:        TCPIPNetworkStreamReader.
                                                             (line    6)
* TCPIPNetworkStreamWriter class:        TCPIPNetworkStreamWriter.
                                                             (line    6)
* TCPIPV6UNIXNetworkStream class:        TCPIPV6NetworkStream.
                                                             (line    6)
* TCPIPV6UNIXNetworkStreamReader class:  TCPIPV6NetworkStreamReader.
                                                             (line    6)
* TCPIPV6UNIXNetworkStreamWriter class:  TCPIPV6NetworkStreamWriter.
                                                             (line    6)
* teapot instance method (GLUTApplication class): GLUTApplication.
                                                             (line  231)
* template command:                      Templates.          (line  109)
* Templates:                             Templates.          (line    6)
* terminalHeight instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  178)
* TerminalStream class:                  TerminalStream.     (line    6)
* terminalWidth instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  184)
* termioCCFlag instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  127)
* termioCIFlag instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  127)
* termioCLFlag instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  127)
* termioCOFlag instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  127)
* tetrahedron instance method (GLUTApplication class): GLUTApplication.
                                                             (line  215)
* text (SignalHandler class):            SignalEvent.        (line   50)
* Text editing:                          Ctalk library.      (line 2750)
* Text editor example program:           X11TextEditorPane.  (line  246)
* text instance method (X11ButtonPane class): X11ButtonPane. (line  534)
* text instance method (X11LabelPane class): X11LabelPane.   (line  356)
* text instance method (X11LabelPane class) <1>: X11LabelPane.
                                                             (line  359)
* text instance variable (ANSILabelPane class): ANSILabelPane.
                                                             (line   43)
* text instance variable (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   35)
* text instance variable (X11TextPane class): X11TextPane.   (line   96)
* textColor instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  287)
* textColor resource (X11ButtonPane class): X11ButtonPane.   (line  402)
* textColor resource (X11LabelPane class): X11LabelPane.     (line  192)
* textColor resource (X11ListPane class): X11ListPane.       (line  207)
* textColor resource (X11TextEntryPane class): X11TextEntryPane.
                                                             (line  181)
* textEntry instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  483)
* textHeight instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  379)
* textLength instance variable (X11TextEditorPane class): X11TextEditorPane.
                                                             (line  171)
* textLine instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  291)
* textLines instance variable (X11LabelPane class): X11LabelPane.
                                                             (line  295)
* textLines instance variable (X11TextPane class): X11TextPane.
                                                             (line  106)
* textList instance variable (X11TextPane class): X11TextPane.
                                                             (line  101)
* textRBearing instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  384)
* textWidth instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  706)
* textWidth instance method (X11Font class): X11Font.        (line   69)
* textWidth instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  392)
* textWidthFT instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  711)
* thumb instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  155)
* thumbBackgroundColor instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  159)
* thumbColor resource (X11ListPane class): X11ListPane.      (line  211)
* thumbDimensions instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  236)
* thumbErasePen instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  163)
* thumbExt instance variable (X11ListPane class): X11ListPane.
                                                             (line  278)
* thumbHeight instance variable (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   66)
* thumbHeight instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  167)
* thumbMargin resource (X11ListPane class): X11ListPane.     (line  215)
* thumbOrg instance variable (X11ListPane class): X11ListPane.
                                                             (line  278)
* thumbPen instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  171)
* thumbPercent instance method (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  240)
* thumbPix instance variable (X11ScrollBarPane class): X11ScrollBarPane.
                                                             (line  175)
* thumbStartLine instance variable (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   70)
* Time class:                            CTime.              (line    6)
* timeout instance variable (TCPIPNetworkStreamReader class): TCPIPNetworkStreamReader.
                                                             (line   15)
* timeout instance variable (TCPIPV6NetworkStreamReader class): TCPIPV6NetworkStreamReader.
                                                             (line    9)
* timerMSec instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  258)
* timerTickHandler instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  262)
* timeZone instance variable (CalendarTime class): CalendarTime.
                                                             (line   73)
* timeZoneName instance method (CTime class): CTime.         (line   50)
* timeZoneOffset instance method (CTime class): CTime.       (line   54)
* time_t type:                           C statements.       (line  156)
* title instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  715)
* title method (ANSIWidgetPane class):   ANSIWidgetPane.     (line  116)
* titleString instance variable (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   66)
* titleText resource (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  182)
* titleText resource (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  220)
* tmpnam(3) C function:                  tmpnam.             (line    5)
* tokenize instance method (String class): String.           (line  450)
* tokenize instance method (String class) <1>: Documentation.
                                                             (line   69)
* tokenizeLine instance method (String class): String.       (line  462)
* toLower instance method (Character class): Character.      (line  217)
* tolower(3) C function:                 tolower.            (line    6)
* top instance variable (Rectangle class): Rectangle.        (line   73)
* torus instance method (GLUTApplication class): GLUTApplication.
                                                             (line  235)
* totalLines instance variable (ANSIListBoxPane class): ANSIListBoxPane.
                                                             (line   64)
* totalLines instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line   99)
* toUpper instance method (Character class): Character.      (line  221)
* toupper(3) C function:                 toupper.            (line    6)
* traceEnabled instance method (Object class): Object.       (line  639)
* TreeNode class:                        TreeNode.           (line    6)
* TRIM_CHAR macro:                       Character.          (line   36)
* TRIM_CHAR macro <1>:                   Ctalk library.      (line 3007)
* TRIM_CHAR_BUF macro:                   Ctalk library.      (line 3011)
* TRIM_LITERAL macro:                    Ctalk library.      (line 3003)
* trunc(3) C function:                   trunc.              (line    5)
* ttyDevice instance variable (ANSITerminalStream class): ANSITerminalStream.
                                                             (line  133)
* Typedefs:                              C statements.       (line  156)
* tzDst instance variable (CalendarTime class): CalendarTime.
                                                             (line   73)
* tzStd instance variable (CalendarTime class): CalendarTime.
                                                             (line   73)
* UNDEFINED_CLASS_X exception:           Exception.          (line  118)
* UNDEFINED_LABEL_X exception:           Exception.          (line  118)
* UNDEFINED_METHOD_X exception:          Exception.          (line  118)
* UNDEFINED_PARAM_CLASS_X exception:     Exception.          (line  118)
* UNDEFINED_RECEIVER_X exception:        Exception.          (line  118)
* UNDEFINED_TYPE_X exception:            Exception.          (line  118)
* underlineOnOff instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  191)
* ungetc(3) C function:                  ungetc.             (line    5)
* Unimplemented C type warning:          C statements.       (line  122)
* UNIXNetworkStream class:               UNIXNetworkStream.  (line    6)
* UNIXNetworkStreamReader class:         UNIXNetworkStreamReader.
                                                             (line    6)
* UNIXNetworkStreamWriter class:         UNIXNetworkStreamWriter.
                                                             (line    6)
* UNKNOWN_FILE_MODE_X exception:         Exception.          (line  118)
* unmap instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  196)
* unmap method (ANSIWidgetPane class):   ANSIWidgetPane.     (line  119)
* unshift instance method (List class):  List.               (line  167)
* updateLabel instance method (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  489)
* useCursor instance method (X11Pane class): X11Pane.        (line  392)
* useEntryBox instance variable (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  342)
* useEntryBox resource (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  315)
* useFTFont instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  719)
* userObjects instance variable (Method class): Method.      (line   96)
* USER_EXCEPTION_X exception:            Exception.          (line  118)
* useXFont instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  727)
* useXRender instance method (Application class): Application.
                                                             (line  247)
* useXRender instance method (X11Pane class): X11Pane.       (line  397)
* usingXRender instance Method (Application class): Application.
                                                             (line  252)
* usingXRender instance Method (X11Pane class): X11Pane.     (line  402)
* uSleep instance method (Application class): Application.   (line  244)
* utcTime instance method (CTime class): CTime.              (line   58)
* value instance method (List class):    List.               (line  171)
* value instance method (Object class):  Object.             (line  643)
* value instance method (ReadFileStream class): ReadFileStream.
                                                             (line   62)
* value instance variable (Array class): Array.              (line   34)
* value instance variable (Character class): Character.      (line   67)
* value instance variable (Float class): Float.              (line   12)
* value instance variable (Integer class): Integer.          (line   12)
* value instance variable (Key class):   Key.                (line   47)
* value instance variable (LongInteger class): LongInteger.  (line   12)
* value instance variable (Object class): Object.            (line   12)
* value instance variable (String class): String.            (line   45)
* value instance variable (Symbol class): Symbol.            (line   49)
* value method (Object class):           Method API.         (line   28)
* value method (WriteFileStream class):  WriteFileStream.    (line   77)
* varargs instance variable (Method class): Method.          (line   68)
* Variable arguments:                    Variable arguments. (line    6)
* Variable identifiers (tags):           Ctalk library.      (line 1626)
* Vector class:                          Vector.             (line    6)
* verbose instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  397)
* verbose instance variable (ObjectInspector class): ObjectInspector.
                                                             (line   25)
* verbosity instance method (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  404)
* vfprintf(3) C function:                vfprintf.           (line    6)
* vfscanf(3) C function:                 vfscanf.            (line    6)
* viewHeight instance variable (ANSILabelPane class): ANSILabelPane.
                                                             (line   46)
* viewHeight instance variable (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   70)
* viewHeight instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  107)
* viewHeight instance variable (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   58)
* viewHeight instance variable (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   41)
* viewHeight instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  162)
* viewHeight instance variable (X11TextPane class): X11TextPane.
                                                             (line  123)
* viewStartLine instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  103)
* viewStartLine instance variable (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   38)
* viewStartLine instance variable (X11TextPane class): X11TextPane.
                                                             (line  110)
* viewStartY instance variable (X11ListPane class): X11ListPane.
                                                             (line  286)
* viewWidth instance variable (ANSILabelPane class): ANSILabelPane.
                                                             (line   50)
* viewWidth instance variable (ANSIProgressBarPane class): ANSIProgressBarPane.
                                                             (line   75)
* viewWidth instance variable (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  111)
* viewWidth instance variable (ANSIScrollPane class): ANSIScrollPane.
                                                             (line   62)
* viewWidth instance variable (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   47)
* viewWidth instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  166)
* viewWidth instance variable (X11TextPane class): X11TextPane.
                                                             (line  123)
* viewXOffset instance variable (ANSITextBoxPane class): ANSITextBoxPane.
                                                             (line   51)
* viewXOffset instance variable (X11TextPane class): X11TextPane.
                                                             (line  119)
* viewXOrg instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  170)
* viewYOrg instance variable (X11CanvasPane class): X11CanvasPane.
                                                             (line  174)
* visualAlphaAccumSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  299)
* visualAlphaSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  289)
* visualAuxBuffers instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  266)
* visualBlueAccumSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  299)
* visualBlueSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  289)
* visualBufferSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  271)
* visualDepthSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  275)
* visualDoubleBuffer instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  280)
* visualGreenAccumSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  299)
* visualGreenSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  289)
* visualInfoPtr instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  284)
* visualRedAccumSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  299)
* visualRedSize instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  289)
* visualRGBA instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  309)
* visualStencilPlanes instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  315)
* visualStereo instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  320)
* vPad resource (X11TextEntryPane class): X11TextEntryPane.  (line  166)
* vprintf(3) C function:                 vprintf.            (line    6)
* vPrintOn instance method (String class): String.           (line  468)
* vscanf(3) C function:                  vscanf.             (line    6)
* vsnprintf(3) C function:               vsnprintf.          (line    6)
* vsprintf(3) C function:                vsprintf.           (line    6)
* vsscanf(3) C function:                 vsscanf.            (line    6)
* waitCursor instance variable (X11FileSelectDialog class): X11FileSelectDialog.
                                                             (line  347)
* waitStatus instance method (SignalHandler class): SignalHandler.
                                                             (line  154)
* Warnings:                              Errors.             (line    6)
* watch instance method (X11Cursor class): X11Cursor.        (line   48)
* weight instance variable (X11FreeTypeFont class): X11FreeTypeFont.
                                                             (line  133)
* while statements:                      Control structures. (line    6)
* width instance variable (Pen class):   Pen.                (line   29)
* width instance variable (X11Bitmap class): X11Bitmap.      (line   41)
* width resource (X11CheckBoxPane class): X11CheckBoxPane.   (line  177)
* Win32TerminalStream class:             Win32TerminalStream.
                                                             (line    6)
* Window geometry:                       X11PaneDispatcher.  (line   11)
* Window geometry <1>:                   Ctalk library.      (line 1073)
* windowID instance method (GLUTApplication class): GLUTApplication.
                                                             (line  240)
* winHeight instance variable (Application class): Application.
                                                             (line   28)
* winWidth instance variable (Application class): Application.
                                                             (line   28)
* winXOrg instance variable (Application class): Application.
                                                             (line   28)
* winYOrg instance variable (Application class): Application.
                                                             (line   28)
* withArg instance method (Method class): Method.            (line  116)
* withBorder instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  131)
* withBorder instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  201)
* withBorder instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line   82)
* withBorder method (ANSITerminalPane class): ANSIWidgetPane.
                                                             (line  102)
* withdraw instance method (X11MessageBoxPane class): X11MessageBoxPane.
                                                             (line  293)
* withdraw instance method (X11YesNoBoxPane class): X11YesNoBoxPane.
                                                             (line  344)
* withdraw instance variable (ANSIWidgetPane class): ANSIWidgetPane.
                                                             (line   70)
* withdraw method (ANSITextEntryPane class): ANSIWidgetPane. (line   20)
* withdraw method (ANSITextEntryPane class) <1>: ANSITextEntryPane.
                                                             (line   89)
* withPrompt method (ANSITextEntryPane class): ANSITextEntryPane.
                                                             (line   95)
* withShadow instance method (ANSIScrollingListBoxPane class): ANSIScrollingListBoxPane.
                                                             (line  148)
* withShadow instance method (ANSITerminalPane class): ANSITerminalPane.
                                                             (line  207)
* withShadow instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line  101)
* withShadow method (ANSITerminalPane class): ANSIWidgetPane.
                                                             (line  102)
* withText instance method (ANSIButtonPane class): ANSIButtonPane.
                                                             (line   64)
* withText instance method (ANSIMessageBoxPane class): ANSIMessageBoxPane.
                                                             (line   44)
* withText instance method (ANSIYesNoBoxPane class): ANSIYesNoBoxPane.
                                                             (line  124)
* writeChar method (WriteFileStream class): WriteFileStream. (line   80)
* WriteFileStream class:                 WriteFileStream.    (line    6)
* writeFormat instance method (String class): String.        (line  498)
* writeFormat method (String class):     Variable arguments. (line   48)
* writeFormat method (WriteFileStream class): WriteFileStream.
                                                             (line   83)
* writeFormat method (WriteFileStream class) <1>: Variable arguments.
                                                             (line   48)
* writeStream method (WriteFileStream class): WriteFileStream.
                                                             (line   86)
* writeText instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line  211)
* writeText instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line  114)
* writeVec instance method (TCPIPNetworkStream class): TCPIPNetworkStream.
                                                             (line  216)
* writeVec instance method (TCPIPV6NetworkStream class): TCPIPV6NetworkStream.
                                                             (line  119)
* writeVec instance method (WriteFileStream class): WriteFileStream.
                                                             (line   89)
* WRONG_NUMBER_OF_ARGUMENTS_X exception: Exception.          (line  118)
* X events:                              X11TerminalStream.  (line   64)
* X events <1>:                          InputEvent.         (line   24)
* x instance variable (Point class):     Point.              (line   22)
* X Render Extension:                    Application.        (line  247)
* X Render Extension <1>:                X11Pane.            (line  397)
* X resources:                           X11Pane.            (line  361)
* X Window System:                       C library functions.
                                                             (line   20)
* X11Bitmap class:                       X11Bitmap.          (line    6)
* X11ButtonPane class:                   X11ButtonPane.      (line    6)
* X11CanvasPane class:                   X11CanvasPane.      (line    6)
* X11CheckBoxPane class:                 X11CheckBoxPane.    (line    6)
* X11Cursor class:                       X11Cursor.          (line    6)
* X11FileSelectDialog class:             X11FileSelectDialog.
                                                             (line    6)
* X11Font class:                         X11Font.            (line    6)
* X11FreeTypeFont class:                 X11FreeTypeFont.    (line    6)
* X11LabelPane class:                    X11LabelPane.       (line    6)
* X11ListBox class:                      X11ListBox.         (line    6)
* X11ListPane class:                     X11ListPane.        (line    6)
* X11MessageBoxPane class:               X11MessageBoxPane.  (line    6)
* X11Pane class:                         X11Pane.            (line    6)
* X11PaneDispatcher class:               X11PaneDispatcher.  (line    6)
* X11ScrollBarPane class:                X11ScrollBarPane.   (line    6)
* X11TextEditorPane class:               X11TextEditorPane.  (line    6)
* X11TextEntryBox class:                 X11TextEntryBox.    (line    6)
* X11TextEntryPane class:                X11TextEntryPane.   (line    6)
* X11TextPane class:                     X11TextPane.        (line    6)
* X11YesNoBoxPane class:                 X11YesNoBoxPane.    (line    6)
* xColormap class variable (X11Pane class): X11Pane.         (line  190)
* xEventData1 instanceVariable (InputEvent class): InputEvent.
                                                             (line   28)
* xEventData2 instanceVariable (InputEvent class): InputEvent.
                                                             (line   28)
* xEventData3 instanceVariable (InputEvent class): InputEvent.
                                                             (line   28)
* xEventData4 instanceVariable (InputEvent class): InputEvent.
                                                             (line   28)
* xEventData5 instanceVariable (InputEvent class): InputEvent.
                                                             (line   28)
* xfopen () function:                    Ctalk library.      (line 3016)
* xfprintf () function:                  Ctalk library.      (line 3016)
* xfscanf () function:                   Ctalk library.      (line 3016)
* Xft configuration:                     X11FreeTypeFont.    (line   13)
* XftConfig file:                        X11FreeTypeFont.    (line   13)
* xGC instance variable (X11Bitmap class): X11Bitmap.        (line   44)
* xGC instance variable (X11Pane class): X11Pane.            (line  177)
* xID instance variable (X11Bitmap class): X11Bitmap.        (line   48)
* XLFD, determining:                     String.             (line  311)
* xLineHeight instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  323)
* xMaxCharWidth instance variable (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  328)
* xmemcpy () function:                   Ctalk library.      (line 3016)
* xmemmove () function:                  Ctalk library.      (line 3016)
* xmemset () function:                   Ctalk library.      (line 3016)
* xpmCharsPerColorFromData instance method (X11Bitmap class): X11Bitmap.
                                                             (line  272)
* xpmColorsFromData instance method (X11Bitmap class): X11Bitmap.
                                                             (line  276)
* xpmHeightFromData instance method (X11Bitmap class): X11Bitmap.
                                                             (line  280)
* xpmInfoFromData instance method (X11Bitmap class): X11Bitmap.
                                                             (line  267)
* xpmToTexture instance method (GLXCanvasPane class): GLXCanvasPane.
                                                             (line  737)
* xpmToTexture method (GLUTApplication class): GLUTApplication.
                                                             (line  246)
* xpmWidthFromData instance method (X11Bitmap class): X11Bitmap.
                                                             (line  284)
* xsprintf () function:                  Ctalk library.      (line 3016)
* xstderr () function:                   Ctalk library.      (line 3033)
* xstdin () function:                    Ctalk library.      (line 3033)
* xstdout () function:                   Ctalk library.      (line 3033)
* xstrcat () function:                   Ctalk library.      (line 3016)
* xstrcpy () function:                   Ctalk library.      (line 3016)
* xstrncat () function:                  Ctalk library.      (line 3016)
* xstrncpy () function:                  Ctalk library.      (line 3016)
* Xt object classes:                     C library functions.
                                                             (line   20)
* xterm instance method (X11Cursor class): X11Cursor.        (line   51)
* xWindowID instance variable (X11Pane class): X11Pane.      (line  183)
* y instance variable (Point class):     Point.              (line   23)
* year instance variable (CalendarTime class): CalendarTime. (line   38)
* zoneInfo instance method (CalendarTime class): CalendarTime.
                                                             (line  143)

