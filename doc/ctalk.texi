given by @var{iconID}.  The library defines the following icon IDs.

@example

ICON_NONE
ICON_STOP
ICON_CAUTION
ICON_INFO

@end example

@idxlibfn{__ctalkIgnoreSignal}
@item __ctalkIgnoreSignal (@code{int} @var{signo})
Set the handler for @var{signo} to ignore the signal.

@idxlibfn{__ctalkIncKeyRef}
@idxlibfn{__ctalkIncStringRef}
@item __ctalkIncKeyRef (@code{OBJECT *}@var{object}, @code{int} @var{inc}, @code{int} @var{op})
@item __ctalkIncStringRef (@code{OBJECT *}@var{object}, @code{int} @var{idx}, @code{int} @var{op})
Increment the reference to the value of @var{object}, a @code{String}
or @code{Key} object, or one of its subclasses, by @var{idx}.  If
@var{idx} is negative, decrements the reference to the value of the
receiver.  If the reference is before or after the start or end of the
receiver's value, further uses of the object return NULL.

The argument @var{op} can be one of the following constants, which are
defined in @flnm{ctalkdefs.h}.

@table @code
@item TAG_REF_PREFIX
Increments (or decrements) the value of the receiver immediately. 
Normally this is used for prefix @code{++} and @code{--} operators,
and also @code{+=} and @code{-=} operators.

@item TAG_REF_POSTFIX
Increments (or decrements) the value of the receiver after its
value is accessed.  Used normally for postfix @code{++} and @code{--}
operators.

@item TAG_REF_TEMP
Adds a temporary reference that is cleared after the receiver is
next read.  Normally you would use this for expressions that assign
the reference to another object, as in this example.

@example

String new str1;
String new str2;

str1 = "Hello, world!";

str2 = str1 + 3;

@end example

The object @code{str2} is assigned the calculated reference.  The
value of @code{str1} is unaffected.

@end table

@cindex Shaders, OpenGL
@cindex GLEW library
@idxlibfn{__ctalkInitGLEW}
@item __ctalkInitGLEW (@code{void})
Initialize the GLEW library.  Programs must call this function
before performing any operations that use OpenGL extensions.

@idxlibfn{__ctalkInlineMethod}
@item __ctalkInlineMethod (@code{OBJECT *}@var{rcvr}, @code{METHOD *}@var{method}, @code{int} @var{n_args}, ...)
Call a method or block of code that is an argument to another method.
The class of @var{rcvr} and the class of @var{method} do not need to
be the same.  Currently, only the @mnm{map} method uses inline method
calls.  For an example of the @code{__ctalkInlineMethod ()}'s use, see
@mnm{map} (implemented by the @code{List}, @code{Array}, and
@code{AssociativeArray} classes).  This function can (and should) be
used to implement inline method messages or code blocks when streaming
over collections.

The @var{n_args} argument specifies the number of arguments to be passed
to the target method.  Currently @code{__ctalkInlineMethod ()} supports
0 - 6 arguments.

@idxlibfn{__ctalkIntRadixToDecimalASCII}
@item __ctalkIntRadixToDecimalASCII (@code{char *}@var{intbuf})
Return a C string with the integer formatted in @var{intbuf} formatted
as a decimal (base 10) integer.

@idxlibfn{__ctalkInstallHandler}
@item __ctalkInstallHandler (@code{int} @var{signo}, @code{OBJECT *(*}@var{method_c_function}@code{)()})
Set the handler of signal @var{signo} to
@var{method_c_function}.  The prototype of
@var{method_c_function} is similar to the intermediate C prototype of
Ctalk's methods.  Signal handlers installed with this
function reset the handler to the default after each use,
except for handlers on DJGPP platforms.

@idxlibfn{__ctalkInstallPrefix}
@item __ctalkInstallPrefix (@code{void})
Returns a @code{char *} with the top-level directory where Ctalk is
installed.  Ctalk's installation uses this directory as the top-level
directory of its installation layout; for example, in relative terms,
this is where Ctalk's various components get installed:

@example

Executables:            @emph{prefixdir}@code{/bin}
Libraries:              @emph{prefixdir}@code{/lib}
Class Libraries:        @emph{prefixdir}@code{/include/ctalk}
Texinfo Manuals:        @emph{prefixdir}@code{share/info}
Manual Pages:           @emph{prefixdir}@code{/share/man}
Searchable Docs:        @emph{prefixdir}@code{/share/ctalk}

@end example

@idxlibfn{__ctalkInstanceMethodInitReturnClass}
@item __ctalkIntanceMethodInitReturnClass (@code{char *}@var{rcvrclassname}, @code{char *}@var{methodname}, @code{char *}@var{returnclassname})
Set the return class of method @var{methodname} of class
@var{rcvrclassname} to @var{returnclassname}.

@idxlibfn{__ctalkInstanceVarsFromClassObject}
@item __ctalkInstanceVarsFromClassObject (@code{OBJECT *}@var{obj})
Add the instance variables defined by @var{obj's} class object.

@idxlibfn{__ctalkInstanceVarIsCallersReceiver}
@item __ctalkInstanceVarIsCallersReceiver (@code{void})
Used by @mnm{Object: become}. Returns True if the receiver object is
an instance variable, False otherwise.

@idxlibfn{__ctalkInitFTLib}
@item __ctalkInitFTLib (@code{void})
Initialize the system's FreeType2 library.  Returns 0 if
successful, ERROR (@samp{-1}) if unsuccessful or if the
library isn't available.  This is a lower level function
that should not normally be needed by apps directly, and may
go away in the future.

@idxlibfn{__ctalkInstanceMethodParam}
@item __ctalkInstanceMethodParam (@code{char *}@var{rcvrclassname}, @code{char *}@var{methodname}, @code{OBJECT *}@var{(*selector_fn)()}, @code{char *}@var{paramclass}, @code{char *}@var{paramname}, @code{int} @var{param_is_pointer})
Define a method parameter when initializing a method. Normally the compiler
generates this call for inclusion in @code{__ctalk_init ()} for the method
initialization at run time.

@idxlibfn{__ctalkIntFromCharConstant}
@item __ctalkIntFromCharConstant (@code{char *}@var{str})
Returns the @code{int} value of the character constant @var{str}.  Recognizes
all of the escape sequences that Ctalk uses, whether the constant is enclosed
in single quotes or not.  Also recognizes backslash escape sequences and
the following control character constants.

@example

Escape Sequence    Int Value
\0                 0
\a                 1
\b                 2
\e                 27
\f                 6
\n                 10
\r                 13
\t                 9
\v                 11

@end example

The @samp{\e} escape sequence is an extension to the C language
standard.

@idxlibfn{__ctalkIsClassVariableOf}
@item __ctalkIsClassVariableOf (@code{char *}@var{class}, @code{char *}@var{varname})
Returns @code{TRUE} if @var{varname} is a class variable of
@var{class}, @code{FALSE} otherwise.

@idxlibfn{__ctalkIsCallersReceiver}
@item __ctalkIsCallersReceiver (@code{void})
Used by @mnm{Object : become} to determine if an object is the
calling method's receiver.

@idxlibfn{__ctalkIsDir}
@item __ctalkIsDir (@code{char *}@var{path})
Returns @code{TRUE} if @var{path} is a directory, @code{FALSE}
otherwise.

@idxlibfn{__ctalkIsInstanceMethod}
@item __ctalkIsInstanceMethod (@code{OBJECT *}@var{self_object}, @code{char *}@var{method_name})
@idxlibfn{__ctalkIsClassMethod}
@item __ctalkIsClassMethod (@code{OBJECT *}@var{self_object}, @code{char *}@var{method_name})
The functions return True if the method given by @var{method_name} is
an instance or class method, respectively, in @var{self_object's}
class.

@idxlibfn{__ctalkIsInstanceVariableOf}
@item __ctalkIsInstanceVariableOf (@code{char *}@var{class}, @code{char *}@var{varname})
Returns @code{TRUE} if @var{varname} is an instance variable of
@var{class}, @code{FALSE} otherwise.

@idxlibfn{__ctalkIsObject}
@item __ctalkIsObject (@code{OBJECT *}@var{o})
Return @code{TRUE} if if @var{o} is a valid object, @code{FALSE} otherwise.

@idxlibfn{__ctalkIsSubClassOf}
@item __ctalkIsSubClassOf (@code{char *}@var{classname}, @code{char *}@var{superclassname})
Return @code{TRUE} if @var{classname} is a subclass of
@var{superclassname}, @code{FALSE} otherwise.

@idxlibfn{__ctalkLastMatchLength}
@item __ctalkLastMatchLength (@code{void})
Return the length of the match from the last call to @cite{__ctalkMatchText},
below.

@idxlibfn{__ctalkLibcFnWithMethodVarArgs}
@item __ctalkLibcFnWithMethodVarArgs (@code{int (*}@var{libcfn}@code{)()}, @code{METHOD *}@var{method}, @code{char *}@var{libcfn_return_class})
Call the C library function @var{libcfn} using with its template
method @var{method}.  For C library functions that use @code{stdarg.h}
variable arguments, @var{libcfn_return_class} should be
@code{Integer.}

When evaluating an expression, the currently executing method is
contained in the current
@code{EXPR_PARSER}. @xref{__ctalkGetExprParserAt}.  

@emph{Note:} This version of Ctalk only supports
variable-argument functions on 32-bit Intel platforms.  If you try to
use a variable-argument function on another hardware platform, Ctalk
issues a warning and returns @code{NULL.}

@idxlibfn{__ctalkLogMessage}
@item __ctalkLogMessage (@code{char *, ...})
Formats the message given as the argument and writes the
message to the system's syslog facility.

@idxlibfn{__ctalkMatchAt}
@idxlibfn{__ctalkMatchIndexAt}
@item __ctalkMatchAt (@code{Integer} @var{n})
@item __ctalkMatchIndexAt (@code{Integer} @var{n})
Returns, respectively, the text, or the character index matched by the
@var{n'th} parenthesized subexpression during a previous call to
@cite{__ctalkMatchText} (i.e., a backreference).  The argument, @var{N},
is @samp{0} for the first parenthesized subexpression, @samp{1}
for the next subexpression, and so on. If the @emph{n'}th pattern didn't
match any text, returns NULL. @xref{Pattern Matching}.

@idxlibfn{__ctalkMatchText}
@item __ctalkMatchText (@code{char *}@var{pattern}, @code{char *}@var{text}, @code{long long int *}@var{offsets})
Find the occurences of @var{pattern} in @var{text}.  Returns the index
of each match in the @var{offsets} array, with the list terminated by
-1.  Returns the number of matches, or -1 if there are no matches.

@idxlibfn{__ctalkMatchPrintToks}
@item __ctalkMatchPrintToks (@code{bool} @var{printToks})
If @var{printToks} is @code{true}, then Ctalk prints the regular
expression tokens and the matching text for every regular
expression match, which can be useful for debugging regular
expressions.

@idxlibfn{__ctalkMapGLXWindow}
@item __ctalkMapGLXWindow (@code{OBJECT *}@var{glxcanvaspane_object})
Maps a @code{GLXCanvasPane's} window to the display and creates
a @code{GLXContext} for the window, and makes the GLXContext current.

Saves the GLXContext pointer in the receiver's @code{glxContextPtr}
instance variable. @xref{GLXCanvasPane}.

@idxlibfn{__ctalkMapX11Window}
@item __ctalkMapX11Window (@code{OBJECT *}@var{x11pane_object})
The X library interface of the @mnm{map} (class @code{X11Pane})
method @xref{X11Pane}. This function is a wrapper for the @cite{XMapWindow} and
@cite{XMapSubwindows} Xlib functions.

@idxlibfn{__ctalkMethodObjectMessage}
@item __ctalkMethodObjectMessage (@code{OBJECT *}@var{rcvr}, @code{OBJECT *}@var{method_instance})
Perform a method call by sending @var{rcvr} the message defined by
@var{method_instance}, which is a previously defined @code{Method}
object.  @xref{Method}.

The function returns @samp{0} on success, @samp{-1} on error.

For examples of @code{Method} object calls, @xref{methodObjectMessage}.

@idxlibfn{__ctalkMethodObjectMessage2Args}
@item __ctalkMethodObjectMessage (@code{OBJECT *}@var{rcvr}, @code{OBJECT *}@var{method_instance}, @code{OBJECT *}@var{arg1}, @code{OBJECT *}@var{arg2})
Perform a method call by sending @var{rcvr} the message defined by
@var{method_instance}, which is a previously defined @code{Method}
object.

The parameters @var{arg1} and @var{arg2} are the arguments
to the method instance.  @code{Method} objects with two arguments
are commonly used in graphical event dispatchers, particularly
in @code{X11PaneDispatcher} class.  This helps simplify the
event dispatcher methods.

The function returns @samp{0} on success, @samp{-1} on error.

For examples of @code{Method} object calls, @xref{methodObjectMessage}.

@idxlibfn{__ctalkMethodReturnClass}
@item __ctalkMethodReturnClass (@code{char *}@var{classname})
Set the return class of an instance or class method during method
initialization.

@idxlibfn{__ctalkNArgs}
@item __ctalkNArgs (@code{void})
Returns an @code{int} with the number of arguments passed to the
current method.

@idxlibfn{__ctalkNMatches}
@item __ctalkNMatches (@code{void})
Returns an @code{int} with the number of matches from the
last call to __ctalkMatchText.

@idxlibfn{__ctalkNewFTFace}
@item __ctalkNewFTFace (@code{void})
Initialize a new FreeType2 face object.  This is a lower level library
function that apps should not need to use directly, and may go away in
the future.

@anchor{__ctalkNewSignalEventInternal}
@idxlibfn{__ctalkNewSignalEventInternal}
@item __ctalkNewSignalEventInternal (@code{int} @var{signo}, @code{int} @var{pid}, @code{char *}@var{data})
Generate and queue a @code{SignalEvent} object for signal @var{signo}
with process ID @var{pid}.  The @var{data} argument is a @code{String}
object that the program can use to pass information back to the
application. 

@idxlibfn{__ctalkNonLocalArgBlkReturn}
@item __ctalkNonLocalArgBlkReturn (@code{void})
Returns a @code{bool} value of true or false to an argument
block's parent method to indicate whether the argument block
executed a @code{return} statement.

@idxlibfn{__ctalkObjValPtr}
@anchor{ctalkObjValPtr}
@item __ctalkObjValPtr (@code{OBJECT *}@var{o}, @code{void *}@var{ptr})
Set the value of the object @var{o} to @var{ptr}.

@idxlibfn{__ctalkPandResource}
@item __ctalkPaneResource (@code{OBJECT *}@var{paneObject}, @code{char *}@var{resourceName}, @code{bool} @var{warn})
Returns an @code{OBJECT *} with the value corresponding to
@var{resourceName} from @var{paneObject's} @code{resource} instance
variable.  If @var{warn} is true, displays a warning if the resource
isn't found.

@idxlibfn{__ctalkPeekExceptionTrace}
@item __ctalkPeekExceptionTrace (@code{void})
Returns a @code{char *} with the text of the most recent exception and
its stack trace.

@idxlibfn{__ctalkPeekRunTimeException}
@item __ctalkPeekRunTimeException (@code{void})
Returns a @code{char *} with the text of the most recent
exception.

@idxlibfn{__ctalkPendingException}
@item __ctalkPendingException (@code{void})
A convenience method for @code{__ctalkTrapException.}  Returns
@code{TRUE} if an exception is pending, @code{FALSE} otherwise.

@cindex __ctalkPrintExceptionTrace function
@item __ctalkPrintExceptionTrace (@code{void})
Print a walkback of the current exception's copy of the program call
stack.  

@anchor{__ctalkPrintObject}
@idxlibfn{__ctalkPrintObject}
@item __ctalkPrintObject (@code{OBJECT *}@var{object})
Print the object given by the argument, and its instance variables, to
standard output.

@idxlibfn{__ctalkPrintObjectByName}
@item __ctalkPrintObjectByName (@code{OBJECT *}@var{object_name})
Print the object named by @var{object_name} to the standard output.

@idxlibfn{__ctalkProcessWait}
@item __ctalkProcessWait (@code{int} @var{child_processid}, @code{int *}@var{child_return_value_out}, @code{int *}@var{child_term_sig_out}, @code{int *}@var{errno_out})
Checks the status of the child process specified by @var{child_processid}.

If the return value of @cite{__ctalkProcessWait} is 0, then there is
no change in the child processes' status to report.  A return value
equal to @var{child_processid} indicates that the child process has
exited.  If the return value is -1, then there was an error either in
the process that called @cite{__ctalkProcessWait}, the child process,
or both.

When @cite{__ctalkProcessWait's} return value is equal to
@var{child_processid}, the function returns the child
processes' return value in @var{child_return_value_out}.  If the
child process was terminated by an uncaught signal, the signal
number is returned in @var{child_term_sig_out}.

If the function's return value is -1, then function returns
the system's error code in @var{errno_out}.

@idxlibfn{__ctalkRaiseX11Window}
@item __ctalkRaiseX11Window (@code{OBJECT *}@var{x11pane_object})
The X library interface of the @mnm{raise} (class @code{X11Pane})
method. 

@idxlibfn{__ctalkReceiverReceiverBecome}
@item __ctalkReceiverReceiverBecome (@code{OBJECT *}@var{object})
Used by @mnm{become} (class @code{Object}) to change the
calling method's receiver to the object given as the argument.

@idxlibfn{__ctalkReferenceObject}
@item __ctalkReferenceObject (@code{OBJECT *}@var{obj}, @code{OBJECT *}@var{reffed_obj})
Sets @var{obj's} value to @var{reffed_obj's} hexadecimal address.
Also incrememts @var{reffed_obj's} reference count by 1 and adds
VAR_REF_OBJECT to its scope.

@idxlibfn{__ctalkRegisterArgBlkReturn}
@item __ctalkRegisterArgBlkReturn (@code{int} @var{return_code}, @code{OBJECT *}@var{return_object})
This function gets called when Ctalk encounters a return statement in
an argument block.  The first argument is the return code of the
argument block itself (typically an @code{Integer} object with a value
of -2, which signals the @mnm{map} method that the argument block has
requested a return from the parent function or method), and the second
argument is the object that is to be returned by the caller.  

The following example should hopefully explain how these functions
work together.  The comments indicate where the compiler inserted
these functions.

@c test/expect/examples/mapstring3.c
@example

int main () @{
  String new str;

  str = "Hello, world!";

  str map @{
    if (self == 'o') @{
      break;
    @}
    printf ("%c", self);
  @}
  printf ("\n");

  str map @{
    switch (self)
      @{
      case 'a':
      case 'e':
      case 'i':
      case 'o':
      case 'u':
	if (self == 'o') @{
	  printf ("\n");
	  return 11;          /* __ctalkRegisterArgBlkReturn inserted   */
	@}                    /* here.  The String map method, which is */
	break;                /* the argument block's direct caller,    */
      @}                      /* contains a __ctalkArgBlkSetCallerReturn*/
    (Character *)self -= 32;  /* function call.                         */
    printf ("%c", self);
  @}
  printf ("\n");
@}


/* After the argument block call, the compiler inserts a 
   construct like the following:   

    if (__ctalkNonLocalArgBlkReturn ()) @{
        return __ctalkToCInteger (__ctalkArgBlkReturnVal (), 1);
    @}

  This retrieves the argument block's return value if any,
  and returns from the calling function.
*/
@end example

The @code{String : map} method contains an example of how an argument
block can signal a return from the function or method that called it.
Refer also to the @cite{__ctalkArgBlkSetCallerReturn} and
@cite{__ctalkArgBlkClearCallerReturn} functions above.

@cindex @code{boolTrue} class variable @idxclscite{Boolean}
@cindex @code{boolFalse} class variable @idxclscite{Boolean}
@anchor{ctalkRegisterBoolReturn}
@idxlibfn{__ctalkRegisterBoolReturn}
@item __ctalkRegisterBoolReturn (@code{int} @var{t-or-f-arg})
Returns a boolean object with a true or false value depending
on the value of @var{t-or-f-arg}.  If the Boolean class variables
@code{boolTrue} or @code{boolFalse} are defined, returns one of
those objects.  Otherwise, creates a @code{Boolean} object with
the value true or false.

@idxlibfn{__ctalkRegisterCharPtrReturn}
@item __ctalkRegisterCharPtrReturn (@code{char *}@var{var})
Saves a C @code{char *} method return value to the method's
resource pool.

@idxlibfn{__ctalkRegisterCharReturn}
@item __ctalkRegisterCharPtrReturn (@code{char} @var{var})
Saves a C @code{char} method return value to the method's
resource pool.

@idxlibfn{__ctalkRegisterCTypedef}
@item (@code{char *}@var{type}, @code{char *}@var{qualifier}, @code{char *}@var{qualifier2}, @code{char *}@var{qualifier3}, @code{char *}@var{qualifier4}, @code{char *}@var{storage_class}, @code{char *}@var{name}, @code{int} @var{n_derefs}, @code{int} @var{attrs}, @code{int} @var{is_unsigned}, @code{int} @var{scope})
Register a C typedef with an application.  This function is typically
used by @cite{__ctalk_init} to register typedefs defined in C include
files and elsewhere.

@idxlibfn{__ctalkRegisterExtraObject}
@item __ctalkRegisterExtraObject (@code{OBJECT *}@var{created_object})
Save an object retrieved by a function so it may be referred to later.
This function registers each object only once and does not adjust the
object's reference count or scope.  The
@code{__ctalkRegisterExtraObject} function silently ignores request to
register global and class objects.  Refer to the entry for
@code{__ctalkRegisterUserObject,} below.

@idxlibfn{__ctalkRegisterFloatReturn}
@item __ctalkRegisterFloatReturn (@code{double} @code{d})
Registers a C @code{double} return value as a @code{Float} method
resource object.  Note that the C libraries do not automatically
convert C @code{floats} to @code{doubles}, so if you register a C
@code{float} as a method resource, you need to cast it to a
@code{double} first.

@idxlibfn{__ctalkRegisterIntReturn}
@item __ctalkRegisterIntReturn (@code{int} @var{returnval})
Registers a C @code{int} method return value as an @code{Integer}
method resource object.

@idxlibfn{__ctalkRegisterLongLongIntReturn}
@item __ctalkRegisterIntReturn (@code{long long int} @var{returnval})
Registers a C @code{long long int} method return value as a
@code{LongInteger} method resource.

@idxlibfn{__ctalkRegisterUserFunctionName}
@item __ctalkRegisterUserFunctionName (@code{char *}@var{name})
Registers the names of C functions in the program, mainly for
diagnostic messages. This function is added automatically to
@code{__ctalk_init} whenever a C function in the source code
is parsed and is called at the start of a program.

@anchor{__ctalkRegisterUserObject}
@idxlibfn{__ctalkRegisterUserObject}
@item __ctalkRegisterUserObject (@code{OBJECT *}@var{created_object})
Save objects created by a method so they may be referred to
later.  New objects registered by this function have a
reference count of 1, and have the additional scope
@code{METHOD_USER_OBJECT}.  This function is also used by
many of the @code{methodReturn*} macros, and if necessary
you can included it in a method if you need to register an
object in some non-standard manner. @xref{Returning method
values}.

Note that global objects and class objects do not need to be
registered.  In fact, registering such objects as method
resources can confuse the object's entries in their
respective dictionaries, because method resources have a
separate dictionary of their own.  If a method tries to
register a class object or global object,
@code{__ctalkRegisterUserObject} silently ignores the
request.


@cindex @mnm{copy} instance method @idxclscite{Object}
@cindex Variable identifiers (tags)
@cindex Identifiers for variables (tags)
@idxlibfn{__ctalkReplaceVarEntry}
@idxlibfn{__ctalkAliasReceiver}
@item __ctalkReplaceVarEntry (@code{VARENTRY *}@var{varentry}, @code{OBJECT *}@var{new_object})
This function has been superceded.  If you want to attach an Object to
another tag, it's only necessary to use an assignment statement.  See
@cite{__ctalkAliasReceiver ()} for an example

@idxlibfn{__ctalkRtGetMethod}
@item __ctalkRtGetMethod (@code{void})
Returns the currently executing method as a @code{METHOD *} from the
call stack, or NULL if called from within a C function.

@idxlibfn{__ctalkRtReceiver}
@item __ctalkRtReceiver (@code{OBJECT *}@var{receiver_object})
Sets the call stack's receiver to @var{receiver_object}.  The function
however, does not alter the currently executing method's receiver on
the receiver stack.

@idxlibfn{__ctalkRtReceiverObject}
@item __ctalkRtReceiverObject (@code{void})
Returns the currently executing method's receiver object from
the call stack.

@idxlibfn{__ctalkRtSaveSourceFileName}
@item __ctalkRtSaveSourceFileName (@code{char *}@var{fn})
Called during the initialization of a function or method to
store the name of its source file.

@idxlibfn{__ctalkRtGetMethodFn}
@item __ctalkRtGetMethodFn (@code{void})
Returns the C function pointer (an @code{OBJECT *(*)()} of the currently
executing method, or NULL if called from within a C function.

@idxlibfn{__ctalkRtMethodClass}
@item __ctalkRtMethodClass (@code{OBJECT *}@var{class_object})
Sets the class object of the currently executing method to @var{class_object}.

@idxlibfn{__ctalkRtMethodClassObject}
@item (@code{OBJECT *}@var{class_object})
Returns the class object of the currently executing method.

@idxlibfn{__ctalkSearchBuffer}
@item __ctalkSearchBuffer (@code{char *}@var{pattern}, @code{char *}@var{buffer}, @code{long long *}@var{offsets})
Finds all occurrences of @var{pattern} in @var{buffer}, and
returns the positions of the matches in @var{offsets}, terminated by -1.

@idxlibfn{__ctalkSelectXFontFace}
@idxlibfn{__ctalkX11UseFontBasic}
@item __ctalkSelectXFontFace (@code{void *}@var{display}, @code{int} @var{drawable_id}, @code{int} @var{gc_ptr}, @code{int} @var{face})
Selects the typeface of the currently selected font, if available,
which should have been loaded with a call like
@cite{__ctalkX11UseFontBasic}, or the equivalent calls for
FreeType fonts.

The argument, @var{face}, may be one of the following.

@example

X_FACE_REGULAR
X_FACE_BOLD
X_FACE_ITALIC
X_FACE_BOLD_ITALIC

@end example

Because these functions use shared memory to manage each X typeface's
metrics, it is generally necessary to call this function after calling
@cite{__ctalkOpenX11InputClient} in order to display multiple faces
with the correct character spacing.

@idxlibfn{__ctalkSelfPrintOn}
@item __ctalkSelfPrintOn (void)
Print the calling method's arguments to the receiver.  This 
function is called directly by @mnm{printOn} (class @code{String})
and similar methods. @xref{String}.

@idxlibfn{__ctalkSetExceptionTrace}
@item __ctalkSetExceptionTrace (@code{int} @var{val})
Enable or disable exception method traces in @mnm{handle} (class
@code{Exception}) and other methods. @xref{Exception}.

@idxlibfn{__ctalkSetObjectName}
@item __ctalkSetObjectName (@code{OBJECT *}@var{object}, @code{char *}@var{name})
Sets the name of @var{object} to @var{name}.

@idxlibfn{__ctalkSetObjectScope}
@cindex Scope of objects
@item __ctalkSetObjectScope (@code{OBJECT *}@var{object}, @code{int} @var{scope})
Set the scope of @var{object} to @var{scope}.  Note that many of
Ctalk's scopes are only used internally.  The scopes that are useful
in methods are defined in @flnm{ctalkdefs.h}.  Those definitions
are listed here along with their values. @xref{Scoping}.

@example

GLOBAL_VAR          (1 << 0)
LOCAL_VAR           (1 << 1)
CREATED_PARAM       (1 << 6)
CVAR_VAR_ALIAS_COPY (1 << 7)
VAR_REF_OBJECT      (1 << 9)
METHOD_USER_OBJECT  (1 << 10)

@end example


@idxlibfn{__ctalkSetObjectValue}
@item __ctalkSetObjectValue (@code{OBJECT *}@var{object}, @code{char *}@var{value})
This is a wrapper for @cite{__ctalkSetObjectValueVar ()}, below, which
was used in earlier versions of the class libraries.  You should use
@cite{__ctalkSetObjectValueVar ()} instead.

@anchor{ctalkSetObjectValueAddr}
@idxlibfn{__ctalkSetObjectValueAddr}
@item __ctalkSetObjectValueAddr (@code{OBJECT *}@var{object}, @code{void *}@var{mem_addr}, @code{int} @var{data_length})
Set @var{object's} value to a pointer to the memory area
@var{mem_addr}.  The object must be a member of Vector class or one of
its subclasses.  The function also sets the object @code{length} instance
variable, and adds OBJECT_VALUE_IS_MEMORY_VECTOR to its attributes, and
registers the vector * address.

@idxlibfn{__ctalkSetObjectValueBuf}
@item __ctalkSetObjectValueBuf (@code{OBJECT *}@var{object}, @code{char *}@var{buf})
Set the @code{value} instance variable to the buffer @var{buf}.
Unlike @cite{__ctalkSetObjectValue ()} and
@cite{__ctalkSetObjectValueVar (),} this function replaces the value
of @var{object} with @var{buf}, even if @var{buf} is empty, so you can
add a random-length buffer to @var{object}.

@idxlibfn{__ctalkSetObjectValueVar}
@item __ctalkSetObjectValueVar (@code{OBJECT *}@var{object}, @code{char *}@var{value})
Set the value of @var{object} to @var{value}.  If @var{value} is
@code{NULL}, sets @var{object}'s value to Ctalk's @samp{(null)} 
string.

@idxlibfn{__ctalkSetObjPtr}
@item __ctalkSetObjPtr (@code{OBJECT *}@var{object}, @code{void *}@var{p})
Save the pointer @var{p} in @var{object}.

@idxlibfn{__ctalkSetRS}
@item __ctalkSetRS (@code{char} @var{record_separator_char})
Set's the current program's record separator character, which
determines, among other things, how regular expression metacharacters
work with line endings. @xref{RecordSeparator}.

@idxlibfn{__ctalkSignalHandlerBasic}
@item __ctalkSignalHandlerBasic (@code{int} @var{signo})
Provides a basic signal handler that is more robust than the methods
in @code{SignalHandler} class, but less flexible.  Causes the
application to terminate and print a walkback trace if enabled.

Applications can use @code{__ctalkInstallHandler ()} to install the
signal handler.  In this case it works similarly to a method with a C
calling protocol.  Here is the @code{installExitHandlerBasic} method
from @code{Application} class.

@example

Application instanceMethod installExitHandlerBasic (void) @{
  __ctalkInstallHandler
    (__ctalkSystemSignalNumber ("SIGINT"),
     (OBJECT *(*)())__ctalkSignalHandlerBasic);
						    
  return NULL;
@}

@end example

@idxlibfn{__ctalkSpawn}
@idxlibfn{__ctalkExec}
@item __ctalkSpawn (@code{char *}@var{command}, @code{int} @var{restrict_io})
The @cite{__ctalkSpawn} function launches the program named
by @var{command} as a daemon process, and then returns to
the parent program and continues execution of the parent.

The function returns the process id of the child process.

The daemon process runs as a true daemon - that is, without a
controlling terminal, and without the standard input, output, or error
channels.  All communication between the daemon and the parent program
should take place with UNIX interprocess communication facilities.

If @var{restrict_io} is non-zero, the program changes the daemon
processes' working directory to @samp{/} and sets its umask to
@samp{0}.

Traditionally, a parent program exits immediately after spawning a
daemon process.  But @cite{__ctalkSpawn} maintains the session process
- the process that handles the session and I/O initialization before
it launches the daemon. The session process stays active until the
parent process exits and orphans it.  Then the session process exits
also, leaving the daemon to run completely in the background until it
is killed.  That means, while the parent program is running, there can
be @emph{three} entries in the system's process table, when viewed
with a program like @command{ps} or @command{top}.  However, it also
mimimizes the possibility of causing zombie processes should any part
of the program quit unexpectedly.

You should note that @cite{__ctalkSpawn} does not use a shell or any
shell facilities to exec the daemon process, which means the function
doesn't support I/O redirection or globbing.  If you want the parent
process to handle the child processes' I/O, refer to the
@cite{__ctalkExec} function. @xref{ctalkExec}.

@idxlibfn{__ctalkStringifyName}
@item __ctalkStringifyName (@code{OBJECT *}@var{src}, @code{OBJECT *}@var{dest})
When called by a function like @code{String} : @mnm{=}, performs some
munging of different types of @code{String} objects in order to keep the
API consistent for different types of @code{String} objects.

@idxlibfn{__ctalkSplitText}
@item __ctalkSplitText (@code{char *}@var{text}, @code{OBJECT *}@var{list_out})
Splits a text buffer into word tokens, and returns the tokens
as members of @var{list_out}.  This function preserves newlines
and spaces, and places HTML-style format tags in their own tokens.
This is used by classes like @code{X11TextPane} to split its text
buffer before displaying the wrapped text. @xref{X11TextPane}.

@idxlibfn{__ctalkStrToPtr}
@item __ctalkStrToPtr (@code{char *}@var{s})
If @var{s} is a C string formatted as a hexadecimal number 
with the format @code{0x}@var{nnnnnnn}, return a C @code{void *} 
pointer with that address.

@idxlibfn{__ctalkSysErrExceptionInternal}
@item __ctalkSysErrExceptionInternal (@code{MESSAGE *}@var{orig}, @code{int} @var{errno}, @code{char *}@var{text})
Generates an exception base on @var{errno} with the text @var{text}.
Ctalk translates @var{errno} in an exception that represents the C library's
@code{errno} error definitions.  The @var{orig} argument provides the line
and column number where the exception occurred.  If NULL, the exception
doesn't record the line and column information.

@idxlibfn{__ctalkSystemSignalName}
@item __ctalkSystemSignalName (@code{int} @var{signo})
Returns a string containing a mnemonic name like
@code{SIGINT} or @code{SIGHUP} that corresponds to
@var{signo}.  Includes the mnemonics of the common signals
defined by POSIX standards.

@idxlibfn{__ctalkSymbolReferenceByName}
@item __ctalkSymbolReferenceByName (@code{OBJECT *}@var{object})
Used in @code{Symbol : =} and similar methods returns a boolean value
of @code{true} if the object (the argument to the method normally) was
retrieved by its name, or false if the argument is the result of
pointer math or indirection.  This allows the method to determine
whether it needs to perform additional indirection or pointer math on
the argument before assigning it the the receiver.

@idxlibfn{__ctalkSystemSignalNumber}
@item __ctalkSystemSignalNumber (@code{char *}@var{signame})
For a signal named @var{signame}, return the number
system-dependent number of the signal.  The function defines
names POSIX 1990 signals on most systems.  Refer to the
system's @cite{signal(2)} (or similar) manual page for
information.

@idxlibfn{__ctalkTemplateCallerCVARCleanup}
@item __ctalkTemplateCallerCVARCleanup (@code{void})
Cleans up after a @cite{__ctalkGetTemplateCallerCVAR}
call. @xref{__ctalkGetTemplateCallerCVAR}.  Ctalk calls this function
internally; you should not need to use it in your own programs.

@idxlibfn{ARG()} (macro)
Note that this function does not know about parameter substitution.  If
you want to print an object that is an argument to a method, use the
@code{ARG(@var{n})} macro, and reference the @code{name} member.
@xref{ARG macro}.
@example
__ctalkPrintObject(ARG(0)->__o_name);
@end example

@idxlibfn{__ctalkTerminalHeight}
@item __ctalkTerminalHeight (@code{void})
@idxlibfn{__ctalkTerminalWidth}
@item __ctalkTerminalWidth (@code{void})
Returns the height and width of the terminal in character rows and
columns.  If the terminal does not support reporting its size, these
functions return 0.

@idxlibfn{__ctalkToCArrayElement}
@item __ctalkToCArrayElement (OBJECT *@var{o})
Translate the value of an @code{Integer,} @code{Character,}
@code{String,} or @code{LongInteger} array element to a @code{void *}
that points to its corresponding C data type.

@idxlibfn{__ctalkToCCharPtr}
@item __ctalkToCCharPtr (@code{OBJECT *}@var{obj}, @code{int} @var{keep})
Returns the value of @var{obj} as a C @code{char *}.  If @var{keep} is
zero, deletes @var{obj} if possible.

@idxlibfn{__ctalkToCDouble}
@item __ctalkToCDouble (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{double}.

@idxlibfn{__ctalkToCIntArrayElement}
@item __ctalkToCIntArrayElement (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{int}.  This function
has mostly been superceded by @cite{__ctalkToCInteger} (below).

@idxlibfn{__ctalkToCInteger}
@item __ctalkToCInteger (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{int}.  The value can be a
binary, octal, decimal, or hexadecimal number.  Prints a warning
message if the value is not a valid number or is out of range.

@idxlibfn{__ctalkTrapException}
@item __ctalkTrapException (@code{void})
If there is a run-time exception pending, returns the first exception
in Ctalk's internal format.  Otherwise, returns NULL.

@idxlibfn{__ctalkTrapExceptionInternal}
@item __ctalkTrapExceptionInternal (@code{void})
Similar to @cite{__ctalkTrapException}, except that
it works with the passes in the compiler as well as
the run time library.

@idxlibfn{__ctalkObjectPrintOn}
@item __ctalkObjectPrintOn (@code{OBJECT *}@var{object})
Print the calling method's arguments to the argument's @code{value}
instance variable.  This function is called directly by @mnm{printOn}
(class @code{ANSITerminalStream}) and similar
methods. @xref{ANSITerminalStream}.

@idxlibfn{__ctalkOpenX11InputClient}
@item __ctalkOpenX11InputClient (@code{OBJECT *}@var{X11TerminalStream_object})
Start a GUI program's input client in the background.  The input client
receives input events, like mouse motion and keypresses, and window events,
like resize notifications from the X display server, and sends the information
to the application program so that it can queue @code{InputEvent} objects which
the app can then process.

The argument is a @code{X11TerminalStream} object, which is normally created
with a @code{X11Pane} object, and which programs can refer to by the
@code{X11Pane} object's @code{inputStream} instance variable.  

This is the lower-level function that the @mnm{openEventStream}
(class @code{X11Pane}) method uses to begin communicating with the X
display server.  For an example, refer to the @code{X11TerminalStream}
section. @xref{X11TerminalStream}.

@idxlibfn{__ctalkUNIXSocketOpenReader}
@item __ctalkUNIXSocketOpenReader (@code{char *}@var{socketpath})
Opens a UNIX domain socket, binds the socket to the path given
by @var{socketpath}, and places the socket in listening mode.

Returns the file descriptor of the new socket on success, or -1 if an error
occured, in which case the C library sets the variable @code{errno}.

@idxlibfn{__ctalkUNIXSocketOpenWriter}
@item __ctalkUNIXSocketOpenWriter (@code{char *}@var{socketpath})
Opens a UNIX domain socket and connects to the socket given by
@var{socketpath}.

Returns the file descriptor of the new socket on success, or -1
if an error occurs, in which case the C library sets the variable
@code{errno}.

@idxlibfn{__ctalkUNIXSocketRead}
@item __ctalkUNIXSocketRead (@code{int} @var{sockfd}, @code{void *} @var{buf_out})
Reads data from the socket given by @var{sockfd}.  On success, returns
the data read in @var{buf_out} and the return value is the number of
bytes read.  On error returns -1 and the C library sets the variable
@var{errno}.

@idxlibfn{__ctalkUNIXSocketShutdown}
@item __ctalkUNIXSocketShutdown (@code{int} @var{sockfd}, @code{int} @var{how})
This function is a wrapper for the C library's @code{shutdown}
function.  Shuts down the socket identified by the @var{sockfd}
argument.  The second argument, @var{how}, can be either
@code{SHUT_RD, SHUT_WR, or SHUT_RW.}  These constants are defined in
@code{UNIXNetworkStream} class and described in the @cite{shutdown(1)}
manual page.

The function returns 0 on success, or -1 if an error occurred.

@idxlibfn{__ctalkUNIXSocketWrite}
@item __ctalkUNIXSocketWrite (@code{int} @var{sockfd}, @code{void *} @var{data}, @code{int} @var{length})
Writes @var{length} bytes of @var{data} to the socket given by @var{sockfd}.

On success returns the number of bytes written, or returns -1 on error,
in which case the C library sets the variable @code{errno}.

@idxlibfn{__ctalkUTCTime}
@item __ctalkUTCTime (@code{void})
Returns an @code{int} with the system's UTC time.  This function is
currently a wrapper for the @cite{time(2)} function.  Because
@cite{time(2)}'s argument is an @code{int *}, it can often be more
reliable to use @cite{__ctalkUTCTime} and let the library worry about
the argument's storage.  There is also a template for @cite{time(2)}
if you want to use the function directly in complex expressions.

@idxlibfn{__ctalkWarning}
@item __ctalkWarning (@code{char *}@var{fmt}, @code{...})
Prints a formatted message to the terminal.  Unlike
@cite{_warning} and other functions, does not add line numbers
or input file information to the output.

@idxlibfn{__ctalkWrapText}
@item __ctalkWrapText (@code{unsigned int} @var{drawable}, @code{unsigned int} @var{gc_ptr}, @code{OBJECT *}@var{text_list}, @code{int} @var{pane_width}, @code{int} @var{lmargin})
Formats the text in @var{text_list} to be displayed between
@var{lmargin} and @var{pane_width} (the right edge of the drawing
surface given as the first argument..  The @var{text_list} list should
have been generated by @cite{__ctalkSplitText}.  The
@cite{__ctalkWrapText} function uses the current typeface to determine
character widths.  If no font or typeface is selected, uses the
default font, ``fixed'' to format the text.

@idxlibfn{__ctalkX11CloseClient}
@item __ctalkX11CloseClient (@code{OBJECT *}@var{pane_object})
Closes the main program's connection to the X11 client and exits the
client process.

@idxlibfn{__ctalkX11CloseParentPane}
@item __ctalkX11CloseParentPane (@code{OBJECT *}@var{pane_object})
Closes and deletes an application's main X11 window, and its buffers
and other data.  Does not delete subpanes - see __ctalkCloseX11Pane ()
(above) to delete subpanes.  Applications should delete subpanes before
closing and deleting the main window.  For an example of the functions'
use, refer to the method @mnm{X11Pane : deleteAndClose}. @xref{X11Pane}.

@c /***/
@c @idxlibfn{__ctalkX11ClearBufferRectangle}
@c @item __ctalkClearBufferRectangle (@code{OBJECT *}@var{pane_object}, @code{int} @var{x}, @code{int} @var{y}, @code{int} @var{width} @var{height}) 
@c Clear a rectangle in @var{pane_object}'s pane buffer starting at
@c @var{X},@var{Y}, with width @var{width} and height @var{height}.  Note that
@c this function is being phased out in favor of
@c @cite{__ctalkX11ClearRectangleBasic}, which does not rely on
@c hard-coded instance variable names.


@idxlibfn{__ctalkX11ClearRectangleBasic}
@item __ctalkX11ClearRectangleBasic (@code{void *}@var{display}, @code{int} @var{visual_id}, @code{int} @var{gc_ptr}, @code{int} @var{x}, @code{int} @var{y}, @code{int} @var{width}, @code{int} @var{height})
Clear a rectangle of a visual type like a pixmap to the
background color.

@idxlibfn{__ctalkX11Colormap}
@item __ctalkX11Colormap (@code{void})
Returns the X resource ID of the display's default 
colormap.  It's contained in a library function because
the X headers define some of the DefaultColormap's 
dependent macros after DefaultColormap, which is not 
compatible with the ctpp preprocessor.

@idxlibfn{__ctalkX11CopyPixmapBasic}
@item __ctalkX11CopyPixmapBasic (@code{void *}@var{display}, @code{int} @var{dest_drawable_id}, @code{int} @var{dest_gc_ptr}, @code{int} @var{src_drawable_id}, @code{int} @var{src_x_org}, @code{int} @var{src_y_org}, @code{int} @var{src_width}, @code{int} @var{src_height}, @code{int} @var{dest_x_org}, @code{int} @var{dest_y_org})
Copies the drawable @var{src_drawable_id} to @var{dest_drawable_id},
with the dimensions of the source graphic given by @var{src_x_org},
@var{src_y_org}, @var{src_width}, and @var{src_height}.  The image is
drawn with its upper left-hand corner positioned at @var{dest_x_org},
@var{dest_y_org} on the destination drawable.

@cindex @mnm{copy} instance method @idxclscite{X11CanvasPane}
This function is called by @code{X11CanvasPane} : @mnm{copy}.  For
an example, refer the @code{X11CanvasPane} classes' description.
@xref{X11CanvasPane}.

@idxlibfn{__ctalkX11CreateGC}
@item __ctalkX11CreateGC (@code{void *}@var{display}, @code{int} @var{drawable})
Create a X Graphics Context and return its address as a @code{void *}.
The GC is created with the following values:

@example

foreground     white
background     black
fill_style     FillSolid
function       GXcopy
font           fixed

@end example


@idxlibfn{__ctalkX11CreatePixmap}
@item __ctalkX11CreatePixmap (@code{void *}@var{display}, @code{int} @var{x_drawable}, @code{int} @var{width}, @code{int} @var{height}, @code{int} @var{depth})
reate a X pixmap and return its X resource ID as an unsigned int.

@idxlibfn{__ctalkX11CreatePaneBuffer}
@cindex @code{paneBuffer} instance variable
@cindex @code{paneBackingStore} instance variable
@item __ctalkX11CreatePaneBuffer (@code{OBJECT *}@var{pane_object}, @code{int} @var{width}, @code{int} @var{height}, @code{int} @var{depth})
Create the buffers for a pane object's X window.  Applications
normally call this function when the pane object is created or when a
subpane is attached to a parent pane.  This function sets the @var{pane_object's}
@code{paneBuffer} and @code{paneBackingStore} instance variables.

@idxlibfn{__ctalkX11DeletePixmap}
@item __ctalkX11DeletePixmap (@code{int} @var{drawable_id})
Delete the server-side pixmap whose ID is given as the argument.

@idxlibfn{__ctalkX11Display}
@item __ctalkX11Display (@code{void})
Return a pointer to the X display, opening the display
if necessary.

@idxlibfn{__ctalkX11DisplayHeight}
@item __ctalkX11DisplayHeight (@code{void})
Returns an @code{int} with the display's height in pixels.

@idxlibfn{__ctalkX11DisplayWidth}
@item __ctalkX11DisplayWidth (@code{void})
Returns an @code{int} with the display's width in pixels.

@idxlibfn{__ctalkX11FontCursor}
@item __ctalkX11FontCursor (@code{OBJECT *}@var{cursor_object}, @code{int} @var{cursor_id})
Set @var{cursor_object}'s value to a X11 @var{cursor_id}.  Cursor ID's
are defined by the X server in the include file
@flnm{X11/cursorfont.h}.  @xref{X11Cursor}.


@idxlibfn{__ctalkX11FreeGC}
@item __ctalkX11FreeGC (@code{int} @var{gc_addr})
Free the X11 graphics context pointed to by @var{gc_addr}.  The address
of the GC is given as an @code{int} which does not require any special
handling by methods; the library function casts @var{gc_addr} to a 
@code{GC *}.

@idxlibfn{__ctalkX11FreePaneBuffer}
@item __ctalkX11FreePaneBuffer (@code{OBJECT *}@var{pane_object})
Release the server-side buffers used by @var{pane_object}.  Note that
this function is being phased out; programs should use
@cite{__ctalkX11DeletePixmap}, which does not rely on hard-coded
instance variable names.

@idxlibfn{__ctalkX11FreeSizeHints}
@item __ctalkX11FreeSizeHints (@code{void})
Frees the data allocated by @cite{__ctalkX11SetSizeHints ()}, below.

@idxlibfn{__ctalkX11GetSizeHints}
@item __ctalkX11GetSizeHints (@code{int} @var{win_id}, @code{int *}@var{x_org_return}, @code{int *}@var{y_org_return}, @code{int *}@var{width_return}, @code{int *}@var{height_return}, @code{int *}@var{win_gravity_return}, @code{int *}@var{flags_return})
Get the actual size and placement of the window, as reported by the X
server, after the window is created, normally with @cite{__ctalkCreateX11MainWindow ()}.

@idxlibfn{__ctalkX11InputClient}
@item __ctalkX11InputClient (@code{OBJECT *}@var{streamobject} @code{int} @var{fd})
The @code{X11TerminalStream} input client.  This function is not used
directly by any method but is a process of the
@cite{__ctalkOpenX11InputClient} function, above.

@idxlibfn{__ctalkX11MakeEvent}
@item __ctalkX11MakeEvent (@code{OBJECT *}@var{eventobject_value_var}, @code{OBJECT *}inputqueue)
Encapsulates much of the function of the @mnm{X11TerminalStream :
queueInput} method: receives the data for an X event from the X11 input client and saves it in an @code{InputEvent} object, then queues the @code{InputEvent} object in the @code{X11TerminalStream}'s @code{inputQueue}.

@idxlibfn{__ctalkX11MoveWindow}
@item __ctalkX11MoveWindow (@code{OBJECT *}@var{pane_object}, @code{int} @var{x}, @code{int} @var{y})
Move @var{pane_object}'s window so that its origin is at @var{X},@var{Y}.

@idxlibfn{__ctalkX11OpenInputClient}
@item __ctalkX11OpenInputClient (@code{OBJECT *}@var{streamobject})
The library interface of the @code{X11TerminalStream} class's input
client. This function is called by @mnm{openInputClient} (class
@code{X11TerminalStream}).  The @var{streamobject} argument is a
@code{X11TerminalStream} object, generally the stream created by
@mnm{new} (class @code{X11Pane}).  @xref{X11TerminalStream}.

@idxlibfn{__ctalkX11ParseGeometry}
@item __ctalkX11ParseGeometry (@code{char *}@var{geomString}, @code{int*} @var{x}, @code{int*} @var{y}, @code{int*} @var{y}, @code{int*} @var{width}, @code{int*} @var{height})
Parses a X11 geometry string and returns the values specified in the @var{x}, @var{y}, @var{width}, or @var{height} variables.  If the geometry string does not specify one of these values, sets the corresponding variable to zero.

For information about the format of a X11 geometry specification, refer to the
@cite{XParseGeometry(3)} manual page.

@idxlibfn{__ctalkX11PaneDrawCircleBasic}
@item __ctalkX11PaneDrawCircleBasic (@code{void *}@var{display}, @code{int} @var{window_id}, @code{int} @var{gc}, @code{int} @var{center_x}, @code{int} @var{center_y}, @code{int} @var{radius}, @code{int} @var{fill}, @code{int} @var{pen_width}, @code{int} @var{alpha}, @code{char *}@var{fg_color_name}, @code{char *} @var{bg_color_name})
Draws a circle centered at @var{center_x},@var{center_y} with radius @var{radius}. The dimensions are given in pixels.  If @var{filled} is true, then the function
draws a filled circle; otherwise, the circle's edge has the width @var{pen_width}.

This function is a synonym for @cite{__ctalkGUIPaneDrawCircleBasic}.

@idxlibfn{__ctalkX11PanePutStr}
@item __ctalkX11PanePutStr (@code{OBJECT *}@var{pane_object}, @code{int} @var{x}, @code{int} @var{y}, @code{char *}@var{str})
Displays @var{str} at window coordinates @var{x},@var{y} on
@var{pane_object}'s drawable in the pane's current font.  If
@code{pane_object} is buffered, writes the string to the pane's
buffers, and the string is displayed at the next @mnm{refresh} method
call.  

Note that this method is slowly being superceded because it relies on
instance variable names that are defined in several class libraries.
If the application uses different drawables than @var{pane_object}'s
window surface or its buffers, use @cite{__ctalkX11PanePutStrBasic}
instead.

@anchor{ctalkX11SetSizeHints}
@idxlibfn{__ctalkX11SetSizeHints}
@item __ctalkX11SetSizeHints (@code{int} @var{x}, @code{int} @var{y}, @code{int}p @var{width}, @code{int} @var{height}, @code{int} @var{geom_flags})
Set the window size hints based on the window dimensions set by the
application.  The @var{geom_flags} argument has the format provided by
the @cite{__ctalkX11ParseGeometry ()} function, above.  Normally this 
function is called by a @code{X11Pane*} class when initializing a window.

If an application calls this function, it must also call
@cite{__ctalkX11FreeSizeHints ()}, above.

@idxlibfn{__ctalkX11ResizePaneBuffer}
@item __ctalkX11ResizePaneBuffer (@code{OBJECT *}@var{pane_object}, @code{int} @var{width}, @code{int} @var{height})
Resize @var{pane_object}'s buffers to width @var{width} and height
@var{height}.  New programs should use @cite{__ctalkX11ResizePixmap},
which does not rely on hard-coded instance variable names.

@idxlibfn{__ctalkX11ResizePixmap}
@item __ctalkX11ResizePixmap (@code{void *}@var{display}, @code{int}, @var{parent_drawable_id}, @code{int} @var{self_xid}, @code{int} @var{gc}, @code{int} @var{old_width}, @code{int} @var{old_height}, @code{int} @var{new_width}, @code{int} @var{new_height}, @code{int} @var{depth}, @code{int *}@var{new_pixmap_return})
Create a new Pixmap with the dimensions @var{new_width} and
@var{new_height} that contains the contents of the original
pixmap.  Returns the X ID of the new pixmap in @var{new_pixmap_return}.

@idxlibfn{__ctalkX11ResizeWindow}
@item __ctalkX11ResizeWindow (@code{OBJECT *}@var{pane_object}, @code{int} @var{width}, @code{int} @var{height}, @code{int} @var{depth})
Resize a pane object's X window.  Returns @samp{1} on success,
@samp{0} if the window's new size is <= its current size, and
@samp{-1} if there is an error.

@idxlibfn{__ctalkX11PaneClearRectangle}
@item __ctalkX11PaneClearRectangle (@code{OBJECT *}@var{pane_object}, @code{int}  @var{x}, @code{int} @var{y}, @code{int} @var{width}, @code{int} @var{height})
Clears a rectangle in @var{pane_object}'s window.  Note that this
function is deprecated - it relies on the Pane object having specific
instance variables.  New programs should use
@cite{__ctalkX11PaneClearRectangleBasic} instead.

@idxlibfn{__ctalkX11PaneDrawLine}
@item __ctalkX11PaneDrawLine (@code{OBJECT *}@var{pane_object}, @code{OBJECT *}@var{line_object}, @code{OBJECT *}@var{pen_object})
Draw a line on the drawable identified by @var{pane_object}
@xref{X11Pane}, with the endpoints given by @var{line_object}
@xref{Line}, with the line width and color defined in @var{pen_object}
@xref{Pen}.  This function is a synonym for
@cite{__ctalkGUIPaneDrawLine} on systems with a X Window System display.

@idxlibfn{__ctalkX11PaneDrawLineBasic}
@item __ctalkX11PaneDrawLineBasic (@code{int} @var{drawable_id}, @code{int} @var{gc_ptr}, @code{int} @var{x_start}, @code{int} @var{y_start}, @code{int} @var{x_end}, @code{int} @var{y_end}, @code{int} @var{pen_width}, @code{int} @var{alpha}, @code{char *}@var{pen_color})
Draw a line between the points (x_start,y_start) and (x_end, y_end)
with the color, and transparency using the drawable ID, graphics
context, and pen color, width, and transparency given as arguments.

@idxlibfn{__ctalkX11PaneDrawPoint}
@item __ctalkX11PaneDrawPoint (@code{OBJECT *}@var{pane_object}, @code{OBJECT *}@code{point_object}, @code{OBJECT *}@var{pen_object})
Draw a point on the drawable id given in @var{pane_object}
@xref{X11Pane}, with the location given by @var{point_object}
@xref{Point}, with the radius and color given by @var{pen_object}
@xref{Pen}.  This function is a synonym for @cite{__ctalkGUIPaneDrawPoint}
on systems that use the X Window system.

@idxlibfn{__ctalkX11PaneDrawPointBasic}
@item __ctalkX11PaneDrawPointBasic (@code{void *}@var{display}, @code{int} @var{drawable_id}, @code{int} @var{gc_ptr}, @code{int} @var{x}, @code{int} @var{y}, @code{int} @var{pen_width}, @code{int} @var{alpha}, @code{char *}@var{pen_color})
Draw a point of the size, position, color, and transparency using the
drawable ID, graphics context, and Pen color, transparency, and width
given as arguments.

@idxlibfn{__ctalkX11PaneClearWindow}
@item __ctalkX11PaneClearWindow (@code{OBJECT *}@var{pane_object})
Clears @var{pane_object}'s window.  Note that this function is
deprecated - it relies on the Pane object having specific instance
variables.  New programs should use 

@idxlibfn{__ctalkX11PaneDrawRectangle}
@item __ctalkX11PaneDrawRectangle (@code{OBJECT *}@var{pane_object}, @code{OBJECT *}@var{rectangle_object}, @code{OBJECT *}@var{pen_object}, @code{Integer} @var{fill})
Draw a rectangle on the drawable identified by @var{pane_object}
@xref{X11Pane}, with the dimensions given by @var{rectangle_object}
@xref{Rectangle}, and with the line width and color given by
@var{pen_object} @xref{Pen}.  If @var{fill} is true, draw a filled
rectangle.

@idxlibfn{__ctalkX11PanePutStrBasic}
@item __ctalkX11PanePutStrBasic (@code{void *}@var{display}, @code{int} @var{visual_id},@code{int} @var{gc_ptr}, @code{int} @var{x}, @code{int} @var{y}, @code{char *}@var{text})
Write the string @var{text} on the drawable named by @var{visual_id} at
@var{X},@var{Y} using the graphics context pointed to by @var{gc_ptr}.  If the
drawable is a @code{X11CanvasPane} buffer, the text will not be visible
until the next call to the pane's @mnm{refresh} method.

@idxlibfn{__ctalkX11PaneRefresh}
@item __ctalkX11PaneRefresh (@code{OBJECT *}@var{pane_object}, @code{int} @var{src_x_org}, @code{int} @var{src_y_org}, @code{int} @var{src_width}, @code{int} @var{src_height}, @code{int} @var{dest_x_org}, @code{int} @var{dest_y_org})
If @var{pane_object} is a buffered pane, copy the contents of the pane
buffer(s) within the rectangle given by @var{src_x_org}, @var{src_y_org},
@var{src_width}, @var{src_height} to the visible window at @var{dest_x},
@var{dest_y}.

@idxlibfn{__ctalkX11QueryFont}
@item __ctalkX11QueryFont (@code{OBJECT *}@var{font_object}, @code{char *}@var{xlfd}) 
Fills in @var{font_object}'s @samp{ascent}, @samp{descent},
@samp{maxWidth}, @samp{height}, and @samp{fontDesc} instance variables
with the font metrics returned by the X server for the font given by
@var{xlfd}.

@idxlibfn{__ctalkX11SetBackground}
@item __ctalkX11SetBackground (@code{OBJECT *}@var{pane_object}, @code{char *}@var{color_name})
Set @var{pane_object}'s background color to @var{color_name}.  This
function is being phased out because it uses named instance variables
of @var{pane_object}.  Programs should use
@cite{__ctalkX11SetBackgroundBasic ()}, below, instead.

@idxlibfn{__ctalkX11SetBackgroundBasic}
@item __ctalkX11SetBackgroundBasic (@code{void *}@var{display}, @code{int} @code{visual_xid}, @code{int} @var{gc_ptr}, @code{char *}@var{color})
Sets the background color of any class with a X11 visual and 
graphics context.

@idxlibfn{__ctalkX11SetForegroundBasic}
@item __ctalkX11SetForegroundBasic (@code{void *}@var{display}, @code{int} @code{visual_xid}, @code{int} @var{gc_ptr}, @code{char *}@var{color})
Sets the foreground color of any class with a X11 drawable and 
graphics context.

@idxlibfn{__ctalkX11SetResource}
@item __ctalkX11SetResource (@code{void *}@var{display}, @code{int} @var{drawable_id}, @code{char *}@var{resource_name}, @code{char *}@var{resource_value}) 
Sets the X11 resource @var{resource_name} to @var{resource_value} for
the drawable identified by @var{drawable_id}.

@idxlibfn{__ctalkX11SetWMNameProp}
@item __ctalkX11SetWMNameProp (@code{OBJECT *}@var{pane_object}, @code{char *}@var{name})
Sets the WMName property @var{pane_object}'s window to @var{name}.
This is the window property that window managers use to set the window
frame's title.

@idxlibfn{__ctalkX11UseCursor}
@item __ctalkX11UseCursor (@code{OBJECT *}@var{pane_object}, @code{OBJECT *}@var{cursor_object})
Sets the X11 cursor of @var{pane_object} to
@var{cursor_object}. @xref{X11Cursor}.

@idxlibfn{__ctalkX11UseXRender}
@item __ctalkX11UseXRender (@code{bool} @var{b})
If @var{b} is true, draw using the X Render entension if it
is available.  If @var{b} is false, use Xlib for drawing
even if X Render is available.

@idxlibfn{__ctalkX11UseFontBasic}
@item __ctalkX11UseFontBasic (@code{void *}@var{display}, @code{int} @var{drawable_id}, @code{int} @var{gc_ptr}, @code{char *}@var{font_desc})
Sets the font of the graphics context @var{gc_ptr} and
drawable @var{drawable_id} for further string printing
operations.  See use in @code{X11Bitmap} class, where the
GC pointer, which is an opaque object, is encoded as an
@code{int}, in order to avoid confusion with @code{OBJECT *'s}.

@idxlibfn{__ctalkX11UsingXRender}
@item __ctalkX11UsingXRender (@code{void})
Returns a boolean value of True if the program is using the X Render
extension for drawing, False otherwise.  To use the X Render
extension, the extension and its supporting libraries must be
available when the Ctalk libraries are built, and the program has not
changed the default setting, normally via @cite{__ctalkX11UseRender},
above.

@idxlibfn{__ctalkX11XPMFromData}
@item __ctalkX11XPMFromData (@code{void *}@var{display}, @code{int} @var{drawable_id}, @code{int} @var{gc_ptr}, @code{int} @var{x_org}, @code{int} @var{y_org}, @code{char **}@var{xpm_data})
Draw a X pixmap at the x,y position on the drawable named by
@var{drawable_id}.  The @var{xpm_data} argument is the declaration of
the data given in a XPM file, and has the C data type @code{char **}.

@idxlibfn{__ctalkX11XPMInfo}
@item __ctalkX11XPMInfo (@code{void *}@var{display}, @code{char **}@var{xpm_data}, @code{int *}@var{width_ret}, @code{int *}@var{height_ret}, @code{int *}@var{n_colors_ret}, @code{int *}@var{chars_per_color_ret})
Returns the width, height, number of colors, and characters per color of the
XPM data referred to by @var{xpm_data}

@idxlibfn{__ctalkXPMToGLTexture}
@idxlibfn{__ctalkXPMToGLXTexture}
@item __ctalkXPMToGLTexture (@code{char **}@var{xpm_data}, @code{unsigned short int} @var{alpha}, @code{int *}@var{width_out}, @code{int *}@var{height_out}, @code{void **}@var{texel_data_out})
@item __ctalkXPMToGLXTexture (@code{char **}@var{xpm_data}, @code{unsigned short int} @var{alpha}, @code{int *}@var{width_out}, @code{int *}@var{height_out}, @code{void **}@var{texel_data_out})
Read the XPM data pointed to by @var{xpm_data}, and return the OpenGL
texture data pointed to by @var{texel_data_out}.  

The @var{alpha} parameter defines the texture data transparency
and should be in the range 0 - 0xffff.  The alpha channel's effect
may not be apparent in the image that is displayed, because OpenGL
has its own set of functions to perform texture blending.

For Mesa OpenGL implementations, like those found on Linux systems,
textures have the format GL_RGBA and the data type
GL_UNSIGNED_INT_8_8_8_8.  To define a basic 2-dimensional texture to
the OpenGL API, use an OpenGL function like this.

@example

glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, my_width, my_height, 0,
              GL_RGBA, GL_UNSIGNED_INT_8_8_8_8, my_texel_data);

@end example

Apple OpenGL implmentations use a different internal format, so a
program would define a texture from the @cite{__ctalkXPMToGLXTexture}
function's output like this.

@example

glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, my_width, my_height, 0,
              GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, my_texel_data);

@end example

Note that the function does not make any changes for 1-dimensional or
3-dimensional textures, nor for textures that might be rendered as
mipmaps.  The specific texture parameters depend on the nature of the
texture and the surface that it's applied to... in most cases, though
OpenGL works best with a XPM that has a geometry that is an even
multiple of 2; e.g., 512x512 or 1024x1024 pixels.

Both functions are similar, and generic enough to work with any
OpenGL toolkit - the main difference is that either of the functions
can be implemented for either a GLUT or GLX development environemnt
independently, and that the GLX version is compatible with 64-bit
machines.


@idxlibfn{__ctalkXftAscent}
@item __ctalkXftAscent (@code{void})
Returns an @code{int} with the currently selected font's height
in pixels above the baseline.

@idxlibfn{__ctalkXftDescent}
@item __ctalkXftAscent (@code{void})
Returns an @code{int} with the currently selected font's height
in pixels below the baseline.

@idxlibfn{__ctalkXftFgRed}
@idxlibfn{__ctalkXftFgGreen}
@idxlibfn{__ctalkXftFgBlue}
@idxlibfn{__ctalkXftFgAlpha}
@item __ctalkXftFgRed (@code{void})
@item __ctalkXftFgGreen (@code{void})
@item __ctalkXftFgBlue (@code{void})
@item __ctalkXftFgAlpha (@code{void})
Returns @code{int} values 0-0xffff for the selected font's red,
green, blue, and alpha values.

@idxlibfn{__ctalkXftRed}
@idxlibfn{__ctalkXftGreen}
@idxlibfn{__ctalkXftBlue}
@idxlibfn{__ctalkXftAlpha}
@item __ctalkXftRed (@code{unsigned short} @var{val})
@item __ctalkXftGreen (@code{unsigned short} @var{val})
@item __ctalkXftBlue (@code{unsigned short} @var{val})
@item __ctalkXftAlpha (@code{unsigned short} @var{val})
Set the current Xft font's foreground color channels individually.
The value of the argument must be between 0 and 65535 (0xffff hex).

@idxlibfn{__ctalkXftFontPathFirst}
@item __ctalkXftFontPathFirst (@code{char *}@var{pattern})
Return the path of the first font file that matches @var{pattern}.
If pattern is @samp{*} or an empty string (@samp{""}), return
the first path of all the fonts that are available to the library.

@idxlibfn{__ctalkXftFontPathNext}
@item __ctalkXftFontPathNext (@code{void})
Return a string containing the path of the next font file that matches
the pattern given to @cite{__ctalkXftFontPathFirst ()}, above.

@idxlibfn{__ctalkXftSelectedFontDescriptor}
@item __ctalkXftSelectedFontDescriptor (@code{void})
Return the font descriptor of the selected font as a @code{char *}.

@idxlibfn{__ctalkXftGetStringDimensions}
@item __ctalkXftGetStringDimensions (@code{char *}@var{str}, @code{int *}@var{x}, @code{int *}@var{y}, @code{int *}@var{width}, @code{int *}@var{height})
Return the x and y origin, and width and height of @var{str} in the
currently selected FreeType font.  Because the dimensions are
absolute, @var{x} and @var{y} are normally 0.  If the Xft library is
not initialized or not available, the function returns 0 for all of
the dimensions.

@idxlibfn{__ctalkXftHeight}
@item __ctalkXftHeight (@code{void})
Returns an @code{int} with the font's height above and below
the baseline in pixels, and including any additional vertical
spacing.

@anchor{ctalkXftInitLib}
@idxlibfn{__ctalkXftInitLib}
@item __ctalkXftInitLib (@code{void})
Initializes the Freetype outline font library.  If the system is not
configured to use outline fonts @xref{X11FreeTypeFont}, then the
function prints a message and exits the program.

@idxlibfn{__ctalkXftInitialized}
@item __ctalkXftInitialized (@code{void})
Returns TRUE if the FreeType font library is available and
initialized, FALSE otherwise.

@idxlibfn{__ctalkXftListFontsFirst}
@item __ctalkXftListFontsFirst (@code{char *}@var{xftpattern})
Initializes the FreeType library to list fonts and returns a
@code{char *} that contains the first font descriptor that contains
the string @var{xftpattern}.  If @var{xftpattern} is emtpy (@samp{""})
or @samp{*}, then the function returns the first font, and the
following calls to @cite{__ctalkXftListFontsNext ()} match all of the
fonts available to the FreeType library.

@idxlibfn{__ctalkXftListFontsNext}
@item __ctalkXftListFontsNext (@code{void})
Returns a @code{char *} with the next matching font descriptor of
a font listing initialized by @cite{__ctalkXftListFontsFirst ()}.

@idxlibfn{__ctalkXftListFontsEnd}
@item __ctalkXftListFontsNext (@code{void})
Cleans up after a series of list fonts function calls.

@idxlibfn{__ctalkXftMajorVersion}
@item __ctalkXftMajorVersion (@code{void})
Returns an @code{int} with the Xft library's major version number.

@idxlibfn{__ctalkXftMaxAdvance}
@item __ctalkXftMaxAdvance (@code{void})
Returns an @code{int} with the maximum horizontal dimension in pixels
of any of the selected font's characters.

@idxlibfn{__ctalkXftMinorVersion}
@item __ctalkXftMinorVersion (@code{void})
Returns an @code{int} with the Xft library's minor version number.

@idxlibfn{__ctalkXftQualifyFontName}
@item __ctalkXftQualifyFontName (@code{char *}@var{pattern})
Return the qualified font name string for @var{pattern}.

@idxlibfn{__ctalkXftRevision}
@item __ctalkXftRevision (@code{void})
Returns an @code{int} with the Xft library's revision number.

@idxlibfn{__ctalkXftSelectedFamily}
@item __ctalkXftSelectedFamily (@code{void})
Returns a @code{char *} string that contains family of the selected
font.

@idxlibfn{__ctalkXftSelectedPointSize}
@item __ctalkXftSelectedPointSize (@code{void})
Return the point size of the selected font as a C @var{double}.

@idxlibfn{__ctalkXftSelectedSlant}
@item __ctalkXftSelectedSlant (@code{void})
Returns an @code{int} that contains slant of the selected
font.

@idxlibfn{__ctalkXftSelectedWeight}
@item __ctalkXftSelectedSlant (@code{void})
Returns an @code{int} that contains slant of the selected
font.

@idxlibfn{__ctalkXftSelectedFontDescriptor}
@item __ctalkXftSelectedFontDescriptor (@code{void})
Returns a @code{char *} string that contains the descriptor of the
selected font.

@idxlibfn{__ctalkXftSelectedFontPath}
@item __ctalkXftSelectedFontDescriptor (@code{void})
Returns a @code{char *} string that contains the file path descriptor
of the selected font.

@idxlibfn{__ctalkXftSelectFont}
@item __ctalkXftSelectFont (@code{char *}@var{family}, @code{int} @var{slant}, @code{int} @var{weight}, @code{int} @var{dpi}, @code{double} @var{point_size})
Selects the FreeType font that matches the arguments.  Returns 0 if
successful in matching the font given by the arguments.  If no
matching font is found, the current font does not change, and the
method returns -1. The @mnm{selectFont} method (class
@code{X11FreeTypeFont} contains a description of the parameters
recognized by the function.  @xref{X11FreeTypeFont-selectFont}.

@idxlibfn{__ctalkXftSelectFontFromXLFD}
@item __ctalkXftSelectFontFromXLFD (@code{char *}@var{xlfd})
Selects fonts in the FreeType font library using a XLFD specification.
When selecting outline fonts: the libraries use the fields: family,
weight, slant, dpi-x, and pixel height. An example XLFD would be the
following.

@example

-*-Nimbus Sans L-medium-r-*-*-12-72-*-*-*-*-*-*

@end example

Note that the function does not translate between bitmap and outline
font families - the font libraries pick the closest match to the font
metrics given in the XLFD, regardless of type style.

Also, the outline font libraries use a single dpi metric for both the
vertical and horizontal resolution, so only the @samp{resx} field of
the XLFD is actually used.

@idxlibfn{__ctalkXftSetForeground}
@item __ctalkXftSetForegrounc (@code{int} @var{red}, @code{int} @var{green}, @code{int} @var{blue}, @code{int} @var{alpha})
Sets the red, green, blue, and alpha values for the selected font.  The
values are @code{ints} and have a range of 0-0xffff.

@idxlibfn{__ctalkXftSetForgroundFromNamedColor}
@item __ctalkXftSetForegroundFromNamedColor (@code{String} @var{colorName})
Sets the selected outline font's red, green, and blue values from
the named X11 color given as the argument.

@idxlibfn{__ctalkXftVersion}
@item __ctalkXftVersion (@code{void})
Returns an @code{int} with the Xft library's version number,
which is (__ctalkXftMajorVersion () * 10000) + (__ctalkXftMinorVersion * 100) +
__ctalkXftRevsion ().

@idxlibfn{__ctalk_arg}
@item __ctalk_arg (@code{char *}@var{rcvr}, @code{char *}@var{method},@code{void *}@var{arg})
Define an argument for the following @code{__ctalk_method ()} call.  

@idxlibfn{__ctalk_arg_cleanup}
@item __ctalk_arg_cleanup (@code{OBJECT *}@var{result})
Remove an argument used by the previous method call.  If used within
an expression, then @var{result}, the return object of the previous
method call, may not be NULL.  If used after a @code{__ctalk_method
()} call, then @var{result} may be NULL.

@idxlibfn{__ctalk_arg_internal}
@item __ctalk_arg_internal (@code{int} @var{n_th_arg})
Return the @var{n_th_arg} that method was called with, as an
@code{OBJECT *.}  The first argument's index on the stack is 0 within
the caller's argument frame, and the last argument is @var{method ->
n_params} - 1.

@idxlibfn{__ctalk_arg_value_internal}
@item __ctalk_arg_value_internal (@code{int} @var{n_th_arg})
Return the value object of the @var{n_th_arg} that method was called
with, as an @code{OBJECT *,} if available.  If it isn't (for example, if 
the value instance variable is used as an argument alone, and not the parent
object), then the function returns the argument object.

As with @code{__ctalk_arg_internal (),} The first argument's index on
the stack is 0 within the caller's argument frame, and the last
argument is @var{method -> n_params} - 1.

@idxlibfn{__ctalk_arg_pop}
@idxlibfn{__ctalk_arg_pop_deref}
@item __ctalk_arg_pop (@code{void})
@item __ctalk_arg_pop_deref (@code{void})
Removes and returns the last object pushed onto the argument stack.
@cite{__ctalk_arg_pop_deref} also decreases the object's reference
count by one.

@idxlibfn{__ctalk_class_initialize}
@item __ctalk_class_initialize (@code{void})
Called by __ctalk_init () to perform any neeeded initialization the
before any classes are defined.

@idxlibfn{__ctalk_define_class}
@item __ctalk_define_class (@code{ARG**}@var{args})
The primitive method that Ctalk executes when it encounters the
@samp{class} keyword.

@idxlibfn{__ctalk_dictionary_add}
@item __ctalk_dictionary_add (@code{OBJECT*}@var{object})
Add an object to the Ctalk global dictionary, or, if the object
is a class object, to the class library.

@idxlibfn{__ctalk_exitFn}
@item __ctalk_exitFn (@code{int} @var{app_exit})
Called just before a @code{return} statement when returning from a C
function.  If the function is @code{main}, then @var{app_exit} should
be non-zero, to indicate that the program is finished, and to clean up
the global objects and the class library.

@idxlibfn{__ctalk_initFn}
@item __ctalk_initFn (@code{void})
Called at the beginning of a function to register the function's
name.

@idxlibfn{__ctalk_initLocalObjects}
@item __ctalk_initLocalObjects (@code{void})
Called during method or function initialization to delete
old local objects before creating new objects.

@idxlibfn{__ctalk_get_object}
@item __ctalk_get_object (@code{char *}@var{name}, @code{char *}@var{classname})
Retrieves the object @var{name}.  If @var{classname} is non-null,
retrieves the object by name and class.

@idxlibfn{__ctalk_init}
@item __ctalk_init (@code{char *}@var{program_name})
Initialize the Ctalk class libraries when the program starts.  The argument,
@var{program_name} is normally @code{argv[0]}.

@idxlibfn{__ctalk_method}
@item __ctalk_method (@code{char *}@var{rcvr_object_name}, @code{OBJECT *}@var{(method_fn *)()}, @code{char *}@var{method_name})
Perform a simple Ctalk method call, in places where the call can be
used after one or more calls to @cite{__ctalk_arg} and followed by
@cite{__ctalk_arg_cleanup}.  For complex expressions or expressions
occurring within control structures, Ctalk normally uses
@cite{__ctalkEvalExpr} instead.

@idxlibfn{__ctalk_new_object}
@item __ctalk_new_object (@code{ARG **}@var{args})
The primitive function that is called by the @samp{new} method.

@idxlibfn{__ctalk_primitive_method}
@item __ctalk_primitive_method (@code{char *}@var{rcvr_name}, @code{char *}@var{method_name}, @code{int} @var{attrs})
Call primitive method @var{method_name} with receiver
@var{rcvr_name}. The @var{attrs} argument can be METHOD_SUPER_ATTR,
which uses the receiver's superclass as the receiver redirects the
method's arguments to a superclass method.

@idxlibfn{__ctalk_process_exitFn}
@item __ctalk_process_exitFn (@code{int} @var{app_exit})
Similar to @cite{__ctalk_exitFn}, above, except that the function is
meant to be invoked by child processes on exit, so it does not try to
manage other child processes.

@idxlibfn{__ctalk_receiver_pop}
@item __ctalk_receiver_pop (@code{void})
Pops the most recent receiver object off the receiver stack
and returns it.

@idxlibfn{__ctalk_receiver_push}
@item __ctalk_receiver_push (@code{OBJECT *}@var{object})
Push @var{object} onto the receiver stack, without changing
its reference count.  This can be useful in conjunction with
@cite{__ctalk_receiver_pop} to quickly retrieve the current
receiver object.

@example

 currentReceiver = __ctalk_receiver_pop ();
 __ctalk_receiver_push (currentReceiver);

@end example

@idxlibfn{__ctalk_register_c_method_arg}
@item __ctalk_register_c_method_arg (@code{char *}@var{decl}, @code{char *}@var{type}, @code{char *}@var{qualifier}, @code{char *}@var{qualifier2}, @code{char *}@var{storage_class}, @code{char *}@var{name}, @code{int} @var{type_attrs}, @code{int} @var{n_derefs}, @code{int} @var{initializer_size}, @code{int} @var{scope}, @code{int} @var{attrs}, @code{void *}@var{var})
Registers a C variable for use as an argument in the following method
call.  The arguments provide the information given by the variable's
declaration so that it can be re-created by Ctalk.  The last
parameter, @var{var}, contains the address of the actual C variable in
memory.

There are also abbreviated versions of
@cite{__ctalk_register_c_method_arg},
__ctalk_register_c_method_arg_b|c|d, which work similarly but don't
try to handle syntax elements that aren't present in the variable's
declaration.

@idxlibfn{__ctalk_self_internal}
@item __ctalk_self_internal (@code{void})
Return the current method's receiver object as an @code{OBJECT *}.

@idxlibfn{__ctalk_self_internal_value}
@item __ctalk_self_internal (@code{void})
Return the current method receiver's @code{value} instance variable as
an @code{OBJECT *} if it exists, or the receiver object otherwise (for
example, if the receiver is the @code{value} instance variable itself
instead of the parent object).

@idxlibfn{__ctalk_set_global}
@item __ctalk_set_global (@code{char *}@var{name}, @code{char *}@var{classname})
Adds the object @var{name} of class @var{classname} to ctalk's global
dictionary.  This function is normally called during program initialization.

@idxlibfn{__ctalk_set_local}
@idxlibfn{__ctalk_set_local_by_name}
@item __ctalk_set_local (@code{OBJECT *}@var{obj})
@item __ctalk_set_local_by_name (@code{char *}@var{obj_name})
Make @var{obj} a method- or function-local object.  This function is
normally called during a method or function's initialization when the
local objects are created with a @code{new} method.  The
@cite{__ctalk_set_local_by_name} function is similar, except that it
retrieves the global object by looking up its name in the global
dictionary.

@idxlibfn{__ctalk_to_c_char}
@item __ctalk_to_c_char (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{char} if possible.  If the
value is an ASCII code, converts the value to the actual @code{char}.

@idxlibfn{__ctalk_to_c_char_ptr}
@item __ctalk_to_c_char_ptr (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{char *}.  This
function has been mostly replaced by @cite{__ctalkToCCharPtr},
which you should use instead.

@idxlibfn{__ctalk_to_c_double}
@item __ctalk_to_c_double (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{double}.  This function
performs the conversion with the C library function @cite{strtod}.
Currently only supports the translation of base 10 values.

@idxlibfn{__ctalk_to_c_int}
@item __ctalk_to_c_int (@code{OBJECT *}@var{obj})
Returns the value of @var{obj} as a C @code{int}.  This function
handles values in hexadecimal, octal, using the C library function
@cite{strtol}, and binary, using Ctalk's internal routines.  Also
handles ASCII-to-char conversions if the argument is a
@code{Character} object.

@idxlibfn{__ctalk_to_c_longlong}
@item __ctalk_to_c_longlong (@code{OBJECT *}@code{obj})
Returns the value of @var{obj}, which is normally an
instance of @code{LongInteger} class, as a C @code{long long int}.
This function uses the C library function @cite{strtoll} to perform
the conversion.  Currently only handles @code{LongInteger} object
values in base 10.

@idxlibfn{__ctalk_to_c_ptr}
@item __ctalk_to_c_ptr (OBJECT *@var{o})
Translate the value of an object into a C @code{void *.}  If the
value isn't a pointer, then return the address of the value in memory.

@idxlibfn{__ctalk_to_c_ptr_u}
@item __ctalk_to_c_ptr_u (OBJECT *@var{o})
Translate the value of an object into a C @code{void *.}  This
is an unbuffered verson of @cite{__ctalk_to_c_ptr ()}, above.  That
is, if the value of the object is an empty string, @samp{(NULL)}, or
@samp{0x0}, it returns @code{NULL}. This allows you to compare objects to 
@code{NULLs} in C expressions without the generating compiler warnings.

@idxlibfn{__edittext_insert_at_point}
@idxlibfn{__edittext_xk_keysym}
@idxlibfn{__edittext_prev_char}
@idxlibfn{__edittext_next_char}
@idxlibfn{__edittext_prev_line}
@idxlibfn{__edittext_next_line}
@idxlibfn{__edittext_line_start}
@idxlibfn{__edittext_line_end}
@idxlibfn{__edittext_next_page}
@idxlibfn{__edittext_prev_page}
@idxlibfn{__edittext_delete_char}
@idxlibfn{__edittext_text_start}
@idxlibfn{__edittext_text_end}
@idxlibfn{__edittext_point_to_click}
@idxlibfn{__edittext_rol_col_from_mark}
@idxlibfn{__edittext_index_from_pointer}
@idxlibfn{__edittext_index_from_pointer}
@idxlibfn{__edittext_insert_str_at_click}
@idxlibfn{__edittext_insert_str_at_point}
@idxlibfn{__edittext_recenter}
@idxlibfn{__edittext_scroll_down}
@idxlibfn{__edittext_scroll_up}
@idxlibfn{__edittext_set_selection_owner}
@idxclscite {X11TextEditorPane}
@cindex Text editing
@cindex Editing, text

@item __edittext_delete_char (OBJECT *x11texteditorpane_object)
@item __edittext_insert_at_point (OBJECT *x11texteditorpane_object, int keycode, int shift_state, int keypress)
@item __edittext_line_end (OBJECT *x11texteditorpane_object)
@item __edittext_line_start (OBJECT *x11texteditorpane_object)
@item __edittext_xk_keysym (@code{int} @var{keycode}, @code{int} @var{shift_state}, @code{int} @var{keypress})
@item __edittext_next_char (OBJECT *x11texteditorpane_object)
@item __edittext_next_line (OBJECT *x11texteditorpane_object)
@item __edittext_next_page (OBJECT *x11texteditorpane_object)
@item __edittext_prev_char (OBJECT *x11texteditorpane_object)
@item __edittext_prev_line (OBJECT *x11texteditorpane_object)
@item __edittext_prev_page (OBJECT *x11texteditorpane_object)
@item __edittext_scroll_down (OBJECT *x11texteditorpane_object)
@item __edittext_scroll_up (OBJECT *x11texteditorpane_object)
@item __edittext_text_start (OBJECT *x11texteditorpane_object)
@item __edittext_text_end (OBJECT *x11texteditorpane_object)
@item __edittext_point_to_click (OBJECT *x11texteditorpane_object, int pointer_x, int pointer_y)
@item __edittext_index_from_pointer (OBJECT *x11texteditorpane_object, int pointer_x, int pointer_y)
@item __edittext_insert_str_at_click (OBJECT *x11texteditorpane_object, int click_x, int click_y, char *)
@item __edittext_insert_str_at_point (OBJECT *x11texteditorpane_object, char *)
@item __edittext_get_primary_selection (OBJECT *x11texteditorpan_eobject, void **buf_out, int *size_out)
@item __edittext_set_selection_owner (OBJECT *x11texteditorpane_object)
@item __edittext_recenter (OBJECT *x11texteditorpane_object)
Text editing functions used by @code{X11TextEditorPane} objects.
For more information, refer to @code{X11TextEditorPane} class..
@xref{X11TextEditorPane}.

@anchor{errorfuncs}
@cindex _error function
@item _error (@code{char *}@var{fmt}, @code{...})
Display an error message and exit the program.

@idxlibfn{__inspector_trace}
@idxlibfn{__inspect_get_receiver}
@idxlibfn{__inspect_get_global}
@idxlibfn{inspect_get_local}
@idxlibfn{__inspect_globals}
@idxlibfn{__inspect_locals}
@idxlibfn{__receiver_trace}
@idxlibfn{__inspect_short_help}
@idxlibfn{__inspect_long_help}
@cindex @mnm{inspect} instance method @idxclscite{ObjectInspector}
@item __inspector_trace (@code{int} @var{stack_index})
@item __inspect_get_arg (@code{int} @var{stack_index})
@item __inspect_get_receiver (@code{int} @var{stack_index})
@item __inspect_get_global (@code{char *}@var{obj_name})
@item __inspect_get_local (@code{int} @var{stack_index}, @code{char *}@var{obj_name})
@item __receiver_trace (@code{int} @var{stack_index})
@item __inspect_globals (@code{void})
@item __inspect_locals (@code{void})
@item __inspect_short_help (@code{void})
@item __inspect_long_help (@code{void})
Functions used internally by Ctalk's object inspector.  The function
parameters are designed to be consistent with the syntax of the
inspector commands, although not every function makes use of them.
For details refer to the @cite{inspect(3ctalk)} manual page, the
@cite{inspectors} section of the @flnm{ctalktools.info} Texinfo
manual, and the @mnm{inspect} method in @code{ObjectInspector} class.

@idxlibfn{__rt_init_library_paths}
@item __rt_init_library_paths (@code{void})
Initialize Ctalk's library paths.  The function first checks the value
of the @samp{CLASSLIBDIRS} environment variable for a colon-separated
list of directories, then adds the location of @var{classlibdir} which
is configured when Ctalk is built, and @var{classlibdir}@flnm{ctalk}.

@idxlibfn{__warning_trace}
@item __warning_trace (@code{void})
A generic stack trace function that prints a trace of the call
stack wherever it is inserted in a program.

@idxlibfn{__xalloc}
@item __xalloc (@code{int} @var{size})
Allocates a block of memory of @var{size} characters and returns
a pointer to the memory.  If the alloc call fails, generates an
@code{_error} message and exits the program.

@idxlibfn{__xfree}
@item __xfree (@code{void **}@var{addr})
Frees the block of memory pointed to by @var{*addr}, then sets
the @var{addr} to to NULL.  @var{*addr} must be a block of memory
previously allocated by @cite{__xalloc}, above, or a similar @cite{malloc}
call.  When used in a program, wrapping @var{addr} in the @samp{MEMADDR()}
macro provides the correct dereferencing for the allocated memory and its
pointer.  The example shows how the @samp{MEMADDR()} macro is used.

@example

char *my_ptr;

my_ptr = (char *)__xalloc (BUF_SIZE);

@emph{... do stuff ...}

__xfree (MEMADDR(my_ptr));

@end example

@idxlibfn{__xrealloc}
@item __xrealloc (@code{void **}@var{addr}, @code{int} @var{size})
Re-allocates the block of memory pointed to by @var{*addr} to size.
If @var{size} is larger than the original block of memory, the contents
of @var{addr} are preserved.  As with @cite{__xfree}, above, the
@samp{MEMADDR} macro provides the correct dereferencing for the
reference to @var{addr}.

@cindex _warning function
@item _warning (@code{char *}@var{fmt}, @code{...})
Print a warning message.

@cindex __objRefCntInc function
@item __objRefCntInc (@code{obj_ref})

Increment the reference count of an object and its instance variables.
This function takes an object reference as its argument.  You can use the
@code{OBJREF} macro to cast the object to an object reference.

@cindex __objRefCntDec function
@item __objRefCntDec (@code{obj_ref})

Decrement the reference count of an object and its instance variables.
As with all of the @code{__objRefCnt*} functions,
@code{__objRefCntDec} takes an object reference as its argument.  You
can use the @code{OBJREF} macro to cast the object to an object
reference.

@anchor{objRefCntSet}
@cindex __objRefCntSet function
@item __objRefCntSet (@code{obj_ref}, @code{int} @var{refcount})

Set the reference count of an object and its instance variables to
@var{refcnt}.  As with all of the @code{__objRefCnt*} functions,
@code{__objRefCntDec} takes an object reference as its argument.  You
can use the @code{OBJREF} macro to cast the object to an object
reference.

@emph{Note:} @code{__objRefCntSet} will not set an object's reference
count to zero.  That is, if you give @samp{0} as the second argument,
the call has no effect.  Use @code{__objRefCntZero} instead.  That
might sound silly, but it's much more reliable overall, in a
programming-by-contract way.

@cindex __objRefCntZero function
@item __objRefCntZero (@code{obj_ref})

Set the reference count of an object and its instance variables to
0 (zero).  As with all of the @code{__objRefCnt*} functions,
@code{__objRefCntZero} takes an object reference as its argument.  You
can use the @code{OBJREF} macro to cast the object to an object
reference.  

You should not need to use this function unless you're
@emph{completely} deleting an object.  Refer to the
@code{__ctalkDeleteObject} function for more information.


@idxlibfn{__refObj}
@cindex OBJREF_T data type
@cindex OBJREF macro
@item __refObj (@code{OBJECT **}@var{obj1}, @code{OBJECT **}@var{obj2})
Assign @var{obj2} to @var{obj1}.  If @var{obj1} already points to an
object, decrement its reference count.  Increment the reference count
of @var{obj2} by 1.  When calling functions that use @code{OBJECT **}
arguments, they correspond to the OBJREF_T typedef, and Ctalk defines
the macro OBJREF() to cast an object to an OBJREF_T.

@idxlibfn{_store_int}
@item _store_int (@code{OBJECT *}@var{receiver}, @code{OBJECT *}arg)
This is a primitive that stores the value of @var{arg} in
@var{receiver}, which is an @code{Integer}.  Checks the class of @code{arg},
and if @var{arg} is not an @code{Integer}, converts it to an @code{Integer}
value.  If @var{receiver} a pointer to a value, then it stores @var{arg}
as a fully-fledged object.

@idxlibfn{BOOLVAL macro}
@item BOOLVAL(@var{IntegerOrBoolValue})
This macro returns the value of an @code{Integer} or @code{Boolean}
object, or any of @code{Boolean's} subclasses (or just about any other
scalar value), as a C @code{bool}.  For an example of its use, refer to
the entry for the @xref{INTVAL_Macro}.

@anchor{INTVAL_Macro}
@idxlibfn{INTVAL macro}
@item INTVAL(@var{IntegerObjectValue})
A macro that returns the value of an @code{Integer} object, or any of
@code{Integer's} subclasses, as a C @code{int}.  Uses an @code{OBJECT
*'s} @code{__o_value} member directly, as in this example.

@example

OBJECT *my_int_object_alias = myInt;

int a = INTVAL(my_int_object_alias -> __o_value);

@end example

@cindex is_zero_q function
@item is_zero_q (char *str)
Returns a @code{bool} if the number represented by the string
evaluates to zero, false otherwise.

@idxlibfn{LLVAL macro}
@item LLVAL(@var{LongIntegerValue})
A macro that returns the value of a @code{LongInteger} object, or any
of @code{LongInteger's} subclasses, as a C long long int. For an
example of its use, refer to the entry for the @xref{INTVAL_Macro}.

@cindex obj_ref_str function
@item obj_ref_str (@code{char *}@var{str})
If @var{str} contains a formatted hexadecimal number of the
format @samp{0x@var{nnnnnn}} that points to an object,
return an @code{OBJECT *} reference to the object,
@code{NULL} otherwise.

@cindex str_is_zero_q function
@item str_is_zero_q (@code{char *}@var{str})
Like @cite{is_zero_q}, above, except that it also checks for an empty
string (and returns true), as well as a string that contains only the
digit @samp{0}, which causes the function to return false.

@cindex substrcat function
@item substrcat (@code{char *}@var{dest}, @code{char *}@var{src}, @code{int} @var{start_index}, @code{int} @var{end_index})
Concatenate the substring of @var{src} from @var{start_index} to
@var{end_index} to @var{dest}.

@cindex substrcpy function
@item substrcpy (@code{char *}@var{dest}, @code{char *}@var{src}, @code{int} @var{start_index}, @code{int} @var{end_index})
Copy a substring of @var{src} from @var{start_index} to
@var{end_index} to @var{dest}.

@idxlibfn SYMTOOBJ macro
@item SYMTOOBJ (@var{SymbolValue})
This is another macro that converts a @code{Symbol's} reference to an
@code{OBJECT *}.  This macro can be used on the right-hand side of an
assignment statement. 

@example

if ((value_object =
    SYMTOOBJ((self_object -> instancevars) ? 
             (self_object -> instancevars -> __o_value) : 
             (self_object -> __o_value))) != NULL) @{
      return value_object;
    @}

@end example

@idxlibfn SYMVAL macro
@item SYMVAL(@var{SymbolValue})
A macro that returns the value of a @code{Symbol} object, or any of
@code{Symbol's} subclasses, as a C @code{uintptr_t *}, which is guaranteed
to be valid for 32- and 64-bit machines.

However, due to the way that pointers work in C, @code{SYMVAL} only
works on the left-hand side of an assignment; you just need a cast
(for example to @code{OBJECT *}) in order to avoid compiler warnings
when it appears on the right-hand side of an assignment. Here is an
example:

@example

SYMVAL(object_alias->__o_value) = (OBJECT *)some_ptr;

@end example

However, if he label on the right-hand side is also a @code{Symbol},
the @code{Symbol} class duplicates the address that the operand points
to, not the operand itself.

@example

SYMVAL(object_alias->__o_value) = SYMVAL(some_ptr -> __o_value);

@end example

For another, perhaps more basic, example of the macro's use, refer to
the entry for the @xref{INTVAL_Macro}.


@cindex OBJREF macro
@item OBJREF(@var{obj})
Creates a reference to an object.  This macro returns an @code{OBJECT
**}, but using the macro allows the definition of an object reference
to change without affecting too much code.  @code{OBJREF} is used with
the @code{__objRefCnt*} functions, and in other places.

@cindex TRIM_LITERAL macro
@item TRIM_LITERAL(@var{s})
A macro that trims the quotes from a literal string.  It expands to 
@code{substrcpy (@var{s}, @var{s}, 1, strlen (@var{s}) - 2)}.

@cindex TRIM_CHAR macro 
@item TRIM_CHAR(@var{c})
A macro that trims the quotes from a literal character.  It expands to 
@code{substrcpy (@var{c}, @var{c}, 1, strlen (@var{c}) - 2)}

@cindex TRIM_CHAR_BUF macro 
@item TRIM_CHAR_BUF(@var{s})
A macro that trims nested single quotes from a literal character.
@code{TRIM_CHAR_BUF} also checks whether a single quote (@samp{'}) is
the actual character.

@idxlibfn{xfopen}
@idxlibfn{xfprintf}
@idxlibfn{xfscanf}
@idxlibfn{xmemcpy}
@idxlibfn{xmemmove}
@idxlibfn{xmemset}
@idxlibfn{xsprintf}
@idxlibfn{xstrcpy}
@idxlibfn{xstrncpy}
@idxlibfn{xstrcat}
@idxlibfn{xstrncat}
@item xfopen (const char *path, const char *mode)
@item xfprintf (FILE *stream, const char *fmt, ...)
@item xfscanf (FILE *stream, const char *fmt, ...)
@item xmemcpy (void *s, const void *s, size_t)
@item xmemmove (void *s, const void *s, size_t)
@item xmemset (void *s, int c, size_t n)
@item xsprintf (char *s, const char *fmt, ...)
@item xstrcat (char *d, const char *s)
@item xstrncat (char *d, const char *s, size_t)
@item xstrcpy (char *d, const char *s)
@item xstrncpy (char *d, const char *, size_t)
These are portable wrappers for systems that #define their own
(possibly more secure) versions of library functions.  For the exact
prototype and definition, you should consult the system's manual page
for the corresponding library function (e.g., @cite{strcpy(3)} for the
definition of @cite{xstrcpy}).

@c LIB-DOC-END-COOKIE ***

@end table

@node C, Copying, Methods, Top
@iftex
@chapter Ctalk Language Featues
@end iftex
@ifnottex
@heading Ctalk Language Features
@end ifnottex
@cindex Ctalk language features

@iftex
This chapter describes @command{ctalk}'s language features and
its low-level application programming interface.
@end iftex
@ifnottex
This section describes @command{ctalk}'s C language features and
its low-level application programming interface.
@end ifnottex

@menu
* Preprocessor::        Compatibility with @command{cpp}.
* C statements::        How to use objects and C in the same programs.
* Externs::             Working with multiple input files.
* Class casting::       How to tell Ctalk which class an object is.
* Control structures::  Objects in loops and conditional statements.
* OBJECT typedef::      Ctalk's @code{OBJECT} type.
* Attributes::          Attributes help identify an object's context.
* C library functions:: How to use objects with C library functions.
* GNU tools::           Using automake, etc., with Ctalk programs.
@end menu


@node Preprocessor, C statements, , C
@iftex
@section @command{ctpp,} the @command{ctalk} Preprocessor
@end iftex
@ifnottex
@subheading @command{ctpp,} the @command{ctalk} Preprocessor
@end ifnottex
@cindex Preprocessor
@cindex @command{ctpp} preprocessor
@cindex Include files
@cindex Header files

Information about @command{ctpp}, the Ctalk preprocessor, is contained
in its Texinfo manual, @flnm{ctpp.info}.

The preprocessor is compatible with GNU @command{cpp} and supports ISO
C99 preprocessing features.  This allows you to include C header files
in Ctalk programs and class libraries.  Ctalk caches macros from
include files, so it can use, in the GNU compiler's terminology,
@emph{include once} header files. 

If you have a header file called, for example, @flnm{myheader.h}, you
would wrap the definitions with the following preprocessor directives.

@example

#ifndef _MYHEADER_H
#define _MYHEADER_H
.
. <Your definitions appear here.>
.
#endif /* _MYHEADER_H */
@end example

This makes certain that the preprocessor defines macros, data types,
and other library definitions only once, no matter how many times the
input includes the header file.

@node C statements, Externs, Preprocessor, C

@iftex
@section Pragmas
@end iftex
@ifnottex
@subheading Pragmas
@end ifnottex
@cindex Pragmas

Ctalk recognizes GCC, G++, and C99 pragmas.  

Pragmas that apply to floating point operations and code generation
are ignored and elided, unless the @samp{--keeppragmas} command line
option is given.  @xref{Invoking}.

Inclusion of a file that contains G++ pragmas causes the preprocessor
to issue a warning if the @samp{-v} option is given, and
@command{ctalk} ignores the file. @xref{Invoking}.

Here is the effect of the GCC and C99 pragmas.

@table @code

@cindex #pragma interface
@cindex #pragma implementation

@item #pragma interface
@item #pragma implementation
The include file is not processed.

@cindex #pragma GCC dependency

@item #pragma GCC dependency @var{file}
Issues a warning if the source file is more recent than @var{file}.

@cindex #pragma GCC poison

@item #pragma GCC poison @var{identifier} ...
@command{ctalk} issues an error and discontinues processing if the
source file contains an identifier given as an argument.

@cindex #pragma GCC system header

@item #pragma GCC system header
The @command{ctalk} preprocessor processes all input files in the
same manner and ignores this pragma.

@cindex #pragma GCC pack
@cindex #pragma STDC FP_CONTRACT
@cindex #pragma STDC FENV_ACCESS
@cindex #pragma STDC CX_LIMITED_RANGE

@item #pragma GCC pack
@item #pragma STDC FP_CONTRACT
@item #pragma STDC FENV_ACCESS
@item #pragma STDC CX_LIMITED_RANGE
@command{ctalk} ignores and elides these pragmas, which apply to
floating point and code generation options, unless the
@samp{--keeppragmas} option is used. @xref{Invoking}.

@end table

@iftex
@section C Expressions
@end iftex
@ifnottex
@subheading C Expressions
@end ifnottex
@cindex C expressions

In version @value{VERSION}, you can use simple constant expressions as
receivers, as in this example.

@example
printf ("%s", "/home/users/joe" subString 1, self length - 1);
@end example

@emph{Warning} - This use of @code{self} is experimental in version
@value{VERSION} and should be used with caution.

You can use a C constant in place of any receiver whose class
corresponds to a basic C data type.  These classes include
@code{Character}, @code{String}, @code{Float}, @code{Integer}, and
@code{LongInteger}.

Expressions like the following work.
@example
if (99 == myInt)
 ...

if ('c' == myInt asCharacter)
 ...

if (3.1416 == pi)
 ...
@end example

The following code examples are equivalent.

@example
myString = "This is a string.";
printf ("%d\n", myString length);
@end example

and,

@example
printf ("%d\n", "This is a string" length);
@end example

However, if you try to use a C variable on the left side of a method
that overloads a C operator, the expression might simply be
interpreted as C code, as in this example.

@example
  String new progName;

  progName = "myprog";

  if (argv[0] == progName) @{
    ...
  @}
@end example

This is because Ctalk does not interpret @code{argv[0]} as a receiver
object, and then interprets @code{==} as a C operator.

@iftex
@section Objects in Function Parameters
@end iftex
@ifnottex
@subheading Objects in Function Parameters
@end ifnottex
@cindex Function parameters

Programs cannot, at this time, use objects as parameters to C 
functions.  If you need to use an object as a parameter, you need
to use a method instead of a function, or translate the object's value
to C. @xref{Translating}.

@iftex
@section Objects in Function Arguments
@end iftex
@ifnottex
@subheading Objects in Function Arguments
@end ifnottex
@cindex Function arguments
@anchor{Objects in Function Arguments}

You can use of Ctalk expressions as C function arguments, but the
values should be treated as read-only, as in this example.

@example
Integer new myIndex;
char buf[255];

myIndex = 0;

/*
 *   This statement works correctly. 
 */
sprintf (buf, "%d", __ctalk_to_c_int (myIndex));

/*
 *   This statement does not work correctly.
 */
sscanf (myString, "%s %s", mySubString1, mySubString2);
@end example

If you need to read a string into objects, try @mnm{readFormat} (class
@code{String}) instead.

@cindex @code{Unimplemented C type} warning
@cindex @code{Symbol} class
If you receive an @code{Unimplemented C type} warning, it means that
Ctalk does not implement a class that corresponds to the data type.
In these cases, you can generally assign the C variable to an instance
of class @code{Symbol,} and use that as the argument to a function.

The Classes that implement C data types are described in the next
section. 

@iftex
@section C Data Type Classes
@end iftex
@ifnottex
@subheading C Data Type Classes
@end ifnottex

These classes correspond to the basic C types.

@table @code

@cindex @code{char **} C data type
@item Array
@code{char **}

@cindex @code{char} C data type
@item Character
@code{char}

@cindex @code{float} C data type
@cindex @code{double} C data type
@item Float
@code{float} and @code{double}

@cindex @code{int} C data type
@cindex @code{long int} C data type
@item Integer
@code{int} and @code{long int}

@cindex @code{long long int} C data type
@item LongInteger
@code{long long int}

@cindex @code{char *} C data type
@item String
@code{char *}

@end table

@iftex
@section Typedefs in Function Arguments
@end iftex
@ifnottex
@subheading Typedefs in Function Arguments
@end ifnottex
@cindex Typedefs
@cindex @code{time_t} type

Ctalk resolves many of the derived types defined in C99, as well as
incomplete types; however, variables that are of derived types can
still cause unpredictable results, if the variable is of an unusual or
complex type.
 
If you encounter a case where a derived type confuses the parser or
run-time library, the workaround is to declare the type as an
equivalent C type.  For example, if a variable is of type
@code{time_t,} you could equivalently declare it as type @code{long
long int.}

@iftex
@section C Functions in Complex Expressions
@end iftex
@ifnottex
@subheading C Functions in Complex Expressions
@end ifnottex

You can use C functions in complex expressions within conditionals,
as in this example.
@example
int int_fn1 (void) @{
  return 10;
@}

char *add_int_fn_as_string (int a, int b, int c) @{
  static char buf[30];
  sprintf (buf, "%d", a + b + c);
  return buf;
@}

int main () @{

  String new myString1;

  if ((myString1 = add_int_fn_as_string (int_fn1 (), 20, 30)) != "60")
    exit(1);
    
  printf ("%s\n", myString1);

@}
@end example
As long as your function returns one of the C data types @code{int,
char, char *,} or @code{double,} Ctalk can translate the function
output to an object, as well as call the function at run time using
a method call.

If you try to use a C function that returns a complex or derived type,
Ctalk prints a warning and uses @code{Integer} as the default return
class.  In these cases, you should consider writing a method instead.

@emph{Note:} When you use functions in complex expressions, the
function's arguments must also be C variables or expressions.  If you
want to use objects as the arguments to a function, then you must
perform the object-to-C translation manually.

@anchor{Debugging}
@iftex
@section Debugging
@end iftex
@ifnottex
@subheading Debugging
@end ifnottex
@cindex Debugging

@iftex
@subsection Object Inspectors
@end iftex
@ifnottex
@subsubheading Object Inspectors
@end ifnottex
@cindex Inpectors

@cindex @mnm{inspect} instance method @idxclscite{Object}
Ctalk provides a basic set of methods that can inspect and print
the contents of objects.  

The @mnm{inspect} method in @code{Object} class is an interactive
utility that lets you examine a program's objects as the program
is running.

To inspect an object, simply send it the message, @mnm{inspect} - it's
a shortcut for the @mnm{inspect} method in @code{ObjectInspector}
class, which a program can also call directly.  


@example

String new globalString;

int main () @{
  Integer new i;

  globalString = "global string";

  i inspect;
@}

@end example

In either case, the program stops execution when it reaches the
@mnm{inspect} method, and presents a prompt where you can type commands.

Here's a transcript of a brief inspector session.

@example

$ ./inspect 
> p
p
name:       i
class:      Integer (0x48bf4958)
superclass: Magnitude (0x48bf29f0)
value:      (null) (Integer)

> p g globalString
p g globalString
name:       globalString
class:      String (0x48cce8d0)
superclass: Character (0x48c8acc0)
value:      global string (String)

> c
c
$ 

@end example

At the inspector prompt, @samp{> }, the command @samp{p} prints
the inspector's receiver object, and @samp{p g globalString} prints
the named global object, @code{globalString}.  The @samp{c} command
exits the inspector and continues running the program.

There are several commands that the inspector recognizes.  Typing
@samp{?,} @samp{h,} or @samp{help} at the prompt displays a list of them.

@cindex @mnm{dump} instance method @idxclscite{Object}
@cindex @mnm{formatObject} instance method @idxclscite{Object}
@cindex @code{ObjectInspector} class
@cindex __ctalkPrintObject function
The inspector uses the method @mnm{formatObject} to print the contents
of individual objects.  

If you want to print a formatted object directly, without stopping the
program, Ctalk also has the method @mnm{dump} in @code{Object} class,
which simply calls @mnm{formatObject} with its receiver object to
print the object and then returns so the program can continue running.


@iftex
@subsection Using @command{gdb} for Debugging
@end iftex
@ifnottex
@subsubheading Using @command{gdb} for Debugging
@end ifnottex

@cindex @code{ctdb} command
@cindex @code{gdb} command
@cindex @mnm{inspect} instance method @idxclscite{Object}
The GNU @command{gdb} debugger allows you to trace through Ctalk
applications as well as the compiler and the run-time libraries,
at the level of Ctalk's source code.

In order to debug Ctalk programs with @command{gdb}, the source
must be compatible with the debugger; that means that you can
debug Ctalk programs using the intermediate C code to get source
level debugging within Ctalk apps.

You can also examine the contents of objects and their run-time
environment with the @mnm{inspect} method (in @code{Object} class),
which doesn't use line number information. @xref{Object_inspect}.
There's a tutorial on using object inspectors in the @cite{ctalktools}
Texinfo manual, and yet more information in the @cite{inspect.3ctalk}
manual page.

The @samp{-P} command line option disables line numbering.  You can
then debug the intermediate output, which is normal C that
@command{gdb} can interpret correctly.

This means that method line numbers are calculated from the start of
all of the input, which includes all other classes and header files.
So when you give the @samp{-P} option to Ctalk, it reports the line if
possible, although without line number information, the compiler can't
track line numbers of preprocessor output; like for example, by
adjusting line numbers after including a file with the @samp{#include}
directive.

The @command{ctdb} command builds Ctalk programs with the correct
arguments for debugging.  Then you can use @command{gdb} to debug the program.

@example
$ ctdb -k myprog.c -o myprog
@end example

If you need to debug either @command{ctalk} or the @code{libctalk}
library, then you need to build and install Ctalk without
optimization.  You can do that by adding the
@samp{--without-optimization} option to @command{configure} when
building Ctalk.  Compiler optimization often removes lines of code
(and variables) from the binary, so the output often doesn't
correspond to the source code.  Also, it often helps to add the
@samp{--without-inline-functions} option to @command{configure}.

@cindex Optimization
@example

$ ./configure --without-inline-functions --without-optimization

@end example

Then build and install Ctalk with @code{make} and @code{make install.}

Ctalk also provides other build options.  Typing 
@example 
$ ./configure --help
@end example
at the shell prompt prints a list of them.

Ctalk is compatible at the machine code level with C programs.  That
means you use most of @command{gdb's} functions, like peek into a
running program and examine core dumps.  The @command{gdb}
documentation describes the debugger's extensive set of options.


@node Externs, Class casting, C statements, C
@iftex
@section Externs
@end iftex
@ifnottex
@subheading Externs
@end ifnottex
@cindex Prototypes, methods
@cindex Method prototypes

Ctalk provides a few facilities to help when compiling code in
several input modules.  

There are also a few caveats when dealing with C variables in multiple
input modules, which are described below.

Ctalk allows you to prototype methods.  That is, you can declare a
method in a source code module before compiling another module later
where the method is actually defined.

Prototypes are similar to method declarations, except that the
prototype omits the method body.  For example, a method prototype
before the method is first used would look like this.

@example
String instanceMethod myLength (void);
@end example

You can also define a different return class in the prototype, as in
this example.

@example
String instanceMethod myLength (void) returnClass Integer;
@end example

For example, if the input file module1.ca looks like this:

@example

String instanceMethod trimStrLength (void) returnObjectClass Integer;

int main () @{

  String new myStr;

  myStr = "Hello, world!";

  printf ("%s\n", myStr subString 0, myStr trimStrLength 2);
@}

@end example

and the file module2.ca, which contains the definition of
@mnm{trimStrLength}, looks like this:

@example

String instanceMethod trimStrLength (void) @{
  returnObjectClass Integer;
  return self length - 1;
@}

@end example

Then you can build the program with a command line like the following,
and Ctalk will have the definition of @mnm{trimStringLength} while
compiling module1.ca, before it actually compiles the method in
module2.ca.

@example

$ ctcc module1.ca module2.ca -o myprog

@end example

@subsubheading C Variables and @code{extern} Declarations
@cindex Externs and C variables

When using a global C variable in several input modules, you only need to
declare it once, before it is first used.  Ctalk combines the C code
of all of the input files with one copy of the class libraries, so
it isn't necessary to declare a C variable in the first module and then
declare it as extern in the modules that get compiled later.

@node Class casting, Control structures, Externs, C
@iftex
@section Class casting
@end iftex
@ifnottex
@subheading Class casting
@end ifnottex

In many cases, it's obvious which class an object is, even when the
object's defition is removed from the place where a program needs to
perform an operation on it, or the object is aliased to @code{self} or
to a C variable, or you need to use a different type of language
semantics with an object.

If a program has a set of expressions, as in this hypothetical
example:

@example

Integer new myInt;
myList new myList;
Key new myKey;
Symbol new *intPtr;

*intPtr = Integer new "Int 1", "1";
myList push *intPtr;
*intPtr = Integer new "Int 2", "2";
myList push *intPtr;

myKey = myList + 1;

myInt = *myKey;

myInt += 3;

@emph{... do stuff with myInt ...}

myList map @{
  printf ("%d\n", self value);
@}

@end example

When run, the program would produce output like this.

@example

$ ./myProg
1
2

@end example

That's because the changes to @code{myInt} would not take effect for
the member of @samp{myList}, because @code{Integer} objects, when a
program assigns values to them, normally assigns the value of one
@code{Integer} to another.  However, in the example above, you might
want to work on the original list member - that is, you want the
assignment to treat @code{myInt} as if it were a reference.

One way to notify Ctalk of this is to use an @code{Object} to refer to
the list element, and use a @emph{class cast} to notify Ctalk that the
@code{Object} is actually an @code{Integer}.

Then the program example above looks like this.

@example

Object new myIntObject;
myList new myList;
Key new myKey;
Symbol new *intPtr;

*intPtr = Integer new "Int 1", "1";
myList push *intPtr;
*intPtr = Integer new "Int 2", "2";
myList push *intPtr;

myKey = myList + 1;  

myIntObject = *myKey;

(Integer *)myIntObject += 3;  /* The cast tells Ctalk to treat myIntObject,
                                 which is declared as an Object,
                                 as an Integer, so it can work correctly
                                 with the first element of myList. */

@emph{... do stuff with myIntObject ...}

myList map @{
  printf ("%d\n", self value);
@}

@end example

Other places that you can use class casting is when a program uses
a C @code{OBJECT *}.  In that case, you can tell Ctalk what class
the object is.  Here's an abbreviated example from a @code{map} method in
@code{TreeNode} class.

@example

  OBJECT *t, *list_elem;

  /* rcvr_obj is a TreeNode object. */
  for (t = __LIST_HEAD(rcvr_obj), have_break = NULL; 
       t && !have_break; t = t -> next) @{
    list_elem = obj_ref_str ((t -> instancevars) ? 
			     t -> instancevars -> __o_value :
			     (IS_VALUE_INSTANCE_VAR(t) ? 
			      t -> __o_p_obj -> instancevars -> __o_value :
			      "0x0"));

  @emph{... do stuff ...}

  (TreeNode *)list_elem children __mapChildren methodfn;

  (TreeNode *)list_elem siblings __mapSiblings methodfn;

  @}
@end example

This is a convenient way for a program to tell Ctalk that @code{list_elem}
is a @code{TreeNode} object.  It's up to the program to ensure that the
C variable actually does point to an object of that class, or the program
won't work correctly at run time.

Programs can also cast @code{self} to a class, in cases where Ctalk
cannot determine @code{self's} class from its context, like in this
example

@example

myList map @{

  (Float *)self = 0.01f;

@}

@end example

This feature is still experimental, and you should use it with
caution; in particular, it's up to the program to insure that the
object actually is a member of the class that you cast it to.
However, on the occasions when a program needs to excercise some
control over a set of expressions' semantics, then class casting can
be useful.

@c
@c  Control structures
@c
@node Control structures, OBJECT typedef, Class casting, C

@iftex
@section Control Structures
@end iftex
@ifnottex
@subheading Control Structures
@end ifnottex
@cindex @code{if} statements
@cindex @code{for} statements
@cindex @code{while} statements
@cindex @code{do} statements
@cindex @code{!} operator

Generally, Ctalk objects work the same as C variables when they appear
in @code{if}, @code{for}, @code{while}, @code{switch}, and @code{do-while}
statements.

If Ctalk cannot figure out a way to resolve an expression that contains
both C variables or functions and objects, it will try to warn you.

One exception to these rules are the methods that perform logical
negation operator, which generally overload the @samp{!} math operator.
When you place a @samp{!} operator at the beginning of a conditional,
Ctalk checks whether the class of the expression's result overloads the
operator.  In that case, Ctalk treats @samp{!} as a method.  If a
class does not overload the operator, then Ctalk treats it as a C 
operator.

That way, you can overload @samp{!} in classes that define complex
objects, which provides a flexible way to determine if an object has
been initialized or contains valid data.

For example, in @code{X11Font} class, you can overload the @samp{!}
operator to check whether or not an object's @code{fontId} instance
variable is zero to determine whether or not the object refers to a
valid font.

If a class doesn't overload @samp{!}, then Ctalk uses the C semantics
for the operator - that is, it simply checks whether an operand is zero
(or NULL) or non-zero, and inverts the logical true or false value
of the operand.

In addition, Ctalk provides many methods to iterate over collections
of objects.  These methods include @code{map}, @code{mapInstanceVariables},
@code{mapClassVariables}, and overloaded math operators like those in
@code{Key} class.

For a complete description of the control structures Ctalk uses, refer
to the @cite{Ctalk Tutorial}.

@node OBJECT typedef, Attributes, Control structures, C

@heading @code{OBJECT} typedef

@cindex OBJECT typedef

At the lowest level, ctalk declares objects as pointers to an
@code{OBJECT} struct.  You can access an object's members if you
assign an object's value to a C variable of the type @code{OBJECT *},
as in this example.

@example
Object new myObject;
OBJECT *myObjectValue;

myObjectValue = myObject value;

if (!strcmp (myObjectValue -> CLASSNAME, "Object"))
   printf ("myObjectValues class is, \"Object.\"\n");
@end example

The declaration of the OBJECT type is contained in @flnm{include/object.h}.

@example
typedef struct _object OBJECT;
. . .
struct _object @{
  char sig[16];
  char __o_name[MAXLABEL];
  char __o_classname[MAXLABEL];
  OBJECT *__o_class;
  char __o_superclassname[MAXLABEL];
  OBJECT *__o_superclass;
  OBJECT *__o_p_obj;
  VARTAG *__o_vartags;
  char *__o_value;
  METHOD *instance_methods,
    *class_methods;
  int scope;
  int nrefs;
  int attrs
  struct _object *classvars;
  struct _object *instancevars;    
  struct _object *next;
  struct _object *prev;
@};
@end example

Note that @code{__o_name}, @code{__o_classname},
@code{__o_superclassname}, and @code{__o_value} are all @code{char *},
even if the object belongs to a class like @code{Integer} or
@code{Float}.  The struct members @code{__o_class} and
@code{__o_superclass} contain pointers to the library class and
superclass entries, which are also objects.

For numeric classes, the @code{value} member contains a formatted
representation of a numeric value.  Examples of directly assigning
values to objects are given in the section about writing methods.
@xref{Method API}.

Ctalk uses the members @code{instance_methods,} @code{class_methods,}
@code{classvars} for class objects.

The @code{sig} member contains a numeric stamp that verifies
that the @code{OBJECT *} refers to a valid object.

The @code{scope} member describes an object's scope.  The scope can be
one of @code{GLOBAL_VAR}, @code{LOCAL_VAR}, @code{ARG_VAR},
@code{RECEIVER_VAR}, @code{PROTOTYPE_VAR}, or @code{BLOCK_VAR.}

The @code{nrefs} member keeps track of the number of references that
exist to an object at run time.  Every time ctalk creates a reference
to an object, internally ctalk increments @code{nrefs}.  When ctalk
deletes a reference, it decrements @code{nrefs}.  When 
@code{nrefs} drops to zero, @command{ctalk} deletes the object.

The @code{attrs} member is a combination of one or more object attributes.
The next section describes object attributes in more detail.

The @code{tag} member is an abbreviation for the
@code{__o_vartags -> tag -> var_decl -> name} member; that is,
the object's primary label.

@node Attributes, C library functions, OBJECT typedef, C
@iftex
@section Object Attributes
@end iftex
@ifnottex
@subheading Object Attributes
@end ifnottex
@cindex Attributes, object
@cindex Object attributes

The Ctalk API defines a number of object attributes.  The attributes
help identify the context that the object appears in.  Many of the
attributes are only meaningful internally; some are also useful in the
method API.

@cindex @cite{__ctalkSetObjectAttr ()} function
The attributes are defined in @file{ctalkdefs.h}, which you can
include in class libraries.  To set an object's attribute, it's
generally convenient to use the @cite{__ctalkSetObjectAttr ()}
library function, which has the prototype:

@example

__ctalkSetObjectAttr (@code{OBJECT *}@var{object}, @code{int} @var{attr})

@end example

Many attributes are only used by Ctalk internally.  The attributes
that are useful in methods are defined in @flnm{ctalkdefs.h}.  Those
attributes, and their values and uses, are listed here.

@table @code

@item OBJECT_IS_VALUE_VAR    (1 << 0)
The object is the @code{value} instance variable of its
parent object.
@item OBJECT_VALUE_IS_C_CHAR_PTR_PTR     (1 << 1)
Used to indicate that an object refers to a @code{char **} C
array.
@item OBJECT_IS_NULL_RESULT_OBJECT      (1 << 2)
Indentifies an object that is created when an operation produces a
NULL result.
@item OBJECT_HAS_PTR_CX     (1 << 3)
Set when an object appears on the left-hand side of an equation
with a pointer reference; e.g.,
@example

*mySymbol = __ctalk_self_internal ().

@end example

@cindex @code{OBJECT_IS_GLOBAL_COPY} attribute;
@item OBJECT_IS_GLOBAL_COPY     (1 << 4)
Set when a program copies a global object.

@cindex @code{OBJECT_IS_I_RESULT} attribute;
@item OBJECT_IS_I_RESULT      (1 << 5)
Identifies temporary objects that are the result of an operation
that sets the object tag's pointer references.

@cindex @code{OBJECT_IS_STRING_LITERAL} attribute;
@item OBJECT_IS_STRING_LITERAL     (1 << 6)
Used to identify an object created to represent a string literal.

@cindex @code{OBJECT_IS_MEMBER_OF_PARENT_COLLECTION} attribute;
@item OBJECT_IS_MEMBER_OF_PARENT_COLLECTION     (1 << 7)
Indicates that an object (generally a @code{Key} object) is a member
of a parent collection.  Normally used to identify individual collection
members.

@cindex @code{OBJECT_HAS_LOCAL_TAG} attribute;
@cindex @cite{__ctalkAddBasicNewTag ()} function
@item OBJECT_HAS_LOCAL_TAG     (1 << 8)
Indicates that an object's tag was created as a placeholder for an
ad-hoc object; for example, objects created by a @code{basicNew}
method.  The local tag is not necessarily the primary tag - the
object can also acquire other tags when being assigned.  Normally
this attribute is set by the @cite{__ctalkAddBasicNewTag ()} library
function.

@cindex @code{OBJECT_IS_DEREF_RESULT} attribute;
@cindex @mnm{->} instance method @idxclscite{Object}
@item OBJECT_IS_DEREF_RESULT
Set by the @code{Object : ->} method.  The attribute is used to
indicate that the receiver of @code{->} is the result of a previous
call to @code{->}; i.e., the expression contains several dereference
operators; for example, @samp{myObject -> instancevars -> __o_value}.

@end table

@node C library functions, GNU tools, Attributes, C
@iftex
@section C Library Functions
@end iftex
@ifnottex
@subheading C Library Functions
@end ifnottex
@cindex C library functions

You can assign the result of a C library function to a Ctalk object,
provided that the return type of the function has a corresponding 
Ctalk class.  

All C functions must have prototypes.  The library functions in this
section already have their prototypes defined in the C library
headers.  If a function in a program does not have a prototype, Ctalk
prints an error and exits.  

Generally, if Ctalk has a method that is analogous to a C library
function, you can use the method with Ctalk objects, although in many
cases you can mix objects and C variables.  Of course, you can still
use any C library function with C data types.

@cindex Xt object classes
@cindex X Window System
@cindex C library compatibility

There are some incompatibilities with more specialized libraries.  For
example, you should take care when using the X Window System Xt
widgets in Ctalk programs, because the widget classes use the some of
the same class names as the Ctalk library.

The following sections describe the C library functions that Ctalk can
use directly.

@menu
* abs::
* acos::
* acosh-asinh-atanh::
* asctime::
* asin::
* atexit::
* atof::
* atoi::
* atol::
* atoll::
* calloc::
* cbrt::
* ceil::
* chdir::
* clock::
* copysign::
* cos::
* cosh::
* ctime::
* difftime::
* erf::
* erfc::
* exp::
* expm1::
* fabs::
* fclose::
* fegetround::
* feholdexcept::
* feof::
* ferror::
* fesetround::
* fetestexcept::
* fflush::
* fgetc::
* fgetpos::
* fgets::
* floor::
* fmod::
* fopen::
* fprintf::
* fputc::
* fputs::
* fread::
* free::
* freopen::
* frexp::
* fscanf::
* fseek::
* fsetpos::
* fstat::
* ftell::
* fwrite::
* getc::
* getchar::
* getcwd::
* getenv::
* getpid::
* gmtime-localtime::
* index-function::
* isalnum-isxdigit::
* labs::
* llabs::
* llrint::
* llround::
* log::
* log10::
* log1p::
* lrint::
* lround::
* malloc::
* memchr::
* memcmp::
* memcpy::
* memmove::
* memset::
* mkdir::
* modf::
* nearbyint::
* perror::
* pow::
* printf::
* raise::
* rand::
* realloc::
* remove::
* rename::
* rindex::
* rint::
* rmdir::
* round::
* scanf::
* sin::
* sinh::
* snprintf::
* sprintf::
* sqrt::
* srand::
* sscanf::
* strcat-strcpy::
* strchr::
* strcoll::
* strspn::
* strerror::
* strftime::
* strlen::
* strncat-strncpy::
* strpbrk::
* strrchr::
* strstr::
* strtod::
* strtok::
* strtoll::
* strxfrm::
* system::
* tan::
* tanh::
* tmpnam::
* tolower::
* toupper::
* trunc::
* ungetc::
* vfprintf::
* vfscanf::
* vprintf::
* vscanf::
* vsnprintf::
* vsprintf::
* vsscanf::
@end menu

@c Need classes:
@c atexit, btowc, bsearch, calloc, localeconv,
@c lroundf, lroundl, mktime, nearbyintf,
@c nearbyintl, qsort, rewind, rintf, rintl, roundf, roundl, setjmp,
@c sigsetjmp, strtof, strtold, strtol, strtoul, strtoull, time, tmpfile, 
@c truncf, truncl
@c
@c Unsupported or inapplicable functions:
@c On Linux - cabs, cacos, cacosh, carg, casin, casinh, catan, catanh,
@c  ccos, ccosh, cerf, cexp, cexp2, cexpm1, cgamma, cimag, clearerr,
@c  clgamma, clog, clog10, clog1p, clog2, conj, cpow, cproj, creal,
@c  csin, csinh, csqrt, ctan, ctanh, exp2, ilogb, mkxtime, nan,
@c  nextafter, remainder, remquo, scalbln, scalbn, strfxtime,
@c  strtoimax, strtoumax, tgamma, zonetime
@c ceilf, ceill, div, fdim, feclearexcept, fegetenv, fegetexceptflag,
@c feraiseexcept, fesetenv, fesetexceptflag, feupdateenv, fgetwc,
@c fgetws, fma, fmax, fputwc, fputws, fwide, fwprintf, fwscanf,
@c iswalnum, iswalpha, iswcntrl, iswctype, iswdigit, iswgraph, 
@c iswlower, iswprint, iswpunct, iswspace, iswupper, iswxdigit
@c lldiv, log2, logb, mblen, mbrlen, mbrtowc, mbsinit, mbsrtowcs,
@c mbstowcs, mbtowc, swprinft, swscanf, towctrans, towlower, towupper,
@c unwgetc, vfwprintf, vfwscanf, vswprintf, vswscanf, vwprintf,
@c vwscanf, wcrtomb, wcschr, wcscmp, wcscoll, wcscpy, wcscspn,
@c wcsftime, wcsfxtime, wcslen, wcsncat, wcsncmp, wcsncpy, wcspbrk,
@c wcsrchr, wcsrtombs, wcsspn, wcsstr, wcstod, wcstof, wcstoimax,
@c wcstok, wcstol, wcstold, wcstoll, wcstombs, wcstoul, wcstoull,
@c wcstoumax, wcsxfrm, wcstob, wctomb, wctrans, wctype, wmemchr,
@c wmemcmp, wmemcpy, wmemmove, wmemset, wprintf, wscanf
@c
@c Superfluous at least for now.
@c setbuf, setvbuf



@node abs, acos, ,C library functions

@subheading @code{abs} Function
@cindex @idxfncite{abs(3)}
@example

#include <stdlib.h>

Integer new i;

i = abs (3);

@end example

@node acos, acosh-asinh-atanh, abs, C library functions
@subheading @code{acos} Function
@cindex @idxfncite{acos(3)}

@example

#include <math.h>

Integer new i;

i = acos (0.5);

@end example

Ctalk does not check if the argument is outside the range -1 to 1 and
does not check for an error.  Refer to the, @code{acos}, manual page.

@node acosh-asinh-atanh, asctime, acos, C library functions
@subheading @code{acosh,} @code{asinh,} and @code{atanh} Functions
@cindex @idxfncite{acosh(3)}
@cindex @idxfncite{asinh(3)}
@cindex @idxfncite{atanh(3)}

@example

#include <math.h>

Float new myFloat;

myFloat = acosh (2.0);

@end example

Ctalk does not check the range of the arguments or errors.
Refer to the, @cite{acosh(3), asinh(3),} and @cite{atanh(3)}
manual pages.

@node asctime, asin, acosh-asinh-atanh, C library functions

@subheading @code{asctime} Function

@cindex @idxfncite{asctime(3)}

@example

#include <time.h>

time_t t;
struct tm *time_struct;
String new s;

time (&t);
time_struct = localtime (&t);
s = asctime (time_struct);

@end example

@emph{Note:} Ctalk does not have a class corresponding to a
@code{struct tm *.}  An explicit assignment of a @code{struct tm *} to
a @code{Symbol} passes the address to @code{asctime.} @xref{Objects in
Function Arguments}.

@node asin, atexit, asctime, C library functions

@subheading @code{asin} Function

@cindex @idxfncite{asin(3)}

@example
#include <math.h>

Float new f;

f = asin (0.5);
@end example

Note that ctalk does not perform any range checking of the argument.

@node atexit, atof, asin, C library functions
@subheading @code{atexit} Function
@cindex @idxfncite{atexit(3)}
@example 
#include <stdlib.h>

Integer new i;

i = atexit (exitfunc);

@end example

@node atof, atoi, atexit, C library functions
@subheading @code{atof} Function
@cindex @idxfncite{atof(3)}

@example
#include <stdlib.h>

Float new pi;

pi = atof ("3.1416");
@end example

@node atoi, atol, atof, C library functions

@subheading @code{atoi} Function

@cindex @idxfncite{atoi(3)}

@example
#include <stdlib.h>

Integer new i;

i = atoi ("35");
@end example

@node atol, atoll, atoi, C library functions

@subheading @code{atol} Function

@cindex @idxfncite{atol(3)}

@example
#include <stdlib.h>

Integer new i;

i = atol ("35");
@end example

Note that, @code{Integer}, class corresponds to the C types,
@code{int}, and, @code{long int}.

@node atoll, calloc, atol, C library functions

@subheading @code{atoll} Function

@cindex @idxfncite{atoll(3)}

#include <stdlib.h>

LongInteger new i;

i = atoll ("35");

@emph{Note:} The @cite{atoll(3)} function is not implemented by
the OS X or DJGPP C libraries.  Use @cite{atol(3)}, @cite{strtoll(3)}, 
or a method instead.

@node calloc, cbrt, atoll, C library functions

@subheading @code{calloc} Function

@cindex @idxfncite{calloc(3)}

@example
#include <stdlib.h>

Integer new n;
Integer new size;
int *intbuf;

n = 10;
size = sizeof (int);

intbuf = calloc (n, size);
@end example

@node cbrt, ceil, calloc, C library functions
@subheading @code{cbrt} Function
@cindex @idxfncite{cbrt(3)}

#include <math.h>

Float new f;

f = cbrt (9.0);

@node ceil, chdir, cbrt, C library functions
@subheading @code{ceil} Function
@cindex @idxfncite{ceil(3)}

#include <math.h>

Float new f;

f = ceil (3.5);

@node chdir, clock, ceil, C library functions
@subheading @code{chdir} Function
@cindex @idxfncite{chdir(3)}

Integer new result;
String new dirName;

dirName = "mySubdir";

result = chdir (mySubdir);

@node clock, copysign, chdir, C library functions
@subheading @code{clock} Function
@cindex @idxfncite{clock(3)}

@example
#include <time.h>

Integer new i;

i = clock ();
@end example

@node copysign, cos, clock, C library functions
@subheading @code{copysign} Function
@cindex @idxfncite{copysign(3)}

@example
#include <math.h>

Float new f;

f = copysign (3.0, -1.0);
@end example

@node cos, cosh, copysign, C library functions
@subheading @code{cos} Function
@cindex @idxfncite{cos(3)}

@example
#include <math.h>

Float new f;

f = cos (45.0);
@end example

@node cosh, ctime, cos, C library functions
@subheading @code{cosh} Function
@cindex @idxfncite{cosh(3)}

@example
#include <math.h>

Float new f;

f = cosh (45.0);
@end example

@node ctime, difftime, cosh, C library functions
@subheading @code{ctime} Function
@cindex @idxfncite{ctime(3)}

@example
#include <time.h>

time_t t;
String new s;

time (&t);
s = ctime (&t);
@end example

@cindex @mnm{cTime} instance method @idxclscite{CTime}
@emph{Note:} There is not a portable way to take the address
of an object with @samp{&}, although it may be possible to
perform the translation manually in some cases.  If the
argument must be an object, then use the @mnm{cTime} 
(class @code{CTime}) method instead.

@node difftime, erf, ctime, C library functions
@subheading @code{difftime} Function
@cindex @idxfncite{difftime(3)}

@example

#include <time.h>

Float new f;

f = difftime (time1, time0);

@end example

@node erf, erfc, difftime, C library functions
@subheading @code{erf} Function
@cindex @idxfncite{erf(3)}

@example

#include <math.h>

Float new f;

f = erf (0.5);

@end example

@node erfc, exp, erf, C library functions
@subheading @code{erfc} Function
@cindex @idxfncite{erfc(3)}

@example

#include <math.h>

Float new f;

f = erfc (0.5);

@end example

@node exp, expm1, erfc, C library functions
@subheading @code{exp} Function
@cindex @idxfncite{exp(3)}

@example

#include <math.h>

Float new f;

f = exp (2);

@end example

@node expm1, fabs, exp, C library functions
@subheading @code{expm1} Function
@cindex @idxfncite{expm1(3)}

@example

#include <math.h>

Float new f;

f = expm1 (1.05);

@end example

@node fabs, fclose, expm1, C library functions
@subheading @code{fabs} Function
@cindex @idxfncite{fabs(3)}

@example

#include <math.h>

Float new f;

f = fabs (-1.05);

@end example

@node fclose, fegetround, fabs, C library functions
@subheading @code{fclose} Function
@cindex @idxfncite{fclose(3)}

@example

#include <stdio.h>

Integer new i;

i = fclose (fileHandle);

@end example

@node fegetround, feholdexcept, fclose, C library functions
@subheading @code{fegetround} Function
@cindex @idxfncite{fegetround(3)}

@example

#include <fenv.h>

Integer new i;

i = fegetround ();

@end example

@node feholdexcept, feof, fegetround, C library functions
@subheading @code{feholdexcept} Function
@cindex @idxfncite{feholdexcept(3)}

@example

#include <fenv.h>

Integer new i;

i = feholdexcept (fe_envp);

@end example

@node feof, ferror, feholdexcept, C library functions
@subheading @code{feof} Function
@cindex @idxfncite{feof(3)}

@example

#include <stdio.h>

Integer new i;

i = feof (fileStream);

@end example

@node ferror, fesetround, feof, C library functions
@subheading @code{ferror} Function
@cindex @idxfncite{ferror(3)}

@example

#include <stdio.h>

Integer new i;

i = ferror (fileStream);

@end example

@node fesetround, fetestexcept, ferror, C library functions
@subheading @code{fesetround} Function
@cindex @idxfncite{fesetround(3)}

@example

#include <math.h>

Integer new i;

i = fesetround (mode);

@end example

@node fetestexcept, fflush, fesetround, C library functions
@subheading @code{fetestexcepts} Function
@cindex @idxfncite{fetestexcepts(3)}

@example

#include <math.h>

Integer new i;

i = fetestxcept (exceptions);

@end example

@node fflush, fgetc, fetestexcept, C library functions
@subheading @code{fflush} Function
@cindex @idxfncite{fflush(3)}

@example

#include <stdio.h>

Integer new i;

i = fflush (fileStream);

@end example

@node fgetc, fgetpos, fflush, C library functions
@subheading @code{fgetc} Function
@cindex @idxfncite{fgetc(3)}

@example

#include <stdio.h>

Integer new i;

i = fgetc (fileStream);

@end example

@node fgetpos, fgets, fgetc, C library functions
@subheading @code{fgetpos} Function
@cindex @idxfncite{fgetpos(3)}

@example

#include <stdio.h>

Integer new i;

i = fgetpos (fileStream, pos);

@end example

@node fgets, floor, fgetpos, C library functions
@subheading @code{fgets} Function
@cindex @idxfncite{fgets(3)}

@example

#include <stdio.h>

String new s;

s = fgets (s, s length, fileStream);

@end example

@node floor, fmod, fgets, C library functions
@subheading @code{floor} Function
@cindex @idxfncite{floor(3)}

@example

#include <math.h>

Float new f;

f = floor (3.01);

@end example

@node fmod, fopen, floor, C library functions
@subheading @code{fmod} Function
@cindex @idxfncite{fmod(3)}

@example

#include <math.h>

Float new f;

f = fmod (3.0, 2.0);

@end example

@node fopen, fprintf, fmod, C library functions
@subheading @code{fopen} Function
@cindex @idxfncite{fopen(3)}

@example

#include <stdio.h>

FILE *f

String new path;
String new mode;

path = "/home/user/.profile";
mode = "r";

f = fopen (path, mode);

@end example

@node fprintf, fputc, fopen, C library functions
@subheading @code{fprintf} Function
@cindex @idxfncite{fprintf(3)}

@xref{Variable arguments}.

@node fputc, fputs, fprintf, C library functions
@subheading @code{fputc} Function
@cindex @idxfncite{fputc(3)}

@example

#include <stdio.h>

Integer new myInput;

myInput = fgetc (stdin);
fputc (myInput, stdout);

@end example

@node fputs, fread, fputc, C library functions
@subheading @code{fputc} Function
@cindex @idxfncite{fputc(3)}

@example
#include <stdio.h>

String new myInput;

fgets (myInput, 255, stdin);
fputs (myInput, stdout);
@end example

@node fread, free, fputs, C library functions
@subheading @code{fread} Function
@cindex @idxfncite{fread(3)}

@example
#include <stdio.h>

String new myInput;

myInput = "";

fread (myInput, 255, sizeof (char), stdin);
@end example

@node free, freopen, fread, C library functions
@subheading @code{free} Function
@cindex @idxfncite{free(3)}

Do not use @code{free} with objects.  Use the
@code{__ctalkDeleteObject} library function instead.

@cindex __objRefCntZero function
@cindex __ctalkDeleteObject function
Also, calling @cite{__objRefCntZero} before @cite{__ctalkDeleteObject}
insures that the object will be completely deleted.  You can do this
in two ways: first, by sending the object a @mnm{delete} message; or
by casting the object to a C @code{OBJECT *} and then giving the
@code{OBJECT *} as an argument to @cite{__objRefCntZero} and
@cite{__ctalkDeleteObject}.

@example
Object new myObject;
OBJECT *myObject_alias;

myObject_aliast = myObject;

__objRefCntZero (OBJREF (myObject_alias));
__ctalkDeleteObject (myObject_alias);
@end example

@node freopen, frexp, free, C library functions
@subheading @code{freopen} Function
@cindex @idxfncite{freopen(3)}

@example
#include <stdio.h>

FILE *f;

String new path;
String new mode;

path = "/home/user/.profile";
mode = "r";

f2 = freopen (path, mode, stdin);
@end example

@node frexp, fscanf, freopen, C library functions
@subheading @code{frexp} Function
@cindex @idxfncite{frexp(3)}

@example
#include <math.h>

int i_exp_val;
Integer new expInt;
Float new myFloat;
Float new myFraction;

myFloat = "2.5";

myFraction = frexp (myFloat, &i_exp_val);

expInt = i_exp_val;
@end example

@node fscanf, fseek, frexp, C library functions
@subheading @code{fscanf} Function
@cindex @idxfncite{fscanf(3)}

@xref{Variable arguments}.

@cindex @code{stdin}
@cindex @code{stdout}
@cindex @code{stderr}
@cindex @code{stdinStream} @idxclscite{ReadFileStream}
@cindex @code{stdoutStream} @idxclscite{WriteFileStream}
@cindex @code{stderrStream} @idxclscite{WriteFileStream}
@emph{Note:} The C99 standard requires that @code{stdin,}
@code{stdout,} and @code{stderr} should be implemented as
macros, which on some systems (notably Solaris) causes
problems with C-to-object translation.  If Ctalk cannot
register these macros as C variables, then either call
@idxfncite{fscanf(3)} with only C variables, or use a method
with @code{stdoutStream} or @code{stderrStream}
@xref{WriteFileStream}, or @code{stdinStream} @xref{ReadFileStream}.

@node fseek, fsetpos, fscanf, C library functions
@subheading @code{fseek} Function
@cindex @idxfncite{fseek(3)}

@node fsetpos, fstat, fseek, C library functions
@subheading @code{fsetpos} Function
@cindex @idxfncite{fsetpos(3)}

@example
#include <stdio.h>

FILE *f;
String new path;
String new mode;
Integer new offset;
  
path = "/home/user/.profile.new";
mode = "r";


f = fopen (path, mode);

offset = 0L;

fsetpos (f, offset);
@end example

@node fstat, ftell, fsetpos, C library functions
@subheading @code{fstat} Function
@cindex @idxfncite{fstat(3)}

@example
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

String new path;
Integer new result;
struct stat statbuf;

path = "/home/user/.profile";

result = fstat (path, &statbuf);

@end example

@node ftell, fwrite, fstat, C library functions
@subheading @code{ftell} Function
@cindex @idxfncite{ftell(3)}

@example
#include <stdio.h>

Integer new filePos;

filePos = ftell (file);
@end example

@node fwrite, getc, ftell, C library functions
@subheading @code{fwrite} Function
@cindex @idxfncite{fwrite(3)}

@example
#include <stdio.h>

FILE *f;
String new path;
String new mode;
String new promptLine;
  
path = "/home/user/.profile.new";
mode = "a";

f = fopen (path, mode);

promptLine = "PS1=#";

fwrite (promptLine, promptLine length, sizeof (char), f);
@end example

@node getc, getchar, fwrite, C library functions
@subheading @code{getc} Function
@cindex @idxfncite{getc(3)}

@example
#include <stdio.h>

Integer new myInput;

myInput = getc (stdin);

printf ("%c", myInput asCharacter);
@end example

@node getchar, getcwd, getc, C library functions
@subheading @code{getchar} Function
@cindex @idxfncite{getchar(3)}

@example
#include <stdio.h>

Integer new myInput;

myInput = getchar ();

printf ("%c", myInput asCharacter);
@end example

@node getcwd, getenv, getchar, C library functions
@subheading @code{getcwd} Function
@cindex @idxfncite{getcwd(3)}
@example
#include <stdio.h>
String new myString;
getcwd (myString, FILENAME_MAX);
@end example
@emph{Note:} The argument @code{myString} must already be initialized
to hold the entire directory path.  If in doubt, use @code{getCwd}
(class @code{DirectoryStream}) instead. @xref{DirectoryStream}.

@node getenv, getpid, getcwd, C library functions
@subheading @code{getenv} Function
@cindex @idxfncite{getenv(3)}

@example
String new envPath;

envPath = getenv ("PATH");

printf ("%s", envPath);
@end example

@node getpid, gmtime-localtime, getenv, C library functions
@subheading @code{getpid} Function
@cindex @idxfncite{getpid(3)} C Function

@node gmtime-localtime, index-function, getpid, C library functions
@subheading @code{gmtime,} @code{localtime} Functions
@cindex @idxfncite{gmtime(3)} C Function
@cindex @idxfncite{localtime(3)} C Function

@node index-function, isalnum-isxdigit, gmtime-localtime, C library functions
@subheading @code{index} Function
@cindex @idxfncite{index(3)}

@xref{strchr}.

@node isalnum-isxdigit, labs, index-function, C library functions
@subheading @code{isalnum,} @code{isalpha,} @code{isascii,} @code{isblank,} @code{iscntrl,} @code{isdigit,} @code{isgraph,} @code{islower,} @code{isprint,} @code{ispunct,} @code{isspace,} @code{isupper,} @code{isxdigit} Functions
@cindex @idxfncite{isalnum(3)}
@cindex @idxfncite{isalpha(3)}
@cindex @idxfncite{isascii(3)}
@cindex @idxfncite{isblank(3)}
@cindex @idxfncite{iscntrl(3)}
@cindex @idxfncite{isdigit(3)}
@cindex @idxfncite{isgraph(3)}
@cindex @idxfncite{islower(3)}
@cindex @idxfncite{isprint(3)}
@cindex @idxfncite{ispunct(3)}
@cindex @idxfncite{isspace(3)}
@cindex @idxfncite{isupper(3)}
@cindex @idxfncite{isxdigit(3)}
@cindex @mnm{isAlNum} method @idxclscite{Character}
@cindex @mnm{isAlpha} method @idxclscite{Character}
@cindex @mnm{isASCII} method @idxclscite{Character}
@cindex @mnm{isBlank} method @idxclscite{Character}
@cindex @mnm{isCntrl} method @idxclscite{Character}
@cindex @mnm{isDigit} method @idxclscite{Character}
@cindex @mnm{isGraph} method @idxclscite{Character}
@cindex @mnm{isLower} method @idxclscite{Character}
@cindex @mnm{isPrint} method @idxclscite{Character}
@cindex @mnm{isPunct} method @idxclscite{Character}
@cindex @mnm{isSpace} method @idxclscite{Character}
@cindex @mnm{isUpper} method @idxclscite{Character}
@cindex @mnm{isXDigit} method @idxclscite{Character}

Ctalk does not support @flnm{ctype.h} macros portably.  Use the
corresponding method of class @code{Character} instead. 
@xref{Character}.

@example
Ctype.h Macro          Ctalk Method
-------------          ------------
isalnum                isAlNum
isalpha                isAlpha
isascii                isASCII
isblank                isBlank
iscntrl                isCntrl
isdigit                isDigit
isgraph                isGraph
islower                isLower
isprint                isPrint
ispunct                isPunct
isspace                isSpace
isupper                isUpper
isxdigit               isXDigit
@end example

@node labs, llabs, isalnum-isxdigit, C library functions
@subheading @code{labs} Function
@cindex @idxfncite{labs(3)}

@example
#include <stdlib.h>

Integer new myValue;
Integer new myAbsValue;

myAbsValue = labs (myValue);
@end example

@node llabs, llrint, labs, C library functions
@subheading @code{llabs} Function
@cindex @idxfncite{llabs(3)}

@example
#include <stdlib.h>

LongInteger new myValue;
LongInteger new myAbsValue;

myAbsValue = llabs (myValue);
@end example

@node llrint, llround, llabs, C library functions
@subheading @code{lrint}, @code{lrintf}, @code{lrintl}, @code{llrint}, @code{llrintf}, @code{llrintl} Functions
@cindex @idxfncite{lrint(3)}
@cindex @idxfncite{lrintf(3)}
@cindex @idxfncite{lrintl(3)}
@cindex @idxfncite{llrint(3)}
@cindex @idxfncite{llrintf(3)}
@cindex @idxfncite{llrintl(3)}

@example
#include <math.h>

Float new myFloat;
LongInteger new myLongInt;

myFloat = 2.5;

myLongInt = llrint (myFloat);
@end example

Consult the manual page for @cite{lrint(3)}, etc., for detailed
information about each function.

@node llround, log, llrint, C library functions
@subheading @code{llround} Function
@cindex @idxfncite{llround(3)}

@example
#include <math.h>

Float new myFloat;
LongInteger new myLongInt;

myFloat = 2.5;

myLongInt = llround (myFloat);
@end example

@node log, log10, llround, C library functions
@subheading @code{log} Function
@cindex @idxfncite{log(3)}

@example
#include <math.h>

Float new myFloat;
Float new myLog;

myFloat = 2.5;

myLog = log (myFloat);
@end example

@node log10, log1p, log, C library functions
@subheading @code{log10} Function
@cindex @idxfncite{log10(3)}

@example
#include <math.h>

Float new myFloat;
Float new myLog;

myFloat = 2.5;

myLog = log10 (myFloat);
@end example

@node log1p, lrint, log10, C library functions
@subheading @code{log1p} Function
@cindex @idxfncite{log1p(3)}

@example
#include <math.h>

Float new myFloat;
Float new myLog;

myFloat = 2.5;

myLog = log1p (myFloat);
@end example

@node lrint, lround, log1p, C library functions
@subheading @code{lrint} Function
@cindex @idxfncite{lrint(3)}

@example
#include <math.h>

Float new myFloat;
Integer new myInt;

myFloat = 2.5;

myLog = lrint (myFloat);
@end example

@node lround, malloc, lrint, C library functions
@subheading @code{lround} Function
@cindex @idxfncite{lround(3)}

@example
#include <math.h>

Float new myFloat;
Integer new myInt;

myFloat = 2.5;

myLog = lround (myFloat);
@end example

@node malloc, memchr, lround, C library functions
@subheading @code{malloc} Function
@cindex @idxfncite{malloc(3)}

@example
#include <stdlib.h>

Integer new size;
int *intbuf

size = sizeof (int) * 10;

memblk = (int *)malloc (size);
@end example

@node memchr, memcmp, malloc, C library functions
@subheading @code{memchr} Function
@cindex @idxfncite{memchr(3)}

@example
#include <string.h>

#define BUFLENGTH 1024

Integer new searchChar;
Integer new length;
char buf[BUFLENGTH], *charptr;

length = BUFLENGTH

strcpy (buf, "Some text.");

searchChar = '.';

charptr = (char *)memchr ((void *)buf, searchChar, length);

@end example

@node memcmp, memcpy, memchr, C library functions
@subheading @code{memcmp} Function
@cindex @idxfncite{memcmp(3)}

@example
#include <string.h>

#define BUFLENGTH 1024

Integer new length;
Integer new result;
char buf1[BUFLENGTH], buf2[BUFLENGTH];

length = BUFLENGTH

strcpy (buf1, "Some text.");
strcpy (buf2, "Some other text.");

result = memcmp ((void *)buf1, (void *)buf2, length);

@end example

@node memcpy, memmove, memcmp, C library functions
@subheading @code{memcpy} Function
@cindex @idxfncite{memcpy(3)}

@example
#include <string.h>

#define BUFLENGTH 1024

Integer new length;
Integer new result;
char buf1[BUFLENGTH], buf2[BUFLENGTH], *charptr;

length = BUFLENGTH

strcpy (buf1, "Some text.");

result = (char *)memcpy ((void *)buf1, (void *)buf2, length);

@end example

@node memmove, memset, memcpy, C library functions
@subheading @code{memmove} Function
@cindex @idxfncite{memmove(3)}

@example
#include <string.h>

#define BUFLENGTH 1024

Integer new length;
Integer new result;
char buf1[BUFLENGTH], buf2[BUFLENGTH], *charptr;

length = BUFLENGTH

strcpy (buf1, "Some text.");

charptr = (char *)memmove ((void *)buf1, (void *)buf2, length);

@end example

@node memset, mkdir, memmove, C library functions
@subheading @code{memset} Function
@cindex @idxfncite{memset(3)}

@example
#include <string.h>

#define BUFLENGTH 1024

Integer new length;
Integer new fillChar;
char buf[BUFLENGTH], *charptr;

length = BUFLENGTH
fillChar = 0;

charptr = (char *)memset ((void *)buf1, fillChar, length);

@end example

@node mkdir, modf, memset, C library functions
@subheading @code{mkdir} Function
@cindex @idxfncite{mkdir(3)}
@example
Integer new r;
String new myDirName;

myDirName = "myDir";

r = mkdir (myDirName);
@end example

@node modf, nearbyint, mkdir, C library functions
@subheading @code{modf} Function
@cindex @idxfncite{modf(3)}

@example
#include <math.h>

double dptr;
Float new x;
Float new frac;

x = 2.54;

frac = modf (x, &dptr);
@end example

@node nearbyint, perror, modf, C library functions
@subheading @code{nearbyint} Function
@cindex @idxfncite{nearbyint(3)}

@example
#include <math.h>

Float new x;
Float new result;

x = 2.53;

result = nearbyint (x);
@end example

@node perror, pow, nearbyint, C library functions
@subheading @code{perror} Function
@cindex @idxfncite{perror(3)}

@example
#include <stdio.h>

String new message;

message = "Program error";

perror (message);
@end example

@node pow, printf, perror, C library functions
@subheading @code{pow} Function
@cindex @idxfncite{pow(3)}

@example
#include <math.h>

Float new x;
Float new exp;
Float new result;

x = 2.5;
exp = 2;

result = pow (x, exp);
@end example

@node printf, raise, pow, C library functions
@subheading @code{printf} Function
@cindex @idxfncite{printf(3)}

@example
#include <stdio.h>

String new message;
String new fmt;

printf (fmt, message);
@end example

@node raise, rand, printf, C library functions
@subheading @code{raise} Function
@cindex @idxfncite{raise(3)}

@example
#include <signal.h>

Integer new signal;
Integer new result;

signal = SIGTERM;

result = raise (signal);
@end example

@node rand, realloc, raise, C library functions
@subheading @code{rand} Function
@cindex @idxfncite{rand(3)}

@example
#include <stdlib.h>

Integer new random;

random = rand ();
@end example

@node realloc, remove, rand, C library functions
@subheading @code{realloc} Function
@cindex @idxfncite{realloc(3)}

@example
#include <stdlib.h>

int *intptr;
Integer new size;

size = sizeof (int *);

intptr = (int *)realloc (NULL, size);

@end example

@node remove, rename, realloc, C library functions
@subheading @code{remove} Function
@cindex @idxfncite{remove(3)}

@example
#include <stdio.h>

String new path;
Integer new result;

path = ``/home/user'';

result = remove (path);

@end example

@node rename, rindex, remove, C library functions
@subheading @code{rename} Function
@cindex @idxfncite{rename(3)}

@example
#include <stdio.h>

String new oldPath;
String new newPath;
Integer new result;

oldPath = "/home/user";
newPath = "/home/joe";

result = rename (oldPath, newPath);

@end example

@node rindex, rint, rename, C library functions
@subheading @code{rindex} Function
@cindex @idxfncite{rindex(3)}

@xref{strrchr}.

@node rint, rmdir, rindex, C library functions
@subheading @code{rint} Function
@cindex @idxfncite{rint(3)}

@example
#include <math.h>

Float new myFloat;
Float new myIntValue;

myFloat = 2.54;

myIntValue = rint (myFloat);

@end example

@node rmdir, round, rint, C library functions
@subheading @code{rmdir} Function
@cindex @idxfncite{rmdir(3)}
@example
r = rmdir (dirToRemove);
@end example

@node round, scanf, rmdir, C library functions
@subheading @code{round} Function
@cindex @idxfncite{round(3)}

@example
#include <math.h>

Float new myFloat;
Float new myIntValue;

myFloat = 2.54;

myIntValue = round (myFloat);

@end example

@node scanf, sin, round, C library functions
@subheading @code{scanf} Function
@cindex @idxfncite{scanf(3)}

@xref{Variable arguments}.

@node sin, sinh, scanf, C library functions
@subheading @code{sin} Function
@cindex @idxfncite{sin(3)}

@example
#include <math.h>

Float new x;
Float new sinX;

x = 2.5;

sinX = sin (x);
@end example

@node sinh, snprintf, sin, C library functions
@subheading @code{sinh} Function
@cindex @idxfncite{sinh(3)}

@example
#include <math.h>

Float new x;
Float new sinX;

x = 2.5;

sinX = sinh (x);
@end example

@node snprintf, sprintf, sinh, C library functions
@subheading @code{snprintf} Function
@cindex @idxfncite{snprintf(3)}

@xref{Variable arguments}.

@node sprintf, sqrt, snprintf, C library functions
@subheading @code{sprintf} Function
@cindex @idxfncite{sprintf(3)}

@xref{Variable arguments}.

@node sqrt, srand, sprintf, C library functions
@subheading @code{sqrt} Function
@cindex @idxfncite{sqrt(3)}

@example
#include <math.h>

Array instanceMethod printSquareRoot (void) @{

  Float new squareRoot;
  WriteFileStream classInit;

  /*
   *  Use Ctalk C API library function calls within a C function.
   */
  squareRoot = sqrt(__ctalk_to_c_double(__ctalk_self_internal ()));
  stdoutStream writeStream squareRoot;

  return NULL;
@}

int main () @{

  Array new floatArray;

  floatArray atPut 0, 1.0;
  floatArray atPut 1, 4.0;
  floatArray atPut 2, 9.0;
  floatArray atPut 3, 16.0;
  floatArray atPut 4, 25.0;

  floatArray map printSquareRoot;
  
@}
@end example

@node srand, sscanf, sqrt, C library functions
@subheading @code{srand} Function
@cindex @idxfncite{srand(3)}

@example
#include <stdlib.h>

Integer new seed;

seed = 2;

srand (seed);

@end example

@node sscanf, strcat-strcpy, srand, C library functions
@subheading @code{sscanf} Function
@cindex @idxfncite{sscanf(3)}

@xref{Variable arguments}.

@cindex @code{stdin}
@cindex @code{stdout}
@cindex @code{stderr}
@cindex @code{stdinStream} @idxclscite{ReadFileStream}
@cindex @code{stdoutStream} @idxclscite{WriteFileStream}
@cindex @code{stderrStream} @idxclscite{WriteFileStream}
@emph{Note:} The C99 standard requires that @code{stdin,}
@code{stdout,} and @code{stderr} should be implemented as
macros, which on some systems (notably Solaris) causes
problems with C-to-object translation.  If Ctalk cannot
register these macros as C variables, then either call
@idxfncite{sscanf(3)} with only C variables, or use a method
with @code{stdoutStream} or @code{stderrStream}
@xref{WriteFileStream}, or @code{stdinStream} @xref{ReadFileStream}.

@node strcat-strcpy, strchr, sscanf, C library functions
@subheading @code{strcat,} @code{strcasecmp}, @code{strcmp,} and @code{strcpy} Functions
@cindex @idxfncite{strcat(3)}
@cindex @mnm{cStrcat} method @idxclscite{CFunction}
@cindex @idxfncite{strcasecmp(3)}
@cindex @mnm{cStrcmp} method @idxclscite{CFunction}
@cindex @idxfncite{strcmp(3)}
@cindex @mnm{cStrcmp} method @idxclscite{CFunction}
@cindex @idxfncite{strcpy(3)}
@cindex @mnm{cStrcpy} method @idxclscite{CFunction}

The @cite{strcat(3),} @cite{strcasecmp(3),} @cite{strcmp(3),} and
@cite{strcpy(3)} functions work in most statements.  When necessary,
Ctalk uses @mnm{cStrcat}, @mnm{cStrcasecmp}, @mnm{cStrcmp}, and
@mnm{cStrcpy} (class @code{CFunction}). @xref{CFunction}.

@node strchr, strcoll, strcat-strcpy, C library functions
@subheading @code{strchr} Function
@cindex @idxfncite{strchr(3)}

@example
#include <string.h>

int main () @{

  String new s;
  String new result;

  s = "s1";

  if ((result = strchr (s, '1')) == "1") @{
    printf ("Pass\n");
  @} else @{
    printf ("Fail\n");
  @}

  exit(0);
@}
@end example

@node strcoll, strspn, strchr, C library functions
@subheading @code{strcoll} Function
@cindex @idxfncite{strcoll(3)}

@example
#include <string.h>

String new s1;
String new s2;
Integer new result;

result = strcoll (s1, s2);
@end example

@node strspn, strerror, strcoll, C library functions
@subheading @code{strspn} Function
@cindex @idxfncite{strspn(3)}


@node strerror, strftime, strspn, C library functions
@subheading @code{strerror} Function
@cindex @idxfncite{strerror(3)}


@node strftime, strlen, strerror, C library functions
@subheading @code{strftime} Function
@cindex @idxfncite{strftime(3)}


@node strlen, strncat-strncpy, strftime, C library functions
@subheading @code{strlen} Function
@cindex @idxfncite{strlen(3)}


@node strncat-strncpy, strpbrk, strlen, C library functions
@subheading @code{strncat,} @code{strncmp,} and @code{strncpy} Functions
@cindex @idxfncite{strncat(3)}
@cindex @mnm{cStrncat} method @idxclscite{CFunction}
@cindex @idxfncite{strncasecmp(3)}
@cindex @mnm{cStrncasecmp} method @idxclscite{CFunction}
@cindex @idxfncite{strncmp(3)}
@cindex @mnm{cStrncmp} method @idxclscite{CFunction}
@cindex @idxfncite{strncpy(3)}
@cindex @mnm{cStrncpy} method @idxclscite{CFunction}

The @cite{strncat(3),} @cite{strncasecmp(3),} @cite{strncmp(3),} and
@cite{strncpy(3)} functions work in most statements.  When necessary,
Ctalk uses @mnm{cStrncat,} @mnm{cStrncasecmp,} @mnm{cStrncmp,} and
@mnm{cStrncpy} (class @code{CFunction}). @xref{CFunction}.

@node strpbrk, strrchr, strncat-strncpy, C library functions
@subheading @code{strpbrk} Function
@cindex @idxfncite{strpbrk(3)}

@node strrchr, strstr, strpbrk, C library functions
@subheading @code{strrchr} Function
@cindex @idxfncite{strrchr(3)}

@example
#include <string.h>

String new s1;
Character new searchChar;
String new charptr;

searchChar = '/';
s1 = "/home/user";

charptr = strrchr (s1, searchChar);
@end example


@node strstr, strtod, strrchr, C library functions
@subheading @code{strstr} Function
@cindex @idxfncite{strstr(3)}

@node strtod, strtok, strstr, C library functions
@subheading @code{strtod} Function
@cindex @idxfncite{strtod(3)}


@node strtok, strtoll, strtod, C library functions
@subheading @code{strtok} Function
@cindex @idxfncite{strtok(3)}


@node strtoll, strxfrm, strtok, C library functions
@subheading @code{strtoll} Function
@cindex @idxfncite{strtoll(3)}


@node strxfrm, system, strtoll, C library functions
@subheading @code{strxfrm} Function
@cindex @idxfncite{strxfrm(3)}


@node system, tan, strxfrm, C library functions
@subheading @code{system} Function
@cindex @idxfncite{system(3)}

@example
#include <stdlib.h>

String new commandLine;

commandLine = "ls -lR";

system (commandLine);
@end example


@node tan, tanh, system, C library functions
@subheading @code{tan} Function
@cindex @idxfncite{tan(3)}


@node tanh, tmpnam, tan, C library functions
@subheading @code{tanh} Function
@cindex @idxfncite{tanh(3)}


@node tmpnam, tolower, tanh, C library functions
@subheading @code{tmpnam} Function
@cindex @idxfncite{tmpnam(3)}

@node tolower, toupper, tmpnam, C library functions
@subheading @code{tolower} Function
@cindex @idxfncite{tolower(3)}

The @code{tolower} function may be implemented in a non-portable
manner.  Use the @code{toLower} method instead. 
@c @xref{Character}.


@node toupper, trunc, tolower, C library functions
@subheading @code{toupper} Function
@cindex @idxfncite{toupper(3)}

The @code{toupper} function may be implemented in a non-portable
manner.  Use the @code{toUpper} method instead. 
@c @xref{Character}.


@node trunc, ungetc, toupper, C library functions
@subheading @code{trunc} Function
@cindex @idxfncite{trunc(3)}


@node ungetc, vfprintf, trunc, C library functions
@subheading @code{ungetc} Function
@cindex @idxfncite{ungetc(3)}


@node vfprintf, vfscanf, ungetc, C library functions
@subheading @code{vfprintf} Function
@cindex @idxfncite{vfprintf(3)}
@cindex @idxfncite{printf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{printf(3)} or @code{writeStream} (class
@code{WriteFileStream}) instead.

@node vfscanf, vprintf, vfprintf, C library functions
@subheading @code{vfscanf} Function
@cindex @idxfncite{vfscanf(3)}
@cindex @idxfncite{scanf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{scanf(3)} instead. @xref{Variable arguments}.

@node vprintf, vscanf, vfscanf, C library functions
@subheading @code{vprintf} Function
@cindex @idxfncite{vprintf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{printf(3)} or @code{writeStream} (class
@code{WriteFileStream}) instead.

@node vscanf, vsnprintf, vprintf, C library functions
@subheading @code{vscanf} Function
@cindex @idxfncite{vscanf(3)}
@cindex @idxfncite{scanf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{scanf(3)} instead. @xref{Variable arguments}.

@node vsnprintf, vsprintf, vscanf, C library functions
@subheading @code{vsnprintf} Function
@cindex @idxfncite{vsnprintf(3)}
@cindex @idxfncite{sprintf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{sprintf(3)} instead. @xref{Variable arguments}.

@node vsprintf, vsscanf, vsnprintf, C library functions
@subheading @code{vsprintf} Function
@cindex @idxfncite{vsprintf(3)}
@cindex @idxfncite{sprintf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{sprintf(3)} instead. @xref{Variable arguments}.

@node vsscanf, , vsprintf, C library functions
@subheading @code{vsscanf} Function
@cindex @idxfncite{vsscanf(3)}
@cindex @idxfncite{scanf(3)}

This version of Ctalk does not support the @code{va_list} data type.
You should use @cite{sprintf(3)} instead. @xref{Variable arguments}.

@node GNU tools, , C library functions, C
@iftex
@section Using GNU Tools with Ctalk
@end iftex
@ifnottex
@subheading Using GNU Tools with Ctalk
@end ifnottex
@cindex GNU automake
@cindex GNU autoconf
@cindex automake
@cindex autoconf
@cindex Emacs, GNU
@cindex GNU Emacs

If you want to build Ctalk programs using the GNU configuration tools; i.e, 
the @samp{./configure,} @samp{make,} @samp{make install} sequence of commands,
you need to tell the build tools about Ctalk.

Doing this mostly involves telling the utility @command{automake,}
which helps write @flnm{Makefiles} for the @command{make} program, how
to build a Ctalk source file into an executable.

The @command{make} program allows Makefiles to define rules to build
different types of input files into programs, libraries, and other
types of data files.

In order to distinguish a Ctalk file, we give it the file extension
@samp{.ca}.  This lets the build tools know that the Ctalk program
isn't a standard C input file.

Then, in @flnm{Makefile.am} (consult the @command{automake} manual if
you're not certain what this is), you can define a rule to build a @samp{.ca} 
file into an @samp{.o} object file.

@example

SUFFIXES=.ca .o

.ca.o:
	$(top_builddir)/src/ctalk -I $(top_builddir)/classes $< \
	  -o `basename $@ .o`.i ; \
	$(CC) -c $(AM_CFLAGS) $(AM_CPPFLAGS) $(DEFS) -o $@ `basename $< .ca`.i

@end example

Then, add another line to link the object file into a program.

@example

methods$(EXEEXT) : methods.o
	$(CC) methods.o $(AM_LDFLAGS) $(LDFLAGS) $(LIBS) -o methods$(EXEEXT)

@end example

Note that this example comes from the @command{methods} program in the
Ctalk distribution, where, ``methods,'' is the canonical name of the
output file, as defined in the @samp{bin_PROGRAMS} macro.  That allows
@command{make} to install the program normally when you type,
@samp{make install.}

If you're using Ctalk for another package, you'll almost certainly
want to change the paths to something that uses an already-installed
Ctalk.  In that case, @flnm{Makefile.am} might contain lines like
these.

@example

SUFFIXES=.ca .o

.ca.o:
	/usr/local/bin/ctalk -I /usr/local/include/classes $< \
	  -o `basename $@ .o`.i ; \
	$(CC) -c $(AM_CFLAGS) $(AM_CPPFLAGS) $(DEFS) -o $@ `basename $< .ca`.i

@end example

@subsubheading Cleaning Up Extra Files

Note that the @command{basename} command in these examples handles the
translation of the @command{make} targets into an intermediate Ctalk
file.  

This way @command{make} doesn't need to worry about any intermediate
files, except that the @flnm{Makefile} should clean them up. 

So to define rules to clean up the extra files after the build,
include @command{make} targets like these in @flnm{Makefile.am.}

@example

clean-local:
	rm -f *.i

distclean-local:
	rm -f *.i


@end example

@subsubheading Running Ctalk Utilities in an Emacs Window

The @code{doc/} subdirectory of the Ctalk source code distribution
contains the Emacs Lisp programs @code{classes.el},
@code{methods-brief.el}, and @code{methods-full.el}.  They define
simple Emacs Lisp functions that let you capture the output of the
Ctalk utilities in an Emacs window.

The documentation file, @code{ctalktools.info} contains descriptions
of these functions, and the files also contain instructions to install
and use them.

@node Copying, GNU Free Documentation License, C, Top
@iftex
@chapter Copying
@end iftex
@ifnottex
@heading Copying and Distributing Ctalk
@end ifnottex
@cindex Copying
@cindex GNU General Public License
@cindex GNU Lesser General Public License

Ctalk is free software.  You can copy, distribute, and modify Ctalk
under the terms of the GNU General Public License, Version 3 (see,
@flnm{COPYING}, in the Ctalk distribution).  You can also distribute
executable programs which link to the @command{ctalk} run time
libraries under the terms of the GNU Lesser General Public License,
Version 3 (@flnm{COPYING.LIB} in the Ctalk distribution).

@node GNU Free Documentation License, Index, Copying, Top
@iftex
@chapter GNU Free Documentation License
@end iftex
@ifnottex
@heading GNU Free Documentation License
@end ifnottex
@cindex GNU Free Documentation License
@example

                        Version 1.1, March 2000
     Copyright (C) 2000  Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.



  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.


  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you."

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque."

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.


  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.


  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.


  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title
     distinct    from that of the Document, and from those of previous
     versions    (which should, if there were any, be listed in the
     History section    of the Document).  You may use the same title
     as a previous version    if the original publisher of that version
     gives permission.
     B. List on the Title Page, as authors, one or more persons or
     entities    responsible for authorship of the modifications in the
     Modified    Version, together with at least five of the principal
     authors of the    Document (all of its principal authors, if it
     has less than five).
     C. State on the Title page the name of the publisher of the
     Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license
     notice    giving the public permission to use the Modified Version
     under the    terms of this License, in the form shown in the
     Addendum below.
     G. Preserve in that license notice the full lists of Invariant
     Sections    and required Cover Texts given in the Document's
     license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section entitled "History", and its title, and add
     to    it an item stating at least the title, year, new authors, and
       publisher of the Modified Version as given on the Title Page.
     If    there is no section entitled "History" in the Document,
     create one    stating the title, year, authors, and publisher of
     the Document as    given on its Title Page, then add an item
     describing the Modified    Version as stated in the previous
     sentence.
     J. Preserve the network location, if any, given in the Document for
       public access to a Transparent copy of the Document, and
     likewise    the network locations given in the Document for
     previous versions    it was based on.  These may be placed in the
     "History" section.     You may omit a network location for a work
     that was published at    least four years before the Document
     itself, or if the original    publisher of the version it refers
     to gives permission.
     K. In any section entitled "Acknowledgements" or "Dedications",
     preserve the section's title, and preserve in the section all the
      substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
     unaltered in their text and in their titles.  Section numbers
     or the equivalent are not considered part of the section titles.
     M. Delete any section entitled "Endorsements."  Such a section
     may not be included in the Modified Version.
     N. Do not retitle any existing section as "Endorsements"    or to
     conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties-for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition
     of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.


  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgements", and any sections entitled "Dedications."  You
     must delete all sections entitled "Endorsements."


  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.


  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.


  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.


  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.


 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     http://www.gnu.org/copyleft/.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.


ADDENDUM: How to use this License for your documents

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

     Copyright (C)  YEAR  YOUR NAME.
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1
     or any later version published by the Free Software Foundation;
     with the Invariant Sections being LIST THEIR TITLES, with the
     Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
     A copy of the license is included in the section entitled "GNU
     Free Documentation License."

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.

@end example

@c
@c  INDEX
@c
@ifnottex
@node Index, , GNU Free Documentation License, Top
@subheading Index
@end ifnottex
@iftex
@chapter Index
@end iftex
@printindex cp
@bye
