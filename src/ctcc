#!/bin/sh

INPUTNAME=""
CTALKBIN=`which ctalk`
GCCBIN=`which gcc`
GCCFLAGS=
COMPILEONLY="no"
EXTRALIBS=
OUTFILENAME="ctcc.out"
CTALKOUTPUT="ctalk.out.i"
X_INClUDEFLAGS=""

#
# Options set by configure.
#
CTALKFLAGS=""
CT_CFLAGS="-Wno-nonnull -g -pthread -Wno-pointer-to-int-cast -Wno-format-overflow -g"
CT_LDFLAGS=" -g"
CT_X_EXT_LDFLAGS="-L/usr/lib -L/usr/X11R6/lib -lX11 -lXext -lGL -lGLU -lGLEW -lXft -lfreetype -lfontconfig -lXrender -lm -lGL -lGLU -lglut -lXft -lfreetype -lfontconfig -lGL -lGLU -lglut -lGLEW"
CT_X_CFLAGS="-I /usr/include"

GCCFLAGS=$CFLAGS

if [ ! -z "$CFLAGS" ]; then
    CT_CFLAGS="$CFLAGS "$CT_CFLAGS;
fi

if [ ! -z "$LDFLAGS" ]; then
    CT_LDFLAGS="$LDFLAGS "$CT_LDFLAGS;
fi

#
# CTFLAGS is read and parsed by the compiler,
# so it shouldn't be needed here.
#
# if [ ! -z "$CTFLAGS" ]; then
#    CTALKFLAGS="$CTFLAGS "$CTALKFLAGS;
# fi

LD_LIBRARY_OPT=`if [ $LD_LIBRARY_PATH ]; then echo $LD_LIBRARY_PATH | sed 's/:$//' | sed 's/^/-L/' | sed 's/:/ -L/g'; fi`

# This is now set in ./configure
# Turn off the OS X version's long double warning.
# if [ `uname -s` = Darwin ] ; then
#     GCCFLAGS=$GCCFLAGS" -Wno-long-double"
# fi

help () {
    echo "Usage: ctcc [-h] | <options> input-files"
    echo "OPTIONS:"
    echo "-c               Compile only; don't link the .o output file."
    echo "--clearpreload   Add --clearpreload to Ctalk's options"
    echo "-h               Print help and exit."
    echo "-I <dir>         Add <dir> to Ctalk search path."
    echo "-m               Add -lm to linker flags."
    echo "--nopreload      Add --nopreload to Ctalk's options."
    echo "-o <name>        Save the output in file <name>.  The default is ctcc.out"
    echo "--printtemplates Print the templates that the compiler reads and caches"
    echo "                 (but does not necessarily send to the output)."
    echo "--progress       Add --progress to Ctalk's options."
    echo "-x               Add the X Window System libraries to the linker flags."
    echo
    echo "You can also set options with the CFLAGS, CTFLAGS, and LDFLAGS"
    echo "environment variables.  See, \"man ctcc,\" for details."
    echo "Report bugs to: rk3314042@gmail.com."
    exit 1;
}

if [ $# -eq 0 ] ; then help; fi

while [ $# -ge 1 ] ; do
    case $1 in
	-c)
          GCCFLAGS="-c "$GCCFLAGS;
	  COMPILEONLY="yes";
	  shift 1;
	  ;;
	-m)
	  EXTRALIBS=$EXTRALIBS" -lm";
	  shift 1;
	  ;;
	-x)
	    if [ -z $LD_LIBRARY_PATH ]; then
		EXTRALIBS=$EXTRALIBS" -lX11 -lXext $CT_X_EXT_LDFLAGS";
	    else
		EXTRALIBS=$EXTRALIBS" -lX11 -lXext $CT_X_EXT_LDFLAGS";
	    fi
	  X_INCLUDEFLAGS="$CT_X_CFLAGS"
          shift 1;
          ;;
	-h)
	  help;
	  ;;
	--help)
	  help;
	  ;;
	-I)
	  shift 1;
	  INCLUDEFLAGS=$INCLUDEFLAGS" -I $1 ";
	  shift 1;
	  ;;
	-o)
	  shift 1;
	  OUTFILENAME=$1;
	  CTALKOUTPUT=$OUTFILENAME".i";
	  shift 1;
	  ;;
	--nopreload)
	  INCLUDEFLAGS=$INCLUDEFLAGS" --nopreload";
	  shift 1;
	  ;;
	--progress)
	  INCLUDEFLAGS=$INCLUDEFLAGS" --progress";
	  shift 1;
	  ;;
	--clearpreload)
	  INCLUDEFLAGS=$INCLUDEFLAGS" --clearpreload";
	  shift 1;
	  ;;
	*)
	  INPUTNAME=$INPUTNAME" $1 ";
	  shift 1;
	  ;;
    esac
done

if [ -z "$INPUTNAME" ] ; then help; fi 

if [ $COMPILEONLY = "yes" ] ; then

echo "$CTALKBIN $INCLUDEFLAGS $CTALKFLAGS $X_INCLUDEFLAGS $INPUTNAME -o $CTALKOUTPUT && $GCCBIN $CT_CFLAGS $GCCFLAGS $CTALKOUTPUT -o $OUTFILENAME"
$CTALKBIN $INCLUDEFLAGS $CTALKFLAGS $X_INCLUDEFLAGS $INPUTNAME -o $CTALKOUTPUT && $GCCBIN $CT_CFLAGS $GCCFLAGS $CTALKOUTPUT -o $OUTFILENAME 

else 

echo "$CTALKBIN $INCLUDEFLAGS $CTALKFLAGS $X_INCLUDEFLAGS $INPUTNAME -o $CTALKOUTPUT && $GCCBIN $CT_CFLAGS $GCCFLAGS $CTALKOUTPUT -o $OUTFILENAME $CT_LDFLAGS -lctalk $LD_LIBRARY_OPT $EXTRALIBS "
$CTALKBIN $INCLUDEFLAGS $CTALKFLAGS $X_INCLUDEFLAGS $INPUTNAME -o $CTALKOUTPUT && $GCCBIN $CT_CFLAGS $GCCFLAGS $CTALKOUTPUT -o $OUTFILENAME $CT_LDFLAGS -lctalk $LD_LIBRARY_OPT $EXTRALIBS 

fi

rm -f $CTALKOUTPUT

exit 0
